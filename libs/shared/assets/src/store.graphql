type Query {
  # Return a Elasticsearch mapping.
  #
  # Equivalent to GET /es-mapping/{type}
  getESMapping(
    # Enpoint name
    type: String!
  ): JSON

  # Return a json-ld context.
  #
  # Equivalent to GET /json-ld-context/{type}
  getJsonLdContext(
    # Endpoint name
    type: String!
  ): JSON

  # Return a json schema.
  #
  # Equivalent to GET /json-schema/{type}
  getJsonSchema(
    # Endpoint name
    type: String!
  ): JSON

  # Heartbeat service to check that the server is working as expected
  #
  # Equivalent to GET /status
  getStatus: Status

  # Heartbeat service to check that the server is alive
  #
  # Equivalent to GET /ping
  ping: Ping

  # A viewer that wraps all operations authenticated via security scheme 'basic', which is of type 'http' 'basic'
  viewerBasicAuth(username: String!, password: String!): ViewerBasicAuth

  # A viewer that wraps operations for all available authentication mechanisms
  viewerAnyAuth(basic: BasicInput): ViewerAnyAuth
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Status {
  # Object containing all information of each health indicator
  details: JSON

  # Object containing information of each health indicator which is of status 'down', or in other words "unhealthy".
  error: JSON

  # Object containing information of each health indicator which is of status 'up', or in other words "healthy".
  info: JSON

  # If any health indicator failed the status will be 'error'. If the NestJS app is shutting down but still accepting HTTP requests, the health check will have the 'shutting_down' status.
  status: Status2
}

enum Status2 {
  ERROR
  OK
  SHUTTING_DOWN
}

type Ping {
  # Current time on the server
  ack: String
}

# A viewer for security scheme 'basic'
type ViewerBasicAuth {
  # Return a Bibliographic Resource.
  #
  # Equivalent to GET /BibliographicResource/{id}
  getBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!
  ): BibliographicResource2

  # Return a Concept.
  #
  # Equivalent to GET /Concept/{id}
  getConcept(
    # Id for the Concept
    id: String!
  ): Concept2

  # Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).
  #
  # Equivalent to GET /Pinkka/{id}
  getPinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!
  ): Pinkka2

  # Return a Administrative status.
  #
  # Equivalent to GET /administrativeStatus/{id}
  getadministrativeStatus(
    # Id for the Administrative status
    id: String!
  ): AdministrativeStatus2

  # Return a agent.
  #
  # Equivalent to GET /agent/{id}
  getagent(
    # Id for the agent
    id: String!
  ): Agent2

  # Return a annotation.
  #
  # Equivalent to GET /annotation/{id}
  getannotation(
    # Id for the annotation
    id: String!
  ): Annotation2

  # Return a annotationOccurrence.
  #
  # Equivalent to GET /annotationOccurrence/{id}
  getannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!
  ): AnnotationOccurrence

  # Return a Area.
  #
  # Equivalent to GET /area/{id}
  getarea(
    # Id for the Area
    id: String!
  ): Area2

  # Return a Audio recording.
  #
  # Equivalent to GET /audio/{id}
  getaudio(
    # Id for the Audio recording
    id: String!
  ): Audio2

  # Return a Instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel/{id}
  getbirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!
  ): BirdSongRecognitionSkillLevel2

  # Return a Branch.
  #
  # Equivalent to GET /branch/{id}
  getbranch(
    # Id for the Branch
    id: String!
  ): Branch2

  # Return a Checklist.
  #
  # Equivalent to GET /checklist/{id}
  getchecklist(
    # Id for the Checklist
    id: String!
  ): Checklist2

  # Return a Checklist version.
  #
  # Equivalent to GET /checklistVersion/{id}
  getchecklistVersion(
    # Id for the Checklist version
    id: String!
  ): ChecklistVersion2

  # Return a Collection.
  #
  # Equivalent to GET /collection/{id}
  getcollection(
    # Id for the Collection
    id: String!
  ): Collection2

  # Return a completeList.
  #
  # Equivalent to GET /completeList/{id}
  getcompleteList(
    # Id for the completeList
    id: String!
  ): CompleteList2

  # Return a Instances of this describe one taxon description context.
  #
  # Equivalent to GET /contentContextDescription/{id}
  getcontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!
  ): ContentContextDescription2

  # Return a Data field.
  #
  # Equivalent to GET /dataField/{id}
  getdataField(
    # Id for the Data field
    id: String!
  ): DataField2

  # Return a Tag.
  #
  # Equivalent to GET /dataset/{id}
  getdataset(
    # Id for the Tag
    id: String!
  ): Dataset2

  # Return a dateRange.
  #
  # Equivalent to GET /dateRange/{id}
  getdateRange(
    # Id for the dateRange
    id: String!
  ): DateRange2

  # Return a device.
  #
  # Equivalent to GET /device/{id}
  getdevice(
    # Id for the device
    id: String!
  ): Device2

  # Return a deviceIndividual.
  #
  # Equivalent to GET /deviceIndividual/{id}
  getdeviceIndividual(
    # Id for the deviceIndividual
    id: String!
  ): DeviceIndividual2

  # Return a Submissions.
  #
  # Equivalent to GET /document/{id}
  getdocument(
    # Id for the Submissions
    id: String!
  ): Document2

  # Return a Download request.
  #
  # Equivalent to GET /downloadRequest/{id}
  getdownloadRequest(
    # Id for the Download request
    id: String!
  ): DownloadRequest2

  # Return a Endagerment object.
  #
  # Equivalent to GET /endangerment/{id}
  getendangerment(
    # Id for the Endagerment object
    id: String!
  ): Endangerment2

  # Return a event.
  #
  # Equivalent to GET /event/{id}
  getevent(
    # Id for the event
    id: String!
  ): Event3

  # Return a field.
  #
  # Equivalent to GET /field/{id}
  getfield(
    # Id for the field
    id: String!
  ): Field2

  # Return a fieldset.
  #
  # Equivalent to GET /fieldset/{id}
  getfieldset(
    # Id for the fieldset
    id: String!
  ): Fieldset2

  # Return a form.
  #
  # Equivalent to GET /form/{id}
  getform(
    # Id for the form
    id: String!
  ): Form2

  # Return a formFooter.
  #
  # Equivalent to GET /formFooter/{id}
  getformFooter(
    # Id for the formFooter
    id: String!
  ): FormFooter

  # Return a formInstructions.
  #
  # Equivalent to GET /formInstructions/{id}
  getformInstructions(
    # Id for the formInstructions
    id: String!
  ): FormInstructions2

  # Return a formNamedPlaceOptions.
  #
  # Equivalent to GET /formNamedPlaceOptions/{id}
  getformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!
  ): FormNamedPlaceOptions

  # Return a formOptions.
  #
  # Equivalent to GET /formOptions/{id}
  getformOptions(
    # Id for the formOptions
    id: String!
  ): FormOptions

  # Return a formPermission.
  #
  # Equivalent to GET /formPermission/{id}
  getformPermission(
    # Id for the formPermission
    id: String!
  ): FormPermission2

  # Return a formPermissionPerson.
  #
  # Equivalent to GET /formPermissionPerson/{id}
  getformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!
  ): FormPermissionPerson2

  # Return a formPermissionSingle.
  #
  # Equivalent to GET /formPermissionSingle/{id}
  getformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!
  ): FormPermissionSingle2

  # Return a formSeason.
  #
  # Equivalent to GET /formSeason/{id}
  getformSeason(
    # Id for the formSeason
    id: String!
  ): FormSeason

  # Return a Gathering event.
  #
  # Equivalent to GET /gathering/{id}
  getgathering(
    # Id for the Gathering event
    id: String!
  ): Gathering

  # Return a Global gathering event.
  #
  # Equivalent to GET /gatheringEvent/{id}
  getgatheringEvent(
    # Id for the Global gathering event
    id: String!
  ): GatheringEvent

  # Return a Keruutapahtuman faktat.
  #
  # Equivalent to GET /gatheringFact/{id}
  getgatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!
  ): GatheringFact

  # Return a IUCN Red List Evaluation Habitat.
  #
  # Equivalent to GET /habitat/{id}
  gethabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!
  ): Habitat3

  # Return a Identification.
  #
  # Equivalent to GET /identification/{id}
  getidentification(
    # Id for the Identification
    id: String!
  ): Identification

  # Return a Image.
  #
  # Equivalent to GET /image/{id}
  getimage(
    # Id for the Image
    id: String!
  ): Image2

  # Return a individual.
  #
  # Equivalent to GET /individual/{id}
  getindividual(
    # Id for the individual
    id: String!
  ): Individual2

  # Return a Informal Taxon Group.
  #
  # Equivalent to GET /informalTaxonGroup/{id}
  getinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!
  ): InformalTaxonGroup2

  # Return a Information System.
  #
  # Equivalent to GET /informationSystem/{id}
  getinformationSystem(
    # Id for the Information System
    id: String!
  ): InformationSystem2

  # Return a IUCN Red List Evaluation.
  #
  # Equivalent to GET /iucnRedListEvaluation/{id}
  getiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!
  ): IucnRedListEvaluation2

  # Return a IUCN Evaluation Year.
  #
  # Equivalent to GET /iucnRedListEvaluationYear/{id}
  getiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!
  ): IucnRedListEvaluationYear2

  # Return a IUCN Red List Evaluation Informal Taxon Group.
  #
  # Equivalent to GET /iucnRedListTaxonGroup/{id}
  getiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!
  ): IucnRedListTaxonGroup2

  # Return a measurement.
  #
  # Equivalent to GET /measurement/{id}
  getmeasurement(
    # Id for the measurement
    id: String!
  ): Measurement

  # Return a 3D model.
  #
  # Equivalent to GET /model/{id}
  getmodel(
    # Id for the 3D model
    id: String!
  ): Model2

  # Return a multimedia.
  #
  # Equivalent to GET /multimedia/{id}
  getmultimedia(
    # Id for the multimedia
    id: String!
  ): Multimedia2

  # Return a namedPlace.
  #
  # Equivalent to GET /namedPlace/{id}
  getnamedPlace(
    # Id for the namedPlace
    id: String!
  ): NamedPlace2

  # Return a News.
  #
  # Equivalent to GET /news/{id}
  getnews(
    # Id for the News
    id: String!
  ): News2

  # Return a notification.
  #
  # Equivalent to GET /notification/{id}
  getnotification(
    # Id for the notification
    id: String!
  ): Notification2

  # Return a Occurrence.
  #
  # Equivalent to GET /occurrence/{id}
  getoccurrence(
    # Id for the Occurrence
    id: String!
  ): Occurrence2

  # Return a Organization.
  #
  # Equivalent to GET /organization/{id}
  getorganization(
    # Id for the Organization
    id: String!
  ): Organization2

  # Return a PDF.
  #
  # Equivalent to GET /pdf/{id}
  getpdf(
    # Id for the PDF
    id: String!
  ): Pdf2

  # Return a permit.
  #
  # Equivalent to GET /permit/{id}
  getpermit(
    # Id for the permit
    id: String!
  ): Permit2

  # Return a Person.
  #
  # Equivalent to GET /person/{id}
  getperson(
    # Id for the Person
    id: String!
  ): Person2

  # Return a preparation.
  #
  # Equivalent to GET /preparation/{id}
  getpreparation(
    # Id for the preparation
    id: String!
  ): Preparation2

  # Return a profile.
  #
  # Equivalent to GET /profile/{id}
  getprofile(
    # Id for the profile
    id: String!
  ): Profile2

  # Return a Publication.
  #
  # Equivalent to GET /publication/{id}
  getpublication(
    # Id for the Publication
    id: String!
  ): Publication3

  # Return a Instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to GET /regionalStatus/{id}
  getregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!
  ): RegionalStatus2

  # Return a reserve.
  #
  # Equivalent to GET /reserve/{id}
  getreserve(
    # Id for the reserve
    id: String!
  ): Reserve

  # Return a Specimen sample.
  #
  # Equivalent to GET /sample/{id}
  getsample(
    # Id for the Specimen sample
    id: String!
  ): Sample2

  # Return a Satellite Tracking Project.
  #
  # Equivalent to GET /satelliteTrackingProject/{id}
  getsatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!
  ): SatelliteTrackingProject2

  # Return a Transaction class.
  #
  # Equivalent to GET /specimenTransaction/{id}
  getspecimenTransaction(
    # Id for the Transaction class
    id: String!
  ): SpecimenTransaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /specimenTransactionEvent/{id}
  getspecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): SpecimenTransactionEvent

  # Return a subUnit.
  #
  # Equivalent to GET /subUnit/{id}
  getsubUnit(
    # Id for the subUnit
    id: String!
  ): SubUnit2

  # Return a tag.
  #
  # Equivalent to GET /tag/{id}
  gettag(
    # Id for the tag
    id: String!
  ): Tag2

  # Return a Taxon.
  #
  # Equivalent to GET /taxon/{id}
  gettaxon(
    # Id for the Taxon
    id: String!
  ): Taxon2

  # Return a Completeness of census.
  #
  # Equivalent to GET /taxonCensus/{id}
  gettaxonCensus(
    # Id for the Completeness of census
    id: String!
  ): TaxonCensus2

  # Return a Taxon concept.
  #
  # Equivalent to GET /taxonConcept/{id}
  gettaxonConcept(
    # Id for the Taxon concept
    id: String!
  ): TaxonConcept2

  # Return a IUCN Editors.
  #
  # Equivalent to GET /taxonGroupIucnEditors/{id}
  gettaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!
  ): TaxonGroupIucnEditors2

  # Return a Taxon interaction.
  #
  # Equivalent to GET /taxonInteraction/{id}
  gettaxonInteraction(
    # Id for the Taxon interaction
    id: String!
  ): TaxonInteraction2

  # Return a Instances of this class are a taxon sets.
  #
  # Equivalent to GET /taxonSet/{id}
  gettaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!
  ): TaxonSet2

  # Return a Trait.
  #
  # Equivalent to GET /trait/{id}
  gettrait(
    # Id for the Trait
    id: String!
  ): Trait2

  # Return a Trait enumeration.
  #
  # Equivalent to GET /traitEnumValue/{id}
  gettraitEnumValue(
    # Id for the Trait enumeration
    id: String!
  ): TraitEnumValue2

  # Return a Trait value.
  #
  # Equivalent to GET /traitGroup/{id}
  gettraitGroup(
    # Id for the Trait value
    id: String!
  ): TraitGroup2

  # Return a Transaction.
  #
  # Equivalent to GET /transaction/{id}
  gettransaction(
    # Id for the Transaction
    id: String!
  ): Transaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /transactionEvent/{id}
  gettransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): TransactionEvent2

  # Return a Transaction Item.
  #
  # Equivalent to GET /transactionItem/{id}
  gettransactionItem(
    # Id for the Transaction Item
    id: String!
  ): TransactionItem

  # Return a translation.
  #
  # Equivalent to GET /translation/{id}
  gettranslation(
    # Id for the translation
    id: String!
  ): Translation2

  # Return a Identification.
  #
  # Equivalent to GET /typeSpecimen/{id}
  gettypeSpecimen(
    # Id for the Identification
    id: String!
  ): TypeSpecimen

  # Return a Specimen.
  #
  # Equivalent to GET /unit/{id}
  getunit(
    # Id for the Specimen
    id: String!
  ): Unit

  # Return a Näytteen / havainnon faktat.
  #
  # Equivalent to GET /unitFact/{id}
  getunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!
  ): UnitFact

  # Return a Havainnon keruutiedot.
  #
  # Equivalent to GET /unitGathering/{id}
  getunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!
  ): UnitGathering

  # Return a Unit of measurement.
  #
  # Equivalent to GET /unitOfMeasurement/{id}
  getunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!
  ): UnitOfMeasurement2

  # Return a validator.
  #
  # Equivalent to GET /validator/{id}
  getvalidator(
    # Id for the validator
    id: String!
  ): Validator2

  # Return a Video.
  #
  # Equivalent to GET /video/{id}
  getvideo(
    # Id for the Video
    id: String!
  ): Video2

  # Return list of Bibliographic Resource objects.
  #
  # Equivalent to GET /BibliographicResource
  listBibliographicResource(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): BibliographicResource

  # Return list of Concept objects.
  #
  # Equivalent to GET /Concept
  listConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Concept

  # Return list of Instances of this describe one taxon description context (Pinkka eLearning enviroment) objects.
  #
  # Equivalent to GET /Pinkka
  listPinkka(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Pinkka

  # Return list of Administrative status objects.
  #
  # Equivalent to GET /administrativeStatus
  listadministrativeStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): AdministrativeStatus

  # Return list of agent objects.
  #
  # Equivalent to GET /agent
  listagent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Agent

  # Return list of annotation objects.
  #
  # Equivalent to GET /annotation
  listannotation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Annotation

  # Return list of annotationOccurrence objects.
  #
  # Equivalent to GET /annotationOccurrence
  listannotationOccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): AnnotationOccurrence2

  # Return list of Area objects.
  #
  # Equivalent to GET /area
  listarea(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Area

  # Return list of Audio recording objects.
  #
  # Equivalent to GET /audio
  listaudio(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Audio

  # Return list of Instances of this class are bird song recognition skill levels of a certain area objects.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel
  listbirdSongRecognitionSkillLevel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): BirdSongRecognitionSkillLevel

  # Return list of Branch objects.
  #
  # Equivalent to GET /branch
  listbranch(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Branch

  # Return list of Checklist objects.
  #
  # Equivalent to GET /checklist
  listchecklist(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Checklist

  # Return list of Checklist version objects.
  #
  # Equivalent to GET /checklistVersion
  listchecklistVersion(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): ChecklistVersion

  # Return list of Collection objects.
  #
  # Equivalent to GET /collection
  listcollection(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Collection

  # Return list of completeList objects.
  #
  # Equivalent to GET /completeList
  listcompleteList(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): CompleteList

  # Return list of Instances of this describe one taxon description context objects.
  #
  # Equivalent to GET /contentContextDescription
  listcontentContextDescription(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): ContentContextDescription

  # Return list of Data field objects.
  #
  # Equivalent to GET /dataField
  listdataField(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DataField

  # Return list of Tag objects.
  #
  # Equivalent to GET /dataset
  listdataset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Dataset

  # Return list of dateRange objects.
  #
  # Equivalent to GET /dateRange
  listdateRange(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DateRange

  # Return list of device objects.
  #
  # Equivalent to GET /device
  listdevice(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Device

  # Return list of deviceIndividual objects.
  #
  # Equivalent to GET /deviceIndividual
  listdeviceIndividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DeviceIndividual

  # Return list of Submissions objects.
  #
  # Equivalent to GET /document
  listdocument(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Document

  # Return list of Download request objects.
  #
  # Equivalent to GET /downloadRequest
  listdownloadRequest(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DownloadRequest

  # Return list of Endagerment object objects.
  #
  # Equivalent to GET /endangerment
  listendangerment(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Endangerment

  # Return list of event objects.
  #
  # Equivalent to GET /event
  listevent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Event2

  # Return list of field objects.
  #
  # Equivalent to GET /field
  listfield(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Field

  # Return list of fieldset objects.
  #
  # Equivalent to GET /fieldset
  listfieldset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Fieldset

  # Return list of form objects.
  #
  # Equivalent to GET /form
  listform(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Form

  # Return list of formFooter objects.
  #
  # Equivalent to GET /formFooter
  listformFooter(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormFooter2

  # Return list of formInstructions objects.
  #
  # Equivalent to GET /formInstructions
  listformInstructions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormInstructions

  # Return list of formNamedPlaceOptions objects.
  #
  # Equivalent to GET /formNamedPlaceOptions
  listformNamedPlaceOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormNamedPlaceOptions2

  # Return list of formOptions objects.
  #
  # Equivalent to GET /formOptions
  listformOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormOptions2

  # Return list of formPermission objects.
  #
  # Equivalent to GET /formPermission
  listformPermission(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormPermission

  # Return list of formPermissionPerson objects.
  #
  # Equivalent to GET /formPermissionPerson
  listformPermissionPerson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormPermissionPerson

  # Return list of formPermissionSingle objects.
  #
  # Equivalent to GET /formPermissionSingle
  listformPermissionSingle(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormPermissionSingle

  # Return list of formSeason objects.
  #
  # Equivalent to GET /formSeason
  listformSeason(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormSeason2

  # Return list of Gathering event objects.
  #
  # Equivalent to GET /gathering
  listgathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Gathering2

  # Return list of Global gathering event objects.
  #
  # Equivalent to GET /gatheringEvent
  listgatheringEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): GatheringEvent2

  # Return list of Keruutapahtuman faktat objects.
  #
  # Equivalent to GET /gatheringFact
  listgatheringFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): GatheringFact2

  # Return list of IUCN Red List Evaluation Habitat objects.
  #
  # Equivalent to GET /habitat
  listhabitat(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Habitat2

  # Return list of Identification objects.
  #
  # Equivalent to GET /identification
  listidentification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Identification2

  # Return list of Image objects.
  #
  # Equivalent to GET /image
  listimage(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Image

  # Return list of individual objects.
  #
  # Equivalent to GET /individual
  listindividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Individual

  # Return list of Informal Taxon Group objects.
  #
  # Equivalent to GET /informalTaxonGroup
  listinformalTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): InformalTaxonGroup

  # Return list of Information System objects.
  #
  # Equivalent to GET /informationSystem
  listinformationSystem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): InformationSystem

  # Return list of IUCN Red List Evaluation objects.
  #
  # Equivalent to GET /iucnRedListEvaluation
  listiucnRedListEvaluation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): IucnRedListEvaluation

  # Return list of IUCN Evaluation Year objects.
  #
  # Equivalent to GET /iucnRedListEvaluationYear
  listiucnRedListEvaluationYear(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): IucnRedListEvaluationYear

  # Return list of IUCN Red List Evaluation Informal Taxon Group objects.
  #
  # Equivalent to GET /iucnRedListTaxonGroup
  listiucnRedListTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): IucnRedListTaxonGroup

  # Return list of measurement objects.
  #
  # Equivalent to GET /measurement
  listmeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Measurement2

  # Return list of 3D model objects.
  #
  # Equivalent to GET /model
  listmodel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Model

  # Return list of multimedia objects.
  #
  # Equivalent to GET /multimedia
  listmultimedia(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Multimedia

  # Return list of namedPlace objects.
  #
  # Equivalent to GET /namedPlace
  listnamedPlace(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): NamedPlace

  # Return list of News objects.
  #
  # Equivalent to GET /news
  listnews(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): News

  # Return list of notification objects.
  #
  # Equivalent to GET /notification
  listnotification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Notification

  # Return list of Occurrence objects.
  #
  # Equivalent to GET /occurrence
  listoccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Occurrence

  # Return list of Organization objects.
  #
  # Equivalent to GET /organization
  listorganization(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Organization

  # Return list of PDF objects.
  #
  # Equivalent to GET /pdf
  listpdf(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Pdf

  # Return list of permit objects.
  #
  # Equivalent to GET /permit
  listpermit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Permit

  # Return list of Person objects.
  #
  # Equivalent to GET /person
  listperson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Person

  # Return list of preparation objects.
  #
  # Equivalent to GET /preparation
  listpreparation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Preparation

  # Return list of profile objects.
  #
  # Equivalent to GET /profile
  listprofile(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Profile

  # Return list of Publication objects.
  #
  # Equivalent to GET /publication
  listpublication(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Publication2

  # Return list of Instances of this class tell endangerment of a certain area and notes about the area objects.
  #
  # Equivalent to GET /regionalStatus
  listregionalStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): RegionalStatus

  # Return list of reserve objects.
  #
  # Equivalent to GET /reserve
  listreserve(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Reserve2

  # Return list of Specimen sample objects.
  #
  # Equivalent to GET /sample
  listsample(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Sample

  # Return list of Satellite Tracking Project objects.
  #
  # Equivalent to GET /satelliteTrackingProject
  listsatelliteTrackingProject(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SatelliteTrackingProject

  # Return list of Transaction class objects.
  #
  # Equivalent to GET /specimenTransaction
  listspecimenTransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SpecimenTransaction

  # Return list of Transaction Event objects.
  #
  # Equivalent to GET /specimenTransactionEvent
  listspecimenTransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SpecimenTransactionEvent2

  # Return list of subUnit objects.
  #
  # Equivalent to GET /subUnit
  listsubUnit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SubUnit

  # Return list of tag objects.
  #
  # Equivalent to GET /tag
  listtag(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Tag

  # Return list of Taxon objects.
  #
  # Equivalent to GET /taxon
  listtaxon(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Taxon

  # Return list of Completeness of census objects.
  #
  # Equivalent to GET /taxonCensus
  listtaxonCensus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonCensus3

  # Return list of Taxon concept objects.
  #
  # Equivalent to GET /taxonConcept
  listtaxonConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonConcept

  # Return list of IUCN Editors objects.
  #
  # Equivalent to GET /taxonGroupIucnEditors
  listtaxonGroupIucnEditors(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonGroupIucnEditors

  # Return list of Taxon interaction objects.
  #
  # Equivalent to GET /taxonInteraction
  listtaxonInteraction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonInteraction

  # Return list of Instances of this class are a taxon sets objects.
  #
  # Equivalent to GET /taxonSet
  listtaxonSet(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonSet

  # Return list of Trait objects.
  #
  # Equivalent to GET /trait
  listtrait(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Trait

  # Return list of Trait enumeration objects.
  #
  # Equivalent to GET /traitEnumValue
  listtraitEnumValue(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TraitEnumValue

  # Return list of Trait value objects.
  #
  # Equivalent to GET /traitGroup
  listtraitGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TraitGroup

  # Return list of Transaction objects.
  #
  # Equivalent to GET /transaction
  listtransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Transaction

  # Return list of Transaction Event objects.
  #
  # Equivalent to GET /transactionEvent
  listtransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TransactionEvent

  # Return list of Transaction Item objects.
  #
  # Equivalent to GET /transactionItem
  listtransactionItem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TransactionItem2

  # Return list of translation objects.
  #
  # Equivalent to GET /translation
  listtranslation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Translation

  # Return list of Identification objects.
  #
  # Equivalent to GET /typeSpecimen
  listtypeSpecimen(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TypeSpecimen2

  # Return list of Specimen objects.
  #
  # Equivalent to GET /unit
  listunit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Unit2

  # Return list of Näytteen / havainnon faktat objects.
  #
  # Equivalent to GET /unitFact
  listunitFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): UnitFact2

  # Return list of Havainnon keruutiedot objects.
  #
  # Equivalent to GET /unitGathering
  listunitGathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): UnitGathering2

  # Return list of Unit of measurement objects.
  #
  # Equivalent to GET /unitOfMeasurement
  listunitOfMeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): UnitOfMeasurement

  # Return list of validator objects.
  #
  # Equivalent to GET /validator
  listvalidator(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Validator

  # Return list of Video objects.
  #
  # Equivalent to GET /video
  listvideo(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Video

  # Return a Bibliographic Resource.
  #
  # Equivalent to GET /BibliographicResource/{id}/_ver/{number}
  versionBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!

    # Version number for the Bibliographic Resource
    number: Float!
  ): BibliographicResource2

  # Return a Concept.
  #
  # Equivalent to GET /Concept/{id}/_ver/{number}
  versionConcept(
    # Id for the Concept
    id: String!

    # Version number for the Concept
    number: Float!
  ): Concept2

  # Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).
  #
  # Equivalent to GET /Pinkka/{id}/_ver/{number}
  versionPinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!

    # Version number for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    number: Float!
  ): Pinkka2

  # Return a Administrative status.
  #
  # Equivalent to GET /administrativeStatus/{id}/_ver/{number}
  versionadministrativeStatus(
    # Id for the Administrative status
    id: String!

    # Version number for the Administrative status
    number: Float!
  ): AdministrativeStatus2

  # Return a agent.
  #
  # Equivalent to GET /agent/{id}/_ver/{number}
  versionagent(
    # Id for the agent
    id: String!

    # Version number for the agent
    number: Float!
  ): Agent2

  # Return a annotation.
  #
  # Equivalent to GET /annotation/{id}/_ver/{number}
  versionannotation(
    # Id for the annotation
    id: String!

    # Version number for the annotation
    number: Float!
  ): Annotation2

  # Return a annotationOccurrence.
  #
  # Equivalent to GET /annotationOccurrence/{id}/_ver/{number}
  versionannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!

    # Version number for the annotationOccurrence
    number: Float!
  ): AnnotationOccurrence

  # Return a Area.
  #
  # Equivalent to GET /area/{id}/_ver/{number}
  versionarea(
    # Id for the Area
    id: String!

    # Version number for the Area
    number: Float!
  ): Area2

  # Return a Audio recording.
  #
  # Equivalent to GET /audio/{id}/_ver/{number}
  versionaudio(
    # Id for the Audio recording
    id: String!

    # Version number for the Audio recording
    number: Float!
  ): Audio2

  # Return a Instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel/{id}/_ver/{number}
  versionbirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!

    # Version number for the Instances of this class are bird song recognition skill levels of a certain area
    number: Float!
  ): BirdSongRecognitionSkillLevel2

  # Return a Branch.
  #
  # Equivalent to GET /branch/{id}/_ver/{number}
  versionbranch(
    # Id for the Branch
    id: String!

    # Version number for the Branch
    number: Float!
  ): Branch2

  # Return a Checklist.
  #
  # Equivalent to GET /checklist/{id}/_ver/{number}
  versionchecklist(
    # Id for the Checklist
    id: String!

    # Version number for the Checklist
    number: Float!
  ): Checklist2

  # Return a Checklist version.
  #
  # Equivalent to GET /checklistVersion/{id}/_ver/{number}
  versionchecklistVersion(
    # Id for the Checklist version
    id: String!

    # Version number for the Checklist version
    number: Float!
  ): ChecklistVersion2

  # Return a Collection.
  #
  # Equivalent to GET /collection/{id}/_ver/{number}
  versioncollection(
    # Id for the Collection
    id: String!

    # Version number for the Collection
    number: Float!
  ): Collection2

  # Return a completeList.
  #
  # Equivalent to GET /completeList/{id}/_ver/{number}
  versioncompleteList(
    # Id for the completeList
    id: String!

    # Version number for the completeList
    number: Float!
  ): CompleteList2

  # Return a Instances of this describe one taxon description context.
  #
  # Equivalent to GET /contentContextDescription/{id}/_ver/{number}
  versioncontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!

    # Version number for the Instances of this describe one taxon description context
    number: Float!
  ): ContentContextDescription2

  # Return a Data field.
  #
  # Equivalent to GET /dataField/{id}/_ver/{number}
  versiondataField(
    # Id for the Data field
    id: String!

    # Version number for the Data field
    number: Float!
  ): DataField2

  # Return a Tag.
  #
  # Equivalent to GET /dataset/{id}/_ver/{number}
  versiondataset(
    # Id for the Tag
    id: String!

    # Version number for the Tag
    number: Float!
  ): Dataset2

  # Return a dateRange.
  #
  # Equivalent to GET /dateRange/{id}/_ver/{number}
  versiondateRange(
    # Id for the dateRange
    id: String!

    # Version number for the dateRange
    number: Float!
  ): DateRange2

  # Return a device.
  #
  # Equivalent to GET /device/{id}/_ver/{number}
  versiondevice(
    # Id for the device
    id: String!

    # Version number for the device
    number: Float!
  ): Device2

  # Return a deviceIndividual.
  #
  # Equivalent to GET /deviceIndividual/{id}/_ver/{number}
  versiondeviceIndividual(
    # Id for the deviceIndividual
    id: String!

    # Version number for the deviceIndividual
    number: Float!
  ): DeviceIndividual2

  # Return a Submissions.
  #
  # Equivalent to GET /document/{id}/_ver/{number}
  versiondocument(
    # Id for the Submissions
    id: String!

    # Version number for the Submissions
    number: Float!
  ): Document2

  # Return a Download request.
  #
  # Equivalent to GET /downloadRequest/{id}/_ver/{number}
  versiondownloadRequest(
    # Id for the Download request
    id: String!

    # Version number for the Download request
    number: Float!
  ): DownloadRequest2

  # Return a Endagerment object.
  #
  # Equivalent to GET /endangerment/{id}/_ver/{number}
  versionendangerment(
    # Id for the Endagerment object
    id: String!

    # Version number for the Endagerment object
    number: Float!
  ): Endangerment2

  # Return a event.
  #
  # Equivalent to GET /event/{id}/_ver/{number}
  versionevent(
    # Id for the event
    id: String!

    # Version number for the event
    number: Float!
  ): Event3

  # Return a field.
  #
  # Equivalent to GET /field/{id}/_ver/{number}
  versionfield(
    # Id for the field
    id: String!

    # Version number for the field
    number: Float!
  ): Field2

  # Return a fieldset.
  #
  # Equivalent to GET /fieldset/{id}/_ver/{number}
  versionfieldset(
    # Id for the fieldset
    id: String!

    # Version number for the fieldset
    number: Float!
  ): Fieldset2

  # Return a form.
  #
  # Equivalent to GET /form/{id}/_ver/{number}
  versionform(
    # Id for the form
    id: String!

    # Version number for the form
    number: Float!
  ): Form2

  # Return a formFooter.
  #
  # Equivalent to GET /formFooter/{id}/_ver/{number}
  versionformFooter(
    # Id for the formFooter
    id: String!

    # Version number for the formFooter
    number: Float!
  ): FormFooter

  # Return a formInstructions.
  #
  # Equivalent to GET /formInstructions/{id}/_ver/{number}
  versionformInstructions(
    # Id for the formInstructions
    id: String!

    # Version number for the formInstructions
    number: Float!
  ): FormInstructions2

  # Return a formNamedPlaceOptions.
  #
  # Equivalent to GET /formNamedPlaceOptions/{id}/_ver/{number}
  versionformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!

    # Version number for the formNamedPlaceOptions
    number: Float!
  ): FormNamedPlaceOptions

  # Return a formOptions.
  #
  # Equivalent to GET /formOptions/{id}/_ver/{number}
  versionformOptions(
    # Id for the formOptions
    id: String!

    # Version number for the formOptions
    number: Float!
  ): FormOptions

  # Return a formPermission.
  #
  # Equivalent to GET /formPermission/{id}/_ver/{number}
  versionformPermission(
    # Id for the formPermission
    id: String!

    # Version number for the formPermission
    number: Float!
  ): FormPermission2

  # Return a formPermissionPerson.
  #
  # Equivalent to GET /formPermissionPerson/{id}/_ver/{number}
  versionformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!

    # Version number for the formPermissionPerson
    number: Float!
  ): FormPermissionPerson2

  # Return a formPermissionSingle.
  #
  # Equivalent to GET /formPermissionSingle/{id}/_ver/{number}
  versionformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!

    # Version number for the formPermissionSingle
    number: Float!
  ): FormPermissionSingle2

  # Return a formSeason.
  #
  # Equivalent to GET /formSeason/{id}/_ver/{number}
  versionformSeason(
    # Id for the formSeason
    id: String!

    # Version number for the formSeason
    number: Float!
  ): FormSeason

  # Return a Gathering event.
  #
  # Equivalent to GET /gathering/{id}/_ver/{number}
  versiongathering(
    # Id for the Gathering event
    id: String!

    # Version number for the Gathering event
    number: Float!
  ): Gathering

  # Return a Global gathering event.
  #
  # Equivalent to GET /gatheringEvent/{id}/_ver/{number}
  versiongatheringEvent(
    # Id for the Global gathering event
    id: String!

    # Version number for the Global gathering event
    number: Float!
  ): GatheringEvent

  # Return a Keruutapahtuman faktat.
  #
  # Equivalent to GET /gatheringFact/{id}/_ver/{number}
  versiongatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!

    # Version number for the Keruutapahtuman faktat
    number: Float!
  ): GatheringFact

  # Return a IUCN Red List Evaluation Habitat.
  #
  # Equivalent to GET /habitat/{id}/_ver/{number}
  versionhabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!

    # Version number for the IUCN Red List Evaluation Habitat
    number: Float!
  ): Habitat3

  # Return a Identification.
  #
  # Equivalent to GET /identification/{id}/_ver/{number}
  versionidentification(
    # Id for the Identification
    id: String!

    # Version number for the Identification
    number: Float!
  ): Identification

  # Return a Image.
  #
  # Equivalent to GET /image/{id}/_ver/{number}
  versionimage(
    # Id for the Image
    id: String!

    # Version number for the Image
    number: Float!
  ): Image2

  # Return a individual.
  #
  # Equivalent to GET /individual/{id}/_ver/{number}
  versionindividual(
    # Id for the individual
    id: String!

    # Version number for the individual
    number: Float!
  ): Individual2

  # Return a Informal Taxon Group.
  #
  # Equivalent to GET /informalTaxonGroup/{id}/_ver/{number}
  versioninformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!

    # Version number for the Informal Taxon Group
    number: Float!
  ): InformalTaxonGroup2

  # Return a Information System.
  #
  # Equivalent to GET /informationSystem/{id}/_ver/{number}
  versioninformationSystem(
    # Id for the Information System
    id: String!

    # Version number for the Information System
    number: Float!
  ): InformationSystem2

  # Return a IUCN Red List Evaluation.
  #
  # Equivalent to GET /iucnRedListEvaluation/{id}/_ver/{number}
  versioniucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!

    # Version number for the IUCN Red List Evaluation
    number: Float!
  ): IucnRedListEvaluation2

  # Return a IUCN Evaluation Year.
  #
  # Equivalent to GET /iucnRedListEvaluationYear/{id}/_ver/{number}
  versioniucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!

    # Version number for the IUCN Evaluation Year
    number: Float!
  ): IucnRedListEvaluationYear2

  # Return a IUCN Red List Evaluation Informal Taxon Group.
  #
  # Equivalent to GET /iucnRedListTaxonGroup/{id}/_ver/{number}
  versioniucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!

    # Version number for the IUCN Red List Evaluation Informal Taxon Group
    number: Float!
  ): IucnRedListTaxonGroup2

  # Return a measurement.
  #
  # Equivalent to GET /measurement/{id}/_ver/{number}
  versionmeasurement(
    # Id for the measurement
    id: String!

    # Version number for the measurement
    number: Float!
  ): Measurement

  # Return a 3D model.
  #
  # Equivalent to GET /model/{id}/_ver/{number}
  versionmodel(
    # Id for the 3D model
    id: String!

    # Version number for the 3D model
    number: Float!
  ): Model2

  # Return a multimedia.
  #
  # Equivalent to GET /multimedia/{id}/_ver/{number}
  versionmultimedia(
    # Id for the multimedia
    id: String!

    # Version number for the multimedia
    number: Float!
  ): Multimedia2

  # Return a namedPlace.
  #
  # Equivalent to GET /namedPlace/{id}/_ver/{number}
  versionnamedPlace(
    # Id for the namedPlace
    id: String!

    # Version number for the namedPlace
    number: Float!
  ): NamedPlace2

  # Return a News.
  #
  # Equivalent to GET /news/{id}/_ver/{number}
  versionnews(
    # Id for the News
    id: String!

    # Version number for the News
    number: Float!
  ): News2

  # Return a notification.
  #
  # Equivalent to GET /notification/{id}/_ver/{number}
  versionnotification(
    # Id for the notification
    id: String!

    # Version number for the notification
    number: Float!
  ): Notification2

  # Return a Occurrence.
  #
  # Equivalent to GET /occurrence/{id}/_ver/{number}
  versionoccurrence(
    # Id for the Occurrence
    id: String!

    # Version number for the Occurrence
    number: Float!
  ): Occurrence2

  # Return a Organization.
  #
  # Equivalent to GET /organization/{id}/_ver/{number}
  versionorganization(
    # Id for the Organization
    id: String!

    # Version number for the Organization
    number: Float!
  ): Organization2

  # Return a PDF.
  #
  # Equivalent to GET /pdf/{id}/_ver/{number}
  versionpdf(
    # Id for the PDF
    id: String!

    # Version number for the PDF
    number: Float!
  ): Pdf2

  # Return a permit.
  #
  # Equivalent to GET /permit/{id}/_ver/{number}
  versionpermit(
    # Id for the permit
    id: String!

    # Version number for the permit
    number: Float!
  ): Permit2

  # Return a Person.
  #
  # Equivalent to GET /person/{id}/_ver/{number}
  versionperson(
    # Id for the Person
    id: String!

    # Version number for the Person
    number: Float!
  ): Person2

  # Return a preparation.
  #
  # Equivalent to GET /preparation/{id}/_ver/{number}
  versionpreparation(
    # Id for the preparation
    id: String!

    # Version number for the preparation
    number: Float!
  ): Preparation2

  # Return a profile.
  #
  # Equivalent to GET /profile/{id}/_ver/{number}
  versionprofile(
    # Id for the profile
    id: String!

    # Version number for the profile
    number: Float!
  ): Profile2

  # Return a Publication.
  #
  # Equivalent to GET /publication/{id}/_ver/{number}
  versionpublication(
    # Id for the Publication
    id: String!

    # Version number for the Publication
    number: Float!
  ): Publication3

  # Return a Instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to GET /regionalStatus/{id}/_ver/{number}
  versionregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!

    # Version number for the Instances of this class tell endangerment of a certain area and notes about the area
    number: Float!
  ): RegionalStatus2

  # Return a reserve.
  #
  # Equivalent to GET /reserve/{id}/_ver/{number}
  versionreserve(
    # Id for the reserve
    id: String!

    # Version number for the reserve
    number: Float!
  ): Reserve

  # Return a Bibliographic Resource.
  #
  # Equivalent to GET /BibliographicResource/{id}/_ver
  versionsOfBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [BibliographicResourceVerListItem]

  # Return a Concept.
  #
  # Equivalent to GET /Concept/{id}/_ver
  versionsOfConcept(
    # Id for the Concept
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ConceptVerListItem]

  # Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).
  #
  # Equivalent to GET /Pinkka/{id}/_ver
  versionsOfPinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PinkkaVerListItem]

  # Return a Administrative status.
  #
  # Equivalent to GET /administrativeStatus/{id}/_ver
  versionsOfadministrativeStatus(
    # Id for the Administrative status
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AdministrativeStatusVerListItem]

  # Return a agent.
  #
  # Equivalent to GET /agent/{id}/_ver
  versionsOfagent(
    # Id for the agent
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AgentVerListItem]

  # Return a annotation.
  #
  # Equivalent to GET /annotation/{id}/_ver
  versionsOfannotation(
    # Id for the annotation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AnnotationVerListItem]

  # Return a annotationOccurrence.
  #
  # Equivalent to GET /annotationOccurrence/{id}/_ver
  versionsOfannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AnnotationOccurrenceVerListItem]

  # Return a Area.
  #
  # Equivalent to GET /area/{id}/_ver
  versionsOfarea(
    # Id for the Area
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AreaVerListItem]

  # Return a Audio recording.
  #
  # Equivalent to GET /audio/{id}/_ver
  versionsOfaudio(
    # Id for the Audio recording
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AudioVerListItem]

  # Return a Instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel/{id}/_ver
  versionsOfbirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [BirdSongRecognitionSkillLevelVerListItem]

  # Return a Branch.
  #
  # Equivalent to GET /branch/{id}/_ver
  versionsOfbranch(
    # Id for the Branch
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [BranchVerListItem]

  # Return a Checklist.
  #
  # Equivalent to GET /checklist/{id}/_ver
  versionsOfchecklist(
    # Id for the Checklist
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ChecklistVerListItem]

  # Return a Checklist version.
  #
  # Equivalent to GET /checklistVersion/{id}/_ver
  versionsOfchecklistVersion(
    # Id for the Checklist version
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ChecklistVersionVerListItem]

  # Return a Collection.
  #
  # Equivalent to GET /collection/{id}/_ver
  versionsOfcollection(
    # Id for the Collection
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [CollectionVerListItem]

  # Return a completeList.
  #
  # Equivalent to GET /completeList/{id}/_ver
  versionsOfcompleteList(
    # Id for the completeList
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [CompleteListVerListItem]

  # Return a Instances of this describe one taxon description context.
  #
  # Equivalent to GET /contentContextDescription/{id}/_ver
  versionsOfcontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ContentContextDescriptionVerListItem]

  # Return a Data field.
  #
  # Equivalent to GET /dataField/{id}/_ver
  versionsOfdataField(
    # Id for the Data field
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DataFieldVerListItem]

  # Return a Tag.
  #
  # Equivalent to GET /dataset/{id}/_ver
  versionsOfdataset(
    # Id for the Tag
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DatasetVerListItem]

  # Return a dateRange.
  #
  # Equivalent to GET /dateRange/{id}/_ver
  versionsOfdateRange(
    # Id for the dateRange
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DateRangeVerListItem]

  # Return a device.
  #
  # Equivalent to GET /device/{id}/_ver
  versionsOfdevice(
    # Id for the device
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DeviceVerListItem]

  # Return a deviceIndividual.
  #
  # Equivalent to GET /deviceIndividual/{id}/_ver
  versionsOfdeviceIndividual(
    # Id for the deviceIndividual
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DeviceIndividualVerListItem]

  # Return a Submissions.
  #
  # Equivalent to GET /document/{id}/_ver
  versionsOfdocument(
    # Id for the Submissions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DocumentVerListItem]

  # Return a Download request.
  #
  # Equivalent to GET /downloadRequest/{id}/_ver
  versionsOfdownloadRequest(
    # Id for the Download request
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DownloadRequestVerListItem]

  # Return a Endagerment object.
  #
  # Equivalent to GET /endangerment/{id}/_ver
  versionsOfendangerment(
    # Id for the Endagerment object
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [EndangermentVerListItem]

  # Return a event.
  #
  # Equivalent to GET /event/{id}/_ver
  versionsOfevent(
    # Id for the event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [EventVerListItem]

  # Return a field.
  #
  # Equivalent to GET /field/{id}/_ver
  versionsOffield(
    # Id for the field
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FieldVerListItem]

  # Return a fieldset.
  #
  # Equivalent to GET /fieldset/{id}/_ver
  versionsOffieldset(
    # Id for the fieldset
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FieldsetVerListItem]

  # Return a form.
  #
  # Equivalent to GET /form/{id}/_ver
  versionsOfform(
    # Id for the form
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormVerListItem]

  # Return a formFooter.
  #
  # Equivalent to GET /formFooter/{id}/_ver
  versionsOfformFooter(
    # Id for the formFooter
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormFooterVerListItem]

  # Return a formInstructions.
  #
  # Equivalent to GET /formInstructions/{id}/_ver
  versionsOfformInstructions(
    # Id for the formInstructions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormInstructionVerListItem]

  # Return a formNamedPlaceOptions.
  #
  # Equivalent to GET /formNamedPlaceOptions/{id}/_ver
  versionsOfformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormNamedPlaceOptionVerListItem]

  # Return a formOptions.
  #
  # Equivalent to GET /formOptions/{id}/_ver
  versionsOfformOptions(
    # Id for the formOptions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormOptionVerListItem]

  # Return a formPermission.
  #
  # Equivalent to GET /formPermission/{id}/_ver
  versionsOfformPermission(
    # Id for the formPermission
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormPermissionVerListItem]

  # Return a formPermissionPerson.
  #
  # Equivalent to GET /formPermissionPerson/{id}/_ver
  versionsOfformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormPermissionPersonVerListItem]

  # Return a formPermissionSingle.
  #
  # Equivalent to GET /formPermissionSingle/{id}/_ver
  versionsOfformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormPermissionSingleVerListItem]

  # Return a formSeason.
  #
  # Equivalent to GET /formSeason/{id}/_ver
  versionsOfformSeason(
    # Id for the formSeason
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormSeasonVerListItem]

  # Return a Gathering event.
  #
  # Equivalent to GET /gathering/{id}/_ver
  versionsOfgathering(
    # Id for the Gathering event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [GatheringVerListItem]

  # Return a Global gathering event.
  #
  # Equivalent to GET /gatheringEvent/{id}/_ver
  versionsOfgatheringEvent(
    # Id for the Global gathering event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [GatheringEventVerListItem]

  # Return a Keruutapahtuman faktat.
  #
  # Equivalent to GET /gatheringFact/{id}/_ver
  versionsOfgatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [GatheringFactVerListItem]

  # Return a IUCN Red List Evaluation Habitat.
  #
  # Equivalent to GET /habitat/{id}/_ver
  versionsOfhabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [HabitatVerListItem]

  # Return a Identification.
  #
  # Equivalent to GET /identification/{id}/_ver
  versionsOfidentification(
    # Id for the Identification
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IdentificationVerListItem]

  # Return a Image.
  #
  # Equivalent to GET /image/{id}/_ver
  versionsOfimage(
    # Id for the Image
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ImageVerListItem]

  # Return a individual.
  #
  # Equivalent to GET /individual/{id}/_ver
  versionsOfindividual(
    # Id for the individual
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IndividualVerListItem]

  # Return a Informal Taxon Group.
  #
  # Equivalent to GET /informalTaxonGroup/{id}/_ver
  versionsOfinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [InformalTaxonGroupVerListItem]

  # Return a Information System.
  #
  # Equivalent to GET /informationSystem/{id}/_ver
  versionsOfinformationSystem(
    # Id for the Information System
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [InformationSystemVerListItem]

  # Return a IUCN Red List Evaluation.
  #
  # Equivalent to GET /iucnRedListEvaluation/{id}/_ver
  versionsOfiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IucnRedListEvaluationVerListItem]

  # Return a IUCN Evaluation Year.
  #
  # Equivalent to GET /iucnRedListEvaluationYear/{id}/_ver
  versionsOfiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IucnRedListEvaluationYearVerListItem]

  # Return a IUCN Red List Evaluation Informal Taxon Group.
  #
  # Equivalent to GET /iucnRedListTaxonGroup/{id}/_ver
  versionsOfiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IucnRedListTaxonGroupVerListItem]

  # Return a measurement.
  #
  # Equivalent to GET /measurement/{id}/_ver
  versionsOfmeasurement(
    # Id for the measurement
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [MeasurementVerListItem]

  # Return a 3D model.
  #
  # Equivalent to GET /model/{id}/_ver
  versionsOfmodel(
    # Id for the 3D model
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ModelVerListItem]

  # Return a multimedia.
  #
  # Equivalent to GET /multimedia/{id}/_ver
  versionsOfmultimedia(
    # Id for the multimedia
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [MultimediaVerListItem]

  # Return a namedPlace.
  #
  # Equivalent to GET /namedPlace/{id}/_ver
  versionsOfnamedPlace(
    # Id for the namedPlace
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [NamedPlaceVerListItem]

  # Return a News.
  #
  # Equivalent to GET /news/{id}/_ver
  versionsOfnews(
    # Id for the News
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [NewsVerListItem]

  # Return a notification.
  #
  # Equivalent to GET /notification/{id}/_ver
  versionsOfnotification(
    # Id for the notification
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [NotificationVerListItem]

  # Return a Occurrence.
  #
  # Equivalent to GET /occurrence/{id}/_ver
  versionsOfoccurrence(
    # Id for the Occurrence
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [OccurrenceVerListItem]

  # Return a Organization.
  #
  # Equivalent to GET /organization/{id}/_ver
  versionsOforganization(
    # Id for the Organization
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [OrganizationVerListItem]

  # Return a PDF.
  #
  # Equivalent to GET /pdf/{id}/_ver
  versionsOfpdf(
    # Id for the PDF
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PdfVerListItem]

  # Return a permit.
  #
  # Equivalent to GET /permit/{id}/_ver
  versionsOfpermit(
    # Id for the permit
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PermitVerListItem]

  # Return a Person.
  #
  # Equivalent to GET /person/{id}/_ver
  versionsOfperson(
    # Id for the Person
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PersonVerListItem]

  # Return a preparation.
  #
  # Equivalent to GET /preparation/{id}/_ver
  versionsOfpreparation(
    # Id for the preparation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PreparationVerListItem]

  # Return a profile.
  #
  # Equivalent to GET /profile/{id}/_ver
  versionsOfprofile(
    # Id for the profile
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ProfileVerListItem]

  # Return a Publication.
  #
  # Equivalent to GET /publication/{id}/_ver
  versionsOfpublication(
    # Id for the Publication
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PublicationVerListItem]

  # Return a Instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to GET /regionalStatus/{id}/_ver
  versionsOfregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [RegionalStatusVerListItem]

  # Return a reserve.
  #
  # Equivalent to GET /reserve/{id}/_ver
  versionsOfreserve(
    # Id for the reserve
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ReserveVerListItem]

  # Return a Specimen sample.
  #
  # Equivalent to GET /sample/{id}/_ver
  versionsOfsample(
    # Id for the Specimen sample
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SampleVerListItem]

  # Return a Satellite Tracking Project.
  #
  # Equivalent to GET /satelliteTrackingProject/{id}/_ver
  versionsOfsatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SatelliteTrackingProjectVerListItem]

  # Return a Transaction class.
  #
  # Equivalent to GET /specimenTransaction/{id}/_ver
  versionsOfspecimenTransaction(
    # Id for the Transaction class
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SpecimenTransactionVerListItem]

  # Return a Transaction Event.
  #
  # Equivalent to GET /specimenTransactionEvent/{id}/_ver
  versionsOfspecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SpecimenTransactionEventVerListItem]

  # Return a subUnit.
  #
  # Equivalent to GET /subUnit/{id}/_ver
  versionsOfsubUnit(
    # Id for the subUnit
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SubUnitVerListItem]

  # Return a tag.
  #
  # Equivalent to GET /tag/{id}/_ver
  versionsOftag(
    # Id for the tag
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TagVerListItem]

  # Return a Taxon.
  #
  # Equivalent to GET /taxon/{id}/_ver
  versionsOftaxon(
    # Id for the Taxon
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonVerListItem]

  # Return a Completeness of census.
  #
  # Equivalent to GET /taxonCensus/{id}/_ver
  versionsOftaxonCensus(
    # Id for the Completeness of census
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonCensusVerListItem]

  # Return a Taxon concept.
  #
  # Equivalent to GET /taxonConcept/{id}/_ver
  versionsOftaxonConcept(
    # Id for the Taxon concept
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonConceptVerListItem]

  # Return a IUCN Editors.
  #
  # Equivalent to GET /taxonGroupIucnEditors/{id}/_ver
  versionsOftaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonGroupIucnEditorVerListItem]

  # Return a Taxon interaction.
  #
  # Equivalent to GET /taxonInteraction/{id}/_ver
  versionsOftaxonInteraction(
    # Id for the Taxon interaction
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonInteractionVerListItem]

  # Return a Instances of this class are a taxon sets.
  #
  # Equivalent to GET /taxonSet/{id}/_ver
  versionsOftaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonSetVerListItem]

  # Return a Trait.
  #
  # Equivalent to GET /trait/{id}/_ver
  versionsOftrait(
    # Id for the Trait
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TraitVerListItem]

  # Return a Trait enumeration.
  #
  # Equivalent to GET /traitEnumValue/{id}/_ver
  versionsOftraitEnumValue(
    # Id for the Trait enumeration
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TraitEnumValueVerListItem]

  # Return a Trait value.
  #
  # Equivalent to GET /traitGroup/{id}/_ver
  versionsOftraitGroup(
    # Id for the Trait value
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TraitGroupVerListItem]

  # Return a Transaction.
  #
  # Equivalent to GET /transaction/{id}/_ver
  versionsOftransaction(
    # Id for the Transaction
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TransactionVerListItem]

  # Return a Transaction Event.
  #
  # Equivalent to GET /transactionEvent/{id}/_ver
  versionsOftransactionEvent(
    # Id for the Transaction Event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TransactionEventVerListItem]

  # Return a Transaction Item.
  #
  # Equivalent to GET /transactionItem/{id}/_ver
  versionsOftransactionItem(
    # Id for the Transaction Item
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TransactionItemVerListItem]

  # Return a translation.
  #
  # Equivalent to GET /translation/{id}/_ver
  versionsOftranslation(
    # Id for the translation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TranslationVerListItem]

  # Return a Identification.
  #
  # Equivalent to GET /typeSpecimen/{id}/_ver
  versionsOftypeSpecimen(
    # Id for the Identification
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TypeSpecimanVerListItem]

  # Return a Specimen.
  #
  # Equivalent to GET /unit/{id}/_ver
  versionsOfunit(
    # Id for the Specimen
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitVerListItem]

  # Return a Näytteen / havainnon faktat.
  #
  # Equivalent to GET /unitFact/{id}/_ver
  versionsOfunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitFactVerListItem]

  # Return a Havainnon keruutiedot.
  #
  # Equivalent to GET /unitGathering/{id}/_ver
  versionsOfunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitGatheringVerListItem]

  # Return a Unit of measurement.
  #
  # Equivalent to GET /unitOfMeasurement/{id}/_ver
  versionsOfunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitOfMeasurementVerListItem]

  # Return a validator.
  #
  # Equivalent to GET /validator/{id}/_ver
  versionsOfvalidator(
    # Id for the validator
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ValidatorVerListItem]

  # Return a Video.
  #
  # Equivalent to GET /video/{id}/_ver
  versionsOfvideo(
    # Id for the Video
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [VideoVerListItem]

  # Return a Specimen sample.
  #
  # Equivalent to GET /sample/{id}/_ver/{number}
  versionsample(
    # Id for the Specimen sample
    id: String!

    # Version number for the Specimen sample
    number: Float!
  ): Sample2

  # Return a Satellite Tracking Project.
  #
  # Equivalent to GET /satelliteTrackingProject/{id}/_ver/{number}
  versionsatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!

    # Version number for the Satellite Tracking Project
    number: Float!
  ): SatelliteTrackingProject2

  # Return a Transaction class.
  #
  # Equivalent to GET /specimenTransaction/{id}/_ver/{number}
  versionspecimenTransaction(
    # Id for the Transaction class
    id: String!

    # Version number for the Transaction class
    number: Float!
  ): SpecimenTransaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /specimenTransactionEvent/{id}/_ver/{number}
  versionspecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!

    # Version number for the Transaction Event
    number: Float!
  ): SpecimenTransactionEvent

  # Return a subUnit.
  #
  # Equivalent to GET /subUnit/{id}/_ver/{number}
  versionsubUnit(
    # Id for the subUnit
    id: String!

    # Version number for the subUnit
    number: Float!
  ): SubUnit2

  # Return a tag.
  #
  # Equivalent to GET /tag/{id}/_ver/{number}
  versiontag(
    # Id for the tag
    id: String!

    # Version number for the tag
    number: Float!
  ): Tag2

  # Return a Taxon.
  #
  # Equivalent to GET /taxon/{id}/_ver/{number}
  versiontaxon(
    # Id for the Taxon
    id: String!

    # Version number for the Taxon
    number: Float!
  ): Taxon2

  # Return a Completeness of census.
  #
  # Equivalent to GET /taxonCensus/{id}/_ver/{number}
  versiontaxonCensus(
    # Id for the Completeness of census
    id: String!

    # Version number for the Completeness of census
    number: Float!
  ): TaxonCensus2

  # Return a Taxon concept.
  #
  # Equivalent to GET /taxonConcept/{id}/_ver/{number}
  versiontaxonConcept(
    # Id for the Taxon concept
    id: String!

    # Version number for the Taxon concept
    number: Float!
  ): TaxonConcept2

  # Return a IUCN Editors.
  #
  # Equivalent to GET /taxonGroupIucnEditors/{id}/_ver/{number}
  versiontaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!

    # Version number for the IUCN Editors
    number: Float!
  ): TaxonGroupIucnEditors2

  # Return a Taxon interaction.
  #
  # Equivalent to GET /taxonInteraction/{id}/_ver/{number}
  versiontaxonInteraction(
    # Id for the Taxon interaction
    id: String!

    # Version number for the Taxon interaction
    number: Float!
  ): TaxonInteraction2

  # Return a Instances of this class are a taxon sets.
  #
  # Equivalent to GET /taxonSet/{id}/_ver/{number}
  versiontaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!

    # Version number for the Instances of this class are a taxon sets
    number: Float!
  ): TaxonSet2

  # Return a Trait.
  #
  # Equivalent to GET /trait/{id}/_ver/{number}
  versiontrait(
    # Id for the Trait
    id: String!

    # Version number for the Trait
    number: Float!
  ): Trait2

  # Return a Trait enumeration.
  #
  # Equivalent to GET /traitEnumValue/{id}/_ver/{number}
  versiontraitEnumValue(
    # Id for the Trait enumeration
    id: String!

    # Version number for the Trait enumeration
    number: Float!
  ): TraitEnumValue2

  # Return a Trait value.
  #
  # Equivalent to GET /traitGroup/{id}/_ver/{number}
  versiontraitGroup(
    # Id for the Trait value
    id: String!

    # Version number for the Trait value
    number: Float!
  ): TraitGroup2

  # Return a Transaction.
  #
  # Equivalent to GET /transaction/{id}/_ver/{number}
  versiontransaction(
    # Id for the Transaction
    id: String!

    # Version number for the Transaction
    number: Float!
  ): Transaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /transactionEvent/{id}/_ver/{number}
  versiontransactionEvent(
    # Id for the Transaction Event
    id: String!

    # Version number for the Transaction Event
    number: Float!
  ): TransactionEvent2

  # Return a Transaction Item.
  #
  # Equivalent to GET /transactionItem/{id}/_ver/{number}
  versiontransactionItem(
    # Id for the Transaction Item
    id: String!

    # Version number for the Transaction Item
    number: Float!
  ): TransactionItem

  # Return a translation.
  #
  # Equivalent to GET /translation/{id}/_ver/{number}
  versiontranslation(
    # Id for the translation
    id: String!

    # Version number for the translation
    number: Float!
  ): Translation2

  # Return a Identification.
  #
  # Equivalent to GET /typeSpecimen/{id}/_ver/{number}
  versiontypeSpecimen(
    # Id for the Identification
    id: String!

    # Version number for the Identification
    number: Float!
  ): TypeSpecimen

  # Return a Specimen.
  #
  # Equivalent to GET /unit/{id}/_ver/{number}
  versionunit(
    # Id for the Specimen
    id: String!

    # Version number for the Specimen
    number: Float!
  ): Unit

  # Return a Näytteen / havainnon faktat.
  #
  # Equivalent to GET /unitFact/{id}/_ver/{number}
  versionunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!

    # Version number for the Näytteen / havainnon faktat
    number: Float!
  ): UnitFact

  # Return a Havainnon keruutiedot.
  #
  # Equivalent to GET /unitGathering/{id}/_ver/{number}
  versionunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!

    # Version number for the Havainnon keruutiedot
    number: Float!
  ): UnitGathering

  # Return a Unit of measurement.
  #
  # Equivalent to GET /unitOfMeasurement/{id}/_ver/{number}
  versionunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!

    # Version number for the Unit of measurement
    number: Float!
  ): UnitOfMeasurement2

  # Return a validator.
  #
  # Equivalent to GET /validator/{id}/_ver/{number}
  versionvalidator(
    # Id for the validator
    id: String!

    # Version number for the validator
    number: Float!
  ): Validator2

  # Return a Video.
  #
  # Equivalent to GET /video/{id}/_ver/{number}
  versionvideo(
    # Id for the Video
    id: String!

    # Version number for the Video
    number: Float!
  ): Video2
}

type BibliographicResource2 {
  context: String
  id: String
  isPublic: Boolean!
  owner: String!
  type: String
}

type Concept2 {
  context: String
  id: String
  skosBroader: String!
  skosDefinition: String!
  skosExample: String!
  skosInScheme: String!
  skosNarrower: String!
  skosNote: String!
  type: String
}

type Pinkka2 {
  context: String
  id: String
  type: String
}

type AdministrativeStatus2 {
  administrativeStatusDescription: AdministrativeStatusDescription
  administrativeStatusLink: AdministrativeStatusLink
  context: String
  id: String
  type: String
}

type AdministrativeStatusDescription {
  en: [String]
  fi: [String]
  sv: [String]
}

type AdministrativeStatusLink {
  en: [String]
  fi: [String]
  sv: [String]
}

type Agent2 {
  context: String
  id: String
  type: String
}

type Annotation2 {
  addedTags: [String]
  annotationByPerson: String
  annotationBySystem: String
  annotationClass: AnnotationClass
  byRole: ByRole
  censusAnnotation: [CensusAnnotationListItem]
  context: String
  created: String
  createdBySystem: String
  createdTimestamp: Int
  deleted: Boolean
  deletedByPerson: String
  deletedDateTime: String
  deletedTimestamp: Int
  id: String
  identification: Identification
  invasiveControlEffectiveness: InvasiveControlEffectiveness
  lineTransectAnnotation: [LineTransectAnnotationListItem]
  notes: String
  occurrenceAtTimeOfAnnotation: AnnotationOccurrence
  opinion: String
  removedTags: [String]
  rootID: String
  targetID: String
  type: Type
}

enum AnnotationClass {
  _
  MAN_ANNOTATIONCLASSRELIABLE
  MAN_ANNOTATIONCLASSLIKELY
  MAN_ANNOTATIONCLASSNEUTRAL
  MAN_ANNOTATIONCLASSSUSPICIOUS
  MAN_ANNOTATIONCLASSUNRELIABLE
  MAN_ANNOTATIONCLASSACKNOWLEDGED
  MAN_ANNOTATIONCLASSSPAM
}

enum ByRole {
  _
  MMAN_EXPERT
  MMAN_BASIC
  MMAN_OWNER
  MMAN_FORMADMIN
  MMAN_ICTADMIN
}

enum CensusAnnotationListItem {
  _
  MAN_COUNTERROR
  MAN_INNERCOUNTERROR
  MAN_OTHERERROR
}

type Identification {
  # Write associated observation taxa names here, separated by a semicolon (;). E.g.: "Betula pendula; Betula pubescens; Poaceae". These will form their own units of the type observation.
  associatedObservationTaxa: String

  # Author for the taxon
  author: String
  context: String

  # Name of the identifier (person) preferably in format "lastname, firstname"
  det: String

  # Date or year when the identification was done, preferably in format "d.m.Y" or "Y"
  detDate: String
  detMethod: DetMethod

  # Name of the identifier and date of identification in original format (e.g. from the label), errors and all
  detVerbatim: String

  # Additional qualifier or specifier at genus level (e.g. aff., cf.)
  genusQualifier: String
  herboSortOrder: Int
  id: String
  identificationBasis: [IdentificationBasisListItem]

  # Additional information on the identification, basis or such
  identificationNotes: String

  # Author for the taxon below species level/infra epithet
  infraAuthor: String

  # Taxon name for the epithet below species level
  infraEpithet: String

  # Taxonomic level of the epithet below species level
  infraRank: InfraRank

  # Pathovars, serovars and other infrasubspecific subdivisions of microbes.
  infrasubspecificSubdivision: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  isTaxonGroup: Boolean

  # This can be used to select one of the identifications as 'recommended', which is the used as default when displaying information about the specimen.
  preferredIdentification: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Publication reference for the taxon concept, that was used in identification
  sec: String
  sortOrder: Int

  # Additional qualifier at species level (e.g. aff., cf., sp. n., coll.)
  speciesQualifier: String

  # Taxon name
  taxon: String

  # ID for the taxon if has some other than an MX code
  taxonID: String

  # Taxonomic level for the identification
  taxonRank: TaxonRank
  taxonSpecifier: String
  taxonURI: String

  # Taxon name in original format (e.g. from the label), errors and all
  taxonVerbatim: String
  type: String
}

enum DetMethod {
  _
  MY_DETMETHODFRESHSAMPLE
  MY_DETMETHODMICROSCOPY
  MY_DETMETHODPHOTO
}

enum IdentificationBasisListItem {
  _
  MY_IDENTIFICATIONBASISDNA
  MY_IDENTIFICATIONBASISGENITALS
  MY_IDENTIFICATIONBASISGENITALPREPARATE
  MY_IDENTIFICATIONBASISSPORES
  MY_IDENTIFICATIONBASISHANDLED
  MY_IDENTIFICATIONBASISCHEMICAL
  MY_IDENTIFICATIONBASISHEARD
  MY_IDENTIFICATIONBASISMICROSCOPE
  MY_IDENTIFICATIONBASISSEEN
  MY_IDENTIFICATIONBASISPRESERVEDSPECIMEN
  MY_IDENTIFICATIONBASISFRESHSPECIMEN
  MY_IDENTIFICATIONBASISMEDIA
}

enum InfraRank {
  _
  MY_INFRARANKSSP
  MY_INFRARANKVAR
  MY_INFRARANKBETA
  MY_INFRARANKB
  MY_INFRARANKFORMA
  MY_INFRARANKHYBRID
  MY_INFRARANKANAMORPH
  MY_INFRARANKAGGREGATE
  MY_INFRARANKABERRATION
  MY_INFRARANKCULTIVAR
  MY_INFRARANKMORPHA
  MY_INFRARANKUNKNOWN
  MY_INFRARANKNOTHOSUBSPECIES
  MY_INFRARANKCULTIVARGROUP
  MY_INFRARANKFSP
}

enum PublicityRestrictions {
  _
  MZ_PUBLICITYRESTRICTIONSPUBLIC
  MZ_PUBLICITYRESTRICTIONSPROTECTED
  MZ_PUBLICITYRESTRICTIONSPRIVATE
}

enum TaxonRank {
  _
  MX_SUPERDOMAIN
  MX_DOMAIN
  MX_KINGDOM
  MX_SUBKINGDOM
  MX_INFRAKINGDOM
  MX_SUPERPHYLUM
  MX_PHYLUM
  MX_SUBPHYLUM
  MX_INFRAPHYLUM
  MX_SUPERDIVISION
  MX_DIVISION
  MX_SUBDIVISION
  MX_INFRADIVISION
  MX_SUPERCLASS
  MX_CLASS
  MX_SUBCLASS
  MX_INFRACLASS
  MX_PARVCLASS
  MX_SUPERORDER
  MX_ORDER
  MX_SUBORDER
  MX_INFRAORDER
  MX_PARVORDER
  MX_SUPERFAMILY
  MX_FAMILY
  MX_SUBFAMILY
  MX_TRIBE
  MX_SUBTRIBE
  MX_SUPERGENUS
  MX_GENUS
  MX_NOTHOGENUS
  MX_SUBGENUS
  MX_SECTION
  MX_SUBSECTION
  MX_SERIES
  MX_SUBSERIES
  MX_INFRAGENERICTAXON
  MX_AGGREGATE
  MX_SPECIESAGGREGATE
  MX_SPECIES
  MX_NOTHOSPECIES
  MX_INFRASPECIFICTAXON
  MX_SUBSPECIFICAGGREGATE
  MX_SUBSPECIES
  MX_NOTHOSUBSPECIES
  MX_VARIETY
  MX_SUBVARIETY
  MX_FORM
  MX_SUBFORM
  MX_HYBRID
  MX_ANAMORPH
  MX_ECOTYPE
  MX_POPULATIONGROUP
  MX_INTERGENERICHYBRID
  MX_INFRAGENERICHYBRID
  MX_CULTIVAR
  MX_GROUP
  MX_GREX
}

enum InvasiveControlEffectiveness {
  _
  MY_INVASIVECONTROLEFFECTIVENESSFULL
  MY_INVASIVECONTROLEFFECTIVENESSPARTIAL
  MY_INVASIVECONTROLEFFECTIVENESSNONE
  MY_INVASIVECONTROLEFFECTIVENESSNOTFOUND
}

enum LineTransectAnnotationListItem {
  _
  MAN_BIRDCOUNTERROR
  MAN_INNERCOUNTERROR
  MAN_OTHERERROR
}

type AnnotationOccurrence {
  context: String
  countryVerbatim: String
  dateBegin: String
  dateEnd: String
  id: String
  locality: String
  municipalityVerbatim: String
  taxonId: String
  taxonVerbatim: String
  type: String
  wgs84centerPointLat: Float
  wgs84centerPointLon: Float
}

enum Type {
  _
  MAN_TYPEOPINION
  MAN_TYPEINVASIVECONTROLEFFECTIVENESS
  MAN_TYPEUNIDENTIFIABLE
  MAN_TYPEADMIN
}

type Area2 {
  # Aluetyyppi
  areaType: AreaType!
  context: String

  # Country code ISO alpha 2
  countryCodeISOalpha2: String

  # country code ISO alpha 3
  countryCodeISOalpha3: String
  id: String
  isPartOf: String
  isPartOfBirdAssociationArea: String
  isPartOfEnvironmentalELY: String
  isPartOfProvince: String
  name: MultiLang!
  previouslyOfficialName: [String]
  provinceCodeAlpha: MultiLang
  provinceCodeNumeric: String
  ringingDepartmentBirdAssociationAreaCode: String
  ringingDepartmentMunicipalityCode: String
  type: String
}

enum AreaType {
  ML_COUNTRY
  ML_BIOGEOGRAPHICALPROVINCE
  ML_MUNICIPALITY
  ML_OLDMUNICIPALITY
  ML_ELYCENTRE
  ML_PROVINCE
  ML_CONTINENT
  ML_IUCNEVALUATIONAREA
  ML_BIRDASSOCIATIONAREA
}

type MultiLang {
  en: String
  fi: String
  sv: String
}

type Audio2 {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  fullURL: String!
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  mp3URL: String!
  originalFilename: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  taxonDescriptionCaption: MultiLang
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
  wavURL: String
}

enum IntellectualRights {
  MZ_INTELLECTUALRIGHTSCC_BY_SA_4_0
  MZ_INTELLECTUALRIGHTSCC_BY_NC_4_0
  MZ_INTELLECTUALRIGHTSCC_BY_NC_SA_4_0
  MZ_INTELLECTUALRIGHTSCC_BY_4_0
  MZ_INTELLECTUALRIGHTSCC0_4_0
  MZ_INTELLECTUALRIGHTSODBL_1_0
  MZ_INTELLECTUALRIGHTSPD
  MZ_INTELLECTUALRIGHTSARR
  MZ_INTELLECTUALRIGHTSCC_BY_2_0
  MZ_INTELLECTUALRIGHTSCC_BY_SA_2_0
  MZ_INTELLECTUALRIGHTSCC_BY_SA_2_0_DE
  MZ_INTELLECTUALRIGHTSCC_BY_NC_2_0
  MZ_INTELLECTUALRIGHTSCC_BY_NC_SA_2_0
  MZ_INTELLECTUALRIGHTSCC_BY_NC_ND_2_0
  MZ_INTELLECTUALRIGHTSCC_BY_SA_2_5
  MZ_INTELLECTUALRIGHTSCC_BY_SA_2_5_SE
  MZ_INTELLECTUALRIGHTSCC_BY_3_0
  MZ_INTELLECTUALRIGHTSCC_BY_SA_3_0
  MZ_INTELLECTUALRIGHTSCC_BY_NC_SA_3_0
  MZ_INTELLECTUALRIGHTSCC_BY_ND_4_0
  MZ_INTELLECTUALRIGHTSCC_BY_NC_ND_4_0
  MY_INTELLECTUALRIGHTSCC_BY
  MY_INTELLECTUALRIGHTSCC0
}

enum LifeStage {
  _
  MY_LIFESTAGEEGG
  MY_LIFESTAGELARVA
  MY_LIFESTAGEPUPA
  MY_LIFESTAGEJUVENILE
  MY_LIFESTAGENYMPH
  MY_LIFESTAGESUBIMAGO
  MY_LIFESTAGEIMMATURE
  MY_LIFESTAGEADULT
  MY_LIFESTAGEFERTILE
  MY_LIFESTAGESTERILE
  MY_LIFESTAGETADPOLE
  MY_LIFESTAGEEMBRYO
  MY_LIFESTAGESUBADULT
  MY_LIFESTAGEMATURE
  MY_LIFESTAGEPULLUS
  MY_LIFESTAGEHATCHEDEGG
  MY_LIFESTAGEHATCHEDPUPA
  MY_LIFESTAGEGALL
  MY_LIFESTAGEMARKS
  MY_LIFESTAGETRIUNGULIN
}

enum PlantLifeStage {
  _
  MY_PLANTLIFESTAGESTERILE
  MY_PLANTLIFESTAGEFERTILE
  MY_PLANTLIFESTAGESEED
  MY_PLANTLIFESTAGESPROUT
  MY_PLANTLIFESTAGEBUD
  MY_PLANTLIFESTAGEFLOWER
  MY_PLANTLIFESTAGEWITHEREDFLOWER
  MY_PLANTLIFESTAGERIPENINGFRUIT
  MY_PLANTLIFESTAGERIPEFRUIT
  MY_PLANTLIFESTAGEDEADSPROUT
  MY_PLANTLIFESTAGESUBTERRANEAN
}

enum Sex {
  _
  MY_SEXM
  MY_SEXF
  MY_SEXW
  MY_SEXU
  MY_SEXN
  MY_SEXX
  MY_SEXE
  MY_SEXC
}

enum TypeOfTaxonMedia {
  _
  MM_TYPEENUMLIVE
  MM_TYPEENUMSPECIMEN
  MM_TYPEENUMGENITALIA
  MM_TYPEENUMMICROSCOPY
  MM_TYPEENUMCARCASS
  MM_TYPEENUMSKELETAL
  MM_TYPEENUMHABITAT
  MM_TYPEENUMLABEL
}

type BirdSongRecognitionSkillLevel2 {
  birdSongRecognitionArea: String!
  birdSongRecognitionSkillLevel: SkillLevel!
  context: String
  id: String
  type: String
}

enum SkillLevel {
  MA_BIRDSONGRECOGNITIONSKILLLEVELENUM1
  MA_BIRDSONGRECOGNITIONSKILLLEVELENUM2
  MA_BIRDSONGRECOGNITIONSKILLLEVELENUM3
  MA_BIRDSONGRECOGNITIONSKILLLEVELENUM4
}

type Branch2 {
  accessionID: String!

  # Garden area
  collectionID: String!
  context: String

  # Is the branch alive or not?
  exists: Boolean
  gardenLocationNotes: String
  id: String

  # Sublocation within the garden area, free-text
  location: String
  notes: String
  type: String
  wgs84Latitude: String
  wgs84Longitude: String
}

type Checklist2 {
  context: String
  dcBibliographicCitation: MultiLang
  id: String
  isPublic: Boolean!
  owner: String!
  rdfsComment: String
  rootTaxon: String!
  type: String
}

type ChecklistVersion2 {
  context: String
  id: String
  type: String
  versionChecklist: String
  versionDate: String
  versionDescription: MultiLang
  versionName: MultiLang
}

type Collection2 {
  # Unofficial abbreviation (or acronym) for this collection
  abbreviation: String
  additionalIdentifier: [String]

  # Admin field. Is it allowed to use collection with data warehouse /statistic endpoints.
  allowedForDwStatistics: Boolean
  boundingBoxLatMax: String
  boundingBoxLatMin: String
  boundingBoxLonMax: String
  boundingBoxLonMin: String

  # Example how to cite this collection in a scientific article, if using organization, name and abbreviation is not enough.
  citation: String

  # Collection code for natural history specimen collection, such as H-BR
  collectionCode: String
  collectionLocation: MultiLang
  collectionName: MultiLang!

  # Quality classification for the collection.
  collectionQuality: CollectionQuality!

  # How many specimens, records or such does the collection contain? Fill in approximate number, describe more in notes if necessary.
  collectionSize: String

  # Type of the collection (specimen, monitoring etc).
  collectionType: CollectionType!
  concealmentBasis: MultiLang

  # Personal or general (e.g. group of people in the organisation) email address to reach the person(s) responsible.
  contactEmail: String!
  context: String
  coverageBasis: MultiLang
  creator: String
  dataLocation: MultiLang

  # Diary-like notes about the data, with date/time. For example "2020-08-19: Changed country names Fönland to Finland", or "Specimens collected during 2019 are missing coordinates due to malfunctioning GPS"
  dataNotes: String

  # Quality estimation for the data in this collection
  dataQuality: DataQuality
  dataQualityDescription: MultiLang

  # Embargo period in years after which data is opened
  dataQuarantinePeriod: Int
  dataUseTerms: MultiLang
  dateCreated: String
  dateEdited: String
  description: MultiLang!

  # How many percent of the collection is in digital form, e.g. in a database or Excel file? Fill in approximate number, describe more in notes if necessary.
  digitizedSize: String
  doi: String

  # Admin field. The identifier of the person responsible for handling requests for restricted data for this set (typically same person who's responsible for the collection)
  downloadRequestHandler: [String]

  # Reason for this edit or notes about it.
  editNotes: String
  editor: String

  # Admin field. DOI received from GBIF after the collection has been published.
  gbifDoi: String
  geographicCoverage: MultiLang
  id: String

  # Institution code for natural history specimen collection holding institution, such as H, MHZ or TUR
  institutionCode: String
  intellectualDescription: MultiLang

  # Name of the institution or organisation publishing the data.
  intellectualOwner: String

  # License which is used when publishing data that belongs to this collection.
  intellectualRights: LicenseForUse!

  # Is the data to be used only within Kotka?
  internalUseOnly: Boolean

  # Which parent or larger collection this is part of.
  isPartOf: String

  # Language the data is (mainly) written in, if applicable.
  language: String
  longName: MultiLang
  metadataCreator: String

  # Indication of how comprehensive the information on this form is.
  metadataStatus: MetadataStatus
  methods: MultiLang

  # Additional information to the data in each section.
  notes: String
  onlineUrl: MultiLang

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Person(s) responsible for the collection (Lastname, Firstname; Lastname, Firstname).
  personResponsible: String!

  # Used for botanic garden collections. Is the collection/garden area accessible to public or not.
  publicAccess: Boolean
  publicationDescription: MultiLang

  # How can Luomus publish the data, if it is owned by third party?
  publicationTerms: PublicationTerms

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions
  publisherShortname: MultiLang

  # Secure level (salaus-/karkeistustaso) for the data
  secureLevel: SecureLevel
  shareToFEO: String

  # Admin field. Can the data be shared to GBIF or not: Given collection ID means data is shared under that collection.
  shareToGbif: String
  taxonomicCoverage: MultiLang
  temporalCoverage: MultiLang
  type: String

  # How many TYPE specimens does the collection contain?  Fill in approximate number, describe more in notes if necessary.
  typesSize: String
}

enum CollectionQuality {
  MY_COLLECTIONQUALITYENUM3
  MY_COLLECTIONQUALITYENUM2
  MY_COLLECTIONQUALITYENUM1
}

enum CollectionType {
  MY_COLLECTIONTYPESPECIMENS
  MY_COLLECTIONTYPELIVING
  MY_COLLECTIONTYPEMONITORING
  MY_COLLECTIONTYPEOBSERVATIONS
  MY_COLLECTIONTYPEPUBLICATIONDATA
  MY_COLLECTIONTYPEPUBLICATION
  MY_COLLECTIONTYPEMIXED
  MY_COLLECTIONTYPEOTHER
  MY_COLLECTIONTYPEGARDENAREA
  MY_COLLECTIONTYPEINDOORGARDENAREA
  MY_COLLECTIONTYPEOUTDOORGARDENAREA
  MY_COLLECTIONTYPEGARDENSUBLOCATION
  MY_COLLECTIONTYPETRAIT
}

enum DataQuality {
  _
  MY_DATAQUALITY1
  MY_DATAQUALITY2
  MY_DATAQUALITY3
  MY_DATAQUALITY4
  MY_DATAQUALITY5
  MY_DATAQUALITYNA
}

enum LicenseForUse {
  MY_INTELLECTUALRIGHTSCC_BY
  MY_INTELLECTUALRIGHTSCC0
  MY_INTELLECTUALRIGHTSPD
  MY_INTELLECTUALRIGHTSARR
}

enum MetadataStatus {
  _
  MY_METADATASTATUSPRELIMINARY
  MY_METADATASTATUSSATISFACTORY
  MY_METADATASTATUSCOMPREHENSIVE
  MY_METADATASTATUSHIDDEN
}

enum PublicationTerms {
  _
  MY_PUBLICATIONTERMSFREE
  MY_PUBLICATIONTERMSOFFICIAL
  MY_PUBLICATIONTERMSINTERNAL
  MY_PUBLICATIONTERMSNONE
}

enum SecureLevel {
  _
  MX_SECURELEVELNONE
  MX_SECURELEVELKM1
  MX_SECURELEVELKM5
  MX_SECURELEVELKM10
  MX_SECURELEVELKM25
  MX_SECURELEVELKM50
  MX_SECURELEVELKM100
  MX_SECURELEVELHIGHEST
  MX_SECURELEVELNOSHOW
}

type CompleteList2 {
  completeListTaxonID: String
  completeListType: CompleteListType
  context: String
  id: String
  type: String
}

enum CompleteListType {
  _
  MY_COMPLETELISTTYPECOMPLETEWITHBREEDINGSTATUS
  MY_COMPLETELISTTYPECOMPLETE
  MY_COMPLETELISTTYPEINCOMPLETE
}

type ContentContextDescription2 {
  context: String
  id: String
  type: String
}

type DataField2 {
  apiName: String
  context: String

  # Information for data users about the contents/source/etc of the field
  description: String
  example: String
  id: String
  includeFull: Boolean
  includeSecurePortalUI: Boolean
  includeUI: Boolean
  name: String!
  rPackageName: String

  # Short name for shapefiles
  shortName: String!
  sortOrder: Int

  # Internal notes for us developers
  techicalNotes: String

  # Short dwc or other term for the field (for example "collectionID"); usually the same as subjectname (without the "DDF.")
  technicalName: String!
  type: String
}

type Dataset2 {
  # What monetary or non-monetary benefits arised from the project and how they were shared. (Related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  benefitsDerivedAndShared: String
  context: String
  creator: String
  datasetName: MultiLang!

  # Type of the tag. Usually basic, project type is generally used only to give information on project Nagoya compliance.
  datasetType: DatasetType!
  dateCreated: String
  dateEdited: String
  description: MultiLang!
  editor: String
  id: String

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Person(s) responsible for the tag.
  personsResponsible: String!

  # Institutions or persons collaborating in the project.
  researchCollaborator: String

  # Duration of the project funding (dates from and to). (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  researchFundingDuration: String

  # Which person or institution received the project funding (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  researchFundingRecipient: String

  # Who funded the project (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  researchFundingSource: String
  type: String
}

enum DatasetType {
  GX_DATASETTYPEBASIC
  GX_DATASETTYPEPROJECT
}

type DateRange2 {
  context: String
  end: String
  id: String
  start: String
  type: String
}

type Device2 {
  context: String
  creator: String
  dateCreated: String
  dateEdited: String
  deviceManufacturer: String
  deviceManufacturerID: String!
  deviceType: String
  editor: String
  id: String
  ownerPerson: [String]
  type: String
}

type DeviceIndividual2 {
  # Date time when attached to the individual
  attached: String!
  context: String

  # Id for the device
  deviceID: String!
  id: String

  # Id for the individual
  individualID: String!

  # Date time when removed from to the individua
  removed: String
  type: String
}

type Document2 {
  acknowledgedWarnings: [JSON]

  # From who/where the specimen was acquired (if not recorded as a transaction)
  acquiredFrom: String

  # Organization where the accession was acquired from. If the organization is not on the list, add it first.
  acquiredFromOrganization: String

  # Date (d.m.yyyy) or year (yyyy) on which the specimen was acquired to the collection. Empty means an old specimen acquired on an unknown date.
  acquisitionDate: String

  # Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)
  additionalIDs: [String]

  # BOLD identifier, usually BOLD Sample ID. You can include additonal comment by separating them with colon, e.g. "AY123456:comments here"
  bold: [String]
  caption: String

  # Clad book id number or such
  cladBookID: String

  # Clad specimen id: usually color description and a number
  cladSpecimenID: String

  # Verbatim specimen data from clad book
  cladVerbatim: String

  # The collection which this specimen belongs to
  collectionID: String

  # Notes on the defects of the specimen (missing parts or such). Empty value means same as "good" or "hyvä" - that there is nothing special to mention about the condition.
  condition: String
  context: String
  creator: String

  # Annuality/perenniality or other specialities about cultivation in our conditions.
  cultivationInformation: String

  # Leave empty if no sample taken, or if the sample is recorded separately
  dNASampleLocation: String
  dataOrigin: [DataOriginListItem]

  # Where the data about this specimen or observation is from, in addition to labels. Eg. reference to a publication, field notes or an expedition.
  dataSource: String

  # The tags this specimen has
  datasetID: [String]
  datatype: String
  dateCreated: String
  dateEdited: String
  deviceID: String

  # Location of the specimen so that museum personnel can find it. E.g. taxon under which it is stored (if not clear from the identification), or shelf number
  documentLocation: String

  # Description where duplicates (specimens of the same individual) are located or have been sent to and by which ID's.
  duplicatesIn: String

  # Reason for this edit or notes about it.
  editNotes: String
  editor: String
  editors: [String]

  # Date the data was first transcribed into electronic format or paper registry
  entered: String

  # Free-text diary-style information about what has been done to the specimen and when.
  event: [String]

  # Name of the exsiccatum this specimen belongs to and possible exsiccatum number.
  exsiccatum: String

  # Id of the form that was used for the document
  formID: String
  gatheringEvent: GatheringEvent
  gatherings: [Gathering]!

  # Genbank identifier. You can include additonal comment by separating them with colon, e.g. "AY123456:comments here"
  genbank: [String]
  hasGathering: [String]

  # IPEN Number for the accession
  iPEN: String
  id: String
  images: [String]
  isTemplate: Boolean
  keywords: [String]

  # All text from labels word-for-word, including spelling errors. Separate each label on its own row, starting from topmost label.
  labelsVerbatim: String

  # Language the data is (mainly) written in, if applicable.
  language: String

  # Collecting number (field identifier, keruunumero) for the specimen
  legID: String
  locked: Boolean
  namedPlaceID: String

  # Additional information to the data in each section.
  notes: String

  # Original catalogue number or other  original identifier of the specimen. E.g. H9000000
  originalSpecimenID: String

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Garden area where this accession is planned to be located.
  plannedLocation: String

  # Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.
  preservation: [PreservationListItem]

  # Location of the primary data if not Kotka.
  primaryDataLocation: String

  # Notes shown within the system for users signed in but not shown publicly anywhere. Use only for notes that absolutely need to be hidden from public view.
  privateNotes: String

  # Publication references or doi's that refer to this specimen
  publication: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Relationship to another taxon OR specimen. Choose relationship type as prefix and give taxon name or specimen identifier thereafter, e.g. "parasite: Parasiticus specius" OR "host:http://tun.fi/JAA.123"
  relationship: [String]

  # The history of the specimen, for example how it was acquired or in which museums it has been before.
  sampleHistory: String
  scheduledForDeletion: Boolean

  # Secure level (salaus-/karkeistustaso) for the data
  secureLevel: SecureLevel

  # ID of the specimen from which this has been separated
  separatedFrom: String

  # ID's of those new specimens that have been separated from this specimen
  separatedTo: [String]
  serialNumber: String
  sourceID: String

  # Empty value means same as "ok" - that there is not anything special about the status of the specimen.
  status: Status3
  temp: Boolean
  templateDescription: String
  templateName: String

  # Additional information regarding the data entry or transcription process, e.g. unclarities, explanations for interpretations,
  transcriberNotes: String

  # Common name of agreement concerning the transfer, if any.
  transferAgreement: String
  type: String

  # URL where more information is available about the specimen
  uRL: String

  # List of those fields that contain unreliable data. The list is created automatically.
  unreliableFields: String

  # Information about the quality of the specimen data. Possible to select several.
  verificationStatus: [VerificationStatusListItem]

  # Identifier of the herbarium voucher specimen or information about it if the identifier is unknown.
  voucherSpecimenID: String
}

enum DataOriginListItem {
  _
  MY_DATAORIGINPAPERFORM
  MY_DATAORIGINWEBFORM
  MY_DATAORIGINSPREADSHEETFILE
}

type GatheringEvent {
  acknowledgeNoUnitsInCensus: Boolean
  artificialLight: ArtificialLight
  breaksDuringCensusInMinutes: Int
  censusHinderedByEnviromentalFactors: Boolean
  censusHinderedByFog: Boolean
  censusHinderedByRain: Boolean
  censusHinderedByWind: Boolean
  censusPrematurelyAborted: Boolean
  cloudCover: CloudCover
  cloudCoverEnd: CloudCoverEnd
  cloudCoverStart: CloudCoverStart
  completeList: CompleteList2
  context: String
  dateBegin: String
  dateEnd: String
  gatheringFact: GatheringFact
  geometry: JSON
  gpsUsed: Boolean
  id: String

  # Name of the collector(s), in format 'Lastname, Firstname; Lastname Firstname'
  leg: [String]
  legPublic: Boolean

  # Alkuperäislähteen käyttäjätunnus
  legUserID: [String]
  namedPlaceNotes: String
  nextMonitoringYear: Int

  # Additional information to the data in each section.
  notes: String
  rainIntensity: RainIntensity
  routeDirectionAdhered: Boolean
  spottingScopeUsed: Boolean
  startDistanceFromNECorner: String
  startPointDeviation: Int
  taxonCensus: [TaxonCensus2]
  temperature: Int
  temperatureEnd: Float
  temperatureStart: Float
  timeEnd: String
  timeStart: String
  type: String
}

enum ArtificialLight {
  _
  MY_ARTIFICIALLIGHTENUM1
  MY_ARTIFICIALLIGHTENUM2
  MY_ARTIFICIALLIGHTENUM3
  MY_ARTIFICIALLIGHTENUM4
  MY_ARTIFICIALLIGHTENUM5
}

enum CloudCover {
  _
  MY_CLOUDCOVEROKTAENUMUNKNOWN
  MY_CLOUDCOVEROKTAENUM0
  MY_CLOUDCOVEROKTAENUM1
  MY_CLOUDCOVEROKTAENUM2
  MY_CLOUDCOVEROKTAENUM3
  MY_CLOUDCOVEROKTAENUM4
  MY_CLOUDCOVEROKTAENUM5
  MY_CLOUDCOVEROKTAENUM6
  MY_CLOUDCOVEROKTAENUM7
  MY_CLOUDCOVEROKTAENUM8
}

enum CloudCoverEnd {
  _
  MY_CLOUDCOVEROKTAENUMUNKNOWN
  MY_CLOUDCOVEROKTAENUM0
  MY_CLOUDCOVEROKTAENUM1
  MY_CLOUDCOVEROKTAENUM2
  MY_CLOUDCOVEROKTAENUM3
  MY_CLOUDCOVEROKTAENUM4
  MY_CLOUDCOVEROKTAENUM5
  MY_CLOUDCOVEROKTAENUM6
  MY_CLOUDCOVEROKTAENUM7
  MY_CLOUDCOVEROKTAENUM8
}

enum CloudCoverStart {
  _
  MY_CLOUDCOVEROKTAENUMUNKNOWN
  MY_CLOUDCOVEROKTAENUM0
  MY_CLOUDCOVEROKTAENUM1
  MY_CLOUDCOVEROKTAENUM2
  MY_CLOUDCOVEROKTAENUM3
  MY_CLOUDCOVEROKTAENUM4
  MY_CLOUDCOVEROKTAENUM5
  MY_CLOUDCOVEROKTAENUM6
  MY_CLOUDCOVEROKTAENUM7
  MY_CLOUDCOVEROKTAENUM8
}

type GatheringFact {
  aCAFLAonAlder: Int
  aCAFLAonBirch: Int
  aCAFLAonGround: Int
  aCAFLAonPine: Int
  aCAFLAonSpruce: Int
  abundanceBOMGAR: AbundanceBOMGAR
  abundancePINENU: AbundancePINENU
  abundanceTURPIL: AbundanceTURPIL
  batCollector: BatCollector
  binocularsUsed: Boolean
  birdFeederCount: Int
  birdFeederCountBiotopeA: Int
  birdFeederCountBiotopeB: Int
  birdFeederCountBiotopeC: Int
  birdFeederCountBiotopeD: Int
  birdFeederCountBiotopeE: Int
  birdFeederCountBiotopeF: Int
  birdFeederCountBiotopeG: Int
  birdFeederCountBiotopeH: Int
  cARSPIonAlder: Int
  cARSPIonBirch: Int
  cARSPIonGround: Int
  cARSPIonPine: Int
  cARSPIonSpruce: Int
  censusAreaHectares: Int
  cloudAndRain: CloudAndRain
  context: String
  descriptionBiotopeF: String
  feedingStationCount: Int
  feedingStationCountBiotopeA: Int
  feedingStationCountBiotopeB: Int
  feedingStationCountBiotopeC: Int
  feedingStationCountBiotopeD: Int
  feedingStationCountBiotopeE: Int
  feedingStationCountBiotopeF: Int
  feedingStationCountBiotopeG: Int
  feedingStationCountBiotopeH: Int
  iceCover: IceCover
  id: String
  invasiveControlOtherExpensesInEuros: Int
  invasiveControlWorkHours: Int
  lOXIAonAlder: Int
  lOXIAonBirch: Int
  lOXIAonGround: Int
  lOXIAonPine: Int
  lOXIAonSpruce: Int
  lineTransectSegmentCounted: Boolean
  lineTransectSegmentMetersEnd: Int
  lineTransectSegmentMetersStart: Int
  lolifeSiteClassification: LolifeSiteClassification
  lolifeSiteClassificationComments: String
  meanTemperature: Int
  observedAreaHectares: Int
  observerCount: Int
  observerID: Int
  pineConesAtCensus: PineConesAtCensus
  pointCountHabitat: PointCountHabitat
  routeID: Int
  routeLength: Int
  routeLengthBiotopeA: Int
  routeLengthBiotopeB: Int
  routeLengthBiotopeC: Int
  routeLengthBiotopeD: Int
  routeLengthBiotopeE: Int
  routeLengthBiotopeF: Int
  routeLengthBiotopeG: Int
  routeLengthBiotopeH: Int
  routeLengthChange: Int
  routeLengthChangeBiotopeA: Int
  routeLengthChangeBiotopeB: Int
  routeLengthChangeBiotopeC: Int
  routeLengthChangeBiotopeD: Int
  routeLengthChangeBiotopeE: Int
  routeLengthChangeBiotopeF: Int
  routeLengthChangeBiotopeG: Int
  routeLengthChangeBiotopeH: Int
  shorelineLengthMeters: Int
  snowAndIceOnTrees: SnowAndIceOnTrees
  snowCover: SnowCover
  sorbusBerriesAtCensus: SorbusBerriesAtCensus
  sorbusBerriesEarlyFall: SorbusBerriesEarlyFall
  spottingScopeUsed: Boolean
  spruceConesAtCensus: SpruceConesAtCensus
  sunniness: Int
  sykeButterFlyCensusWind: SykeButterFlyCensusWind
  sykeButterFlyCensusWindEnd: SykeButterFlyCensusWindEnd
  sykeButterFlyCensusWindStart: SykeButterFlyCensusWindStart
  type: String
  typeOfSnowCover: TypeOfSnowCover
  visibility: Visibility
  waterbirdCensusPeriod: WaterbirdCensusPeriod
  waterbirdHabitat: WaterbirdHabitat
  waterbodies: Waterbodies
  wayOfTravel: WayOfTravel
  wayOfTravelNotes: String
  wind: Wind
  ykjSquareNumber: String
}

enum AbundanceBOMGAR {
  _
  WBC_SPECIESABUNDANCEENUM0
  WBC_SPECIESABUNDANCEENUM1
  WBC_SPECIESABUNDANCEENUM2
  WBC_SPECIESABUNDANCEENUM3
}

enum AbundancePINENU {
  _
  WBC_SPECIESABUNDANCEENUM0
  WBC_SPECIESABUNDANCEENUM1
  WBC_SPECIESABUNDANCEENUM2
  WBC_SPECIESABUNDANCEENUM3
}

enum AbundanceTURPIL {
  _
  WBC_SPECIESABUNDANCEENUM0
  WBC_SPECIESABUNDANCEENUM1
  WBC_SPECIESABUNDANCEENUM2
  WBC_SPECIESABUNDANCEENUM3
}

enum BatCollector {
  _
  MY_BATCOLLECTORALONE
  MY_BATCOLLECTORWITHPROJECTGROUPMEMBER
  MY_BATCOLLECTORSOMEONEELSE
}

enum CloudAndRain {
  _
  WBC_CLOUDANDRAINENUM0
  WBC_CLOUDANDRAINENUM1
  WBC_CLOUDANDRAINENUM2
  WBC_CLOUDANDRAINENUM3
  WBC_CLOUDANDRAINENUM4
}

enum IceCover {
  _
  WBC_ICECOVERENUM0
  WBC_ICECOVERENUM1
  WBC_ICECOVERENUM2
  WBC_ICECOVERENUM3
  WBC_ICECOVERENUM4
}

enum LolifeSiteClassification {
  _
  MY_LOLIFESITECLASSIFICATIONEXCELLENT
  MY_LOLIFESITECLASSIFICATIONSUBOPTIMAL
  MY_LOLIFESITECLASSIFICATIONPOSSIBLE
  MY_LOLIFESITECLASSIFICATIONCURRENTLYUNSUITABLE
  MY_LOLIFESITECLASSIFICATIONPERMANENTLYUNSUITABLE
}

enum PineConesAtCensus {
  _
  WBC_BERRIESANDCONESENUM0
  WBC_BERRIESANDCONESENUM1
  WBC_BERRIESANDCONESENUM2
  WBC_BERRIESANDCONESENUM3
  WBC_BERRIESANDCONESENUM4
  WBC_BERRIESANDCONESENUM5
  WBC_BERRIESANDCONESENUM6
}

enum PointCountHabitat {
  _
  MY_POINTCOUNTHABITAT0
  MY_POINTCOUNTHABITAT1
  MY_POINTCOUNTHABITAT2
  MY_POINTCOUNTHABITAT3
  MY_POINTCOUNTHABITAT4
  MY_POINTCOUNTHABITAT5
  MY_POINTCOUNTHABITAT6
  MY_POINTCOUNTHABITAT7
  MY_POINTCOUNTHABITAT8
  MY_POINTCOUNTHABITAT9
  MY_POINTCOUNTHABITAT10
  MY_POINTCOUNTHABITAT11
  MY_POINTCOUNTHABITAT12
  MY_POINTCOUNTHABITAT13
  MY_POINTCOUNTHABITAT14
  MY_POINTCOUNTHABITAT15
  MY_POINTCOUNTHABITAT16
  MY_POINTCOUNTHABITAT17
}

enum SnowAndIceOnTrees {
  _
  WBC_SNOWANDICEONTREESENUM0
  WBC_SNOWANDICEONTREESENUM1
  WBC_SNOWANDICEONTREESENUM2
  WBC_SNOWANDICEONTREESENUM3
}

enum SnowCover {
  _
  WBC_SNOWCOVERENUM0
  WBC_SNOWCOVERENUM1
  WBC_SNOWCOVERENUM2
  WBC_SNOWCOVERENUM3
  WBC_SNOWCOVERENUM4
  WBC_SNOWCOVERENUM5
  WBC_SNOWCOVERENUM6
  WBC_SNOWCOVERENUM7
  WBC_SNOWCOVERENUM8
}

enum SorbusBerriesAtCensus {
  _
  WBC_BERRIESANDCONESENUM0
  WBC_BERRIESANDCONESENUM1
  WBC_BERRIESANDCONESENUM2
  WBC_BERRIESANDCONESENUM3
  WBC_BERRIESANDCONESENUM4
  WBC_BERRIESANDCONESENUM5
  WBC_BERRIESANDCONESENUM6
}

enum SorbusBerriesEarlyFall {
  _
  WBC_BERRIESANDCONESENUM0
  WBC_BERRIESANDCONESENUM1
  WBC_BERRIESANDCONESENUM2
  WBC_BERRIESANDCONESENUM3
  WBC_BERRIESANDCONESENUM4
  WBC_BERRIESANDCONESENUM5
  WBC_BERRIESANDCONESENUM6
}

enum SpruceConesAtCensus {
  _
  WBC_BERRIESANDCONESENUM0
  WBC_BERRIESANDCONESENUM1
  WBC_BERRIESANDCONESENUM2
  WBC_BERRIESANDCONESENUM3
  WBC_BERRIESANDCONESENUM4
  WBC_BERRIESANDCONESENUM5
  WBC_BERRIESANDCONESENUM6
}

enum SykeButterFlyCensusWind {
  _
  MY_SYKEBUTTERFLYCENSUSWINDENUMUNKNOWN
  MY_SYKEBUTTERFLYCENSUSWINDENUM0
  MY_SYKEBUTTERFLYCENSUSWINDENUM1
  MY_SYKEBUTTERFLYCENSUSWINDENUM2
  MY_SYKEBUTTERFLYCENSUSWINDENUM3
  MY_SYKEBUTTERFLYCENSUSWINDENUM4
  MY_SYKEBUTTERFLYCENSUSWINDENUM5
  MY_SYKEBUTTERFLYCENSUSWINDENUM6
}

enum SykeButterFlyCensusWindEnd {
  _
  MY_SYKEBUTTERFLYCENSUSWINDENUMUNKNOWN
  MY_SYKEBUTTERFLYCENSUSWINDENUM0
  MY_SYKEBUTTERFLYCENSUSWINDENUM1
  MY_SYKEBUTTERFLYCENSUSWINDENUM2
  MY_SYKEBUTTERFLYCENSUSWINDENUM3
  MY_SYKEBUTTERFLYCENSUSWINDENUM4
  MY_SYKEBUTTERFLYCENSUSWINDENUM5
  MY_SYKEBUTTERFLYCENSUSWINDENUM6
}

enum SykeButterFlyCensusWindStart {
  _
  MY_SYKEBUTTERFLYCENSUSWINDENUMUNKNOWN
  MY_SYKEBUTTERFLYCENSUSWINDENUM0
  MY_SYKEBUTTERFLYCENSUSWINDENUM1
  MY_SYKEBUTTERFLYCENSUSWINDENUM2
  MY_SYKEBUTTERFLYCENSUSWINDENUM3
  MY_SYKEBUTTERFLYCENSUSWINDENUM4
  MY_SYKEBUTTERFLYCENSUSWINDENUM5
  MY_SYKEBUTTERFLYCENSUSWINDENUM6
}

enum TypeOfSnowCover {
  _
  WBC_TYPEOFSNOWCOVERENUM0
  WBC_TYPEOFSNOWCOVERENUM1
  WBC_TYPEOFSNOWCOVERENUM2
}

enum Visibility {
  _
  WBC_VISIBILITYENUM0
  WBC_VISIBILITYENUM1
  WBC_VISIBILITYENUM2
  WBC_VISIBILITYENUM3
  WBC_VISIBILITYENUM4
}

enum WaterbirdCensusPeriod {
  _
  MY_WATERBIRDCENSUSPERIODENUM1
  MY_WATERBIRDCENSUSPERIODENUM2
  MY_WATERBIRDCENSUSPERIODENUMJUVENILE
  MY_WATERBIRDCENSUSPERIODENUMADDITIONAL
  MY_WATERBIRDCENSUSPERIODENUMCOMBINED
}

enum WaterbirdHabitat {
  _
  MY_WATERBIRDHABITATENUM1
  MY_WATERBIRDHABITATENUM2
  MY_WATERBIRDHABITATENUM3
  MY_WATERBIRDHABITATENUM4
  MY_WATERBIRDHABITATENUM5
  MY_WATERBIRDHABITATENUM6
  MY_WATERBIRDHABITATENUM7
  MY_WATERBIRDHABITATENUM8
  MY_WATERBIRDHABITATENUM9
  MY_WATERBIRDHABITATENUM10
}

enum Waterbodies {
  _
  WBC_WATERBODIESENUM0
  WBC_WATERBODIESENUM1
  WBC_WATERBODIESENUM2
  WBC_WATERBODIESENUM3
  WBC_WATERBODIESENUM4
  WBC_WATERBODIESENUM5
}

enum WayOfTravel {
  _
  WBC_WAYOFTRAVELENUM0
  WBC_WAYOFTRAVELENUM1
  WBC_WAYOFTRAVELENUM2
  WBC_WAYOFTRAVELENUM3
  WBC_WAYOFTRAVELENUM9
}

enum Wind {
  _
  WBC_WINDENUM0
  WBC_WINDENUM1
  WBC_WINDENUM2
  WBC_WINDENUM3
  WBC_WINDENUM4
}

enum RainIntensity {
  _
  MY_RAININTENSITYENUMNORAIN
  MY_RAININTENSITYENUMLIGHTRAIN
  MY_RAININTENSITYENUMMODERATERAIN
  MY_RAININTENSITYENUMHEAVYRAIN
  MY_RAININTENSITYENUMTORRENTIALRAIN
}

type TaxonCensus2 {
  censusTaxonID: String
  censusTaxonSetID: CensusTaxonSetID
  context: String
  id: String
  taxonCensusType: TaxonCensusType!
  type: String
}

enum CensusTaxonSetID {
  _
  MX_TAXONSETSYKEBUTTERFLYCENSUSPAPILIONOIDEA
  MX_TAXONSETSYKEBUTTERFLYCENSUSOTHER
  MX_TAXONSETWATERBIRDWATERBIRDS
  MX_TAXONSETWATERBIRDWADERS
  MX_TAXONSETWATERBIRDGULLS
  MX_TAXONSETWATERBIRDPASSERINES
  MX_TAXONSETWATERBIRDAMPHIBIA
  MX_TAXONSETSYKEBUMBLEBEE
  MVL_1201
  MX_TAXONSETSYKEBUMBLEBEEOTHER
  MX_TAXONSETBIRDATLASCOMMON
  MX_TAXONSETBIOMONCOMPLETELISTODONATA
  MX_TAXONSETBIOMONCOMPLETELISTBUTTERFLIES
  MX_TAXONSETBIOMONCOMPLETELISTMOTHS
  MX_TAXONSETBIOMONCOMPLETELISTBOMBUS
  MX_TAXONSETBIOMONCOMPLETELISTAMPHIBIAREPTILIA
  MX_TAXONSETBIOMONCOMPLETELISTLARGEFLOWERS
  MX_TAXONSETBIOMONCOMPLETELISTSUBARCTICPLANTS
  MX_TAXONSETBIOMONCOMPLETELISTMACROLICHENS
  MX_TAXONSETBIOMONCOMPLETELISTBRACKETFUNGI
  MX_TAXONSETBIOMONCOMPLETELISTPRACTICALFUNGI
  MX_TAXONSETSYKEMACROZOOBENTHOS
}

enum TaxonCensusType {
  MY_TAXONCENSUSTYPECOUNTED
  MY_TAXONCENSUSTYPEESTIMATED
  MY_TAXONCENSUSTYPENOTCOUNTED
}

type Gathering {
  # AFE grid name
  aFEQuadrat: String
  acknowledgeNoUnitsInCensus: Boolean

  # Regions, rayons, provinces and other administrative areas. Separate multiple names with commas, from generic to specific. (E.g. Etelä-Suomen lääni, Uusimaa)
  administrativeProvince: String

  # Altitude form sea level in meters, single value or range (E.g. 90, or 80-100). No GPS altitude here.
  alt: String
  areaDetail: String

  # Write associated observation taxa names here, separated by a semicolon (;). E.g.: "Betula pendula; Betula pubescens; Poaceae". These will form their own units of the type observation.
  associatedObservationTaxa: String

  # Write associated specimen taxa names here, separated by a semicolon (;). E.g.: "Betula pendula; Betula pubescens; Poaceae". These will form their own units of the type Preserved specimen.
  associatedSpecimenTaxa: String

  # Bat habitat
  batHabitat: [BatHabitatListItem]
  binocularsUsed: Boolean

  # Formal abbreviation. For Finnish eliömaakunnat, use Finnish abbreviation.
  biologicalProvince: String
  censusHinderedByEnviromentalFactors: Boolean
  censusHinderedByFog: Boolean
  censusHinderedByRain: Boolean
  censusHinderedByWind: Boolean

  # Name of an expedition or such.
  collectingEventName: String
  context: String
  controlActivitiesNotes: String

  # Free-text notes about the coordinates.
  coordinateNotes: String

  # Maximum error of coordinates in meters
  coordinateRadius: String

  # Use for NEW SPECIMENS: Where the coordinates have been acquired
  coordinateSource: CoordinateSource

  # More information about the coordinate systems: https://wiki.helsinki.fi/display/digit/Entering+specimen+data
  coordinateSystem: CoordinateSystem
  coordinatesGridYKJ: String

  # Coordinates, possible coordinate system and error radius word-to-word as they appear on the label or other original source, errors and all.
  coordinatesVerbatim: String

  # Country name in English, or 2-letter country code, or name from label
  country: String

  # County (piirikunta, kreivikunta etc.)
  county: String
  dateBegin: String
  dateEnd: String

  # Date just as it appears on the label or other original source, no interpretation, errors and all
  dateVerbatim: String

  # Depth in meters, single value or range (E.g. 0.9, or 0.8-1.0)
  depth: String
  dynamicProperties: String
  eventDate: String

  # Finnish forest vegetation zone
  forestVegetationZone: ForestVegetationZone
  gatheringFact: GatheringFact
  gatheringType: GatheringType
  geometry: JSON

  # Use for OLD SPECIMENS: What source was used to get coordinates based on locality names
  georeferenceSource: GeoreferenceSource
  habitat: [HabitatListItem]
  habitatAttributes: [HabitatAttributesListItem]

  # Formal habitat name or abbreviation. If several, separate with semicolons (E.g. 'OMT; OMaT').
  habitatClassification: String

  # Informal description of the habitat.
  habitatDescription: String
  hasUnit: [String]

  # If country is not known or not applicable, for example continent, ocean or large island
  higherGeography: String
  id: String
  images: [String]
  invasiveControlAreaKnown: Boolean
  invasiveControlDangerous: Boolean
  invasiveControlDangerousDescription: String
  invasiveControlEffectiveness: ControlLevel
  invasiveControlEffectivenessNotes: String
  invasiveControlMethods: [InvasiveControlMethodsListItem]
  invasiveControlMethodsDescription: String
  invasiveControlOpen: Boolean
  invasiveControlOpenDescription: String
  invasiveControlOtherExpensesInEuros: Int
  invasiveControlTaxon: [String]

  # Which parent or larger collection this is part of.
  isPartOf: String
  keywords: [String]

  # Latitude. For southern latitudes, use negative value.
  latitude: String

  # Name of the collector(s), in format 'Lastname, Firstname; Lastname Firstname'
  leg: [String]

  # Alkuperäislähteen käyttäjätunnus
  legUserID: [String]

  # Leg just as it appears in the label or other original source, no interpretation, errors and all.
  legVerbatim: String

  # Official name of the locality in basic form. Separate multiple names with commas, from generic to specific. No informal description here.
  locality: String

  # Informal description of the exact locality, e.g. '5 km NE of city X, under stone bridge'
  localityDescription: String

  # An unique identifier or code for the locality, if the locality has one (e.g. from SAPO-ontology).
  localityID: String

  # Locality word-to-word as it appears on the label or other original source, errors and all
  localityVerbatim: String

  # Longitude. For western longitudes, use negative value.
  longitude: String

  # Municipality, commune, town, city or civil parish
  municipality: String
  namedPlaceID: String

  # Additional information to the data in each section.
  notes: String

  # For garden accessions/seed bank, number of individuals from which seeds were collected
  numberOfSampledIndividuals: String
  observationDays: Int
  observationMinutes: Int

  # For garden accessions/seed bank, what proportion of the population sampled was giving seeds
  percentageGivingSeeds: Int
  predominantTree: PredominantTree
  projectTitle: String
  province: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Relative humidity %
  relativeHumidity: Int

  # For garden accessions/seed bank, estimated size of the area sampled, in square meters
  samplingAreaSizeInSquareMeters: Float

  # Main method for (usually intentional) sampling
  samplingMethod: SamplingMethod
  samplingMethodNotes: String
  section: Int
  skipped: Boolean
  spottingScopeUsed: Boolean

  # Type of substrate or name of substrate species.
  substrate: String
  taxonCensus: [TaxonCensus2]
  temperature: Int
  timeEnd: String
  timeStart: String
  trapCount: Int
  type: String

  # UTM grid name
  uTMQuadrat: String
  units: [Unit]
  weather: String
  wgs84Latitude: String
  wgs84Longitude: String
}

enum BatHabitatListItem {
  _
  MY_BATHABITATYARDCITYCENTRE
  MY_BATHABITATYARDSUBURBS
  MY_BATHABITATYARDRURAL
  MY_BATHABITATROADSIDE
  MY_BATHABITATSTANDOFTREESCLOSETOBUILDINGS
  MY_BATHABITATPARKWITHFEWTREES
  MY_BATHABITATPARKABUNDANTINTREES
  MY_BATHABITATSPARSEFOREST
  MY_BATHABITATDENSEFOREST
  MY_BATHABITATEDGEOFSHORECOPPICE
  MY_BATHABITATLAKESHORE
  MY_BATHABITATSEASHORE
  MY_BATHABITATARCHIPELAGO
  MY_BATHABITATSTREAMORRIVERBANK
  MY_BATHABITATOLDBUILDINGORRUINS
  MY_BATHABITATCOUNTRYSIDE
}

enum CoordinateSource {
  _
  MY_COORDINATESOURCEGPS
  MY_COORDINATESOURCEPERUSKARTTA
  MY_COORDINATESOURCEPAPERMAP
  MY_COORDINATESOURCEKOTKAMAP
  MY_COORDINATESOURCEKARTTAPAIKKA
  MY_COORDINATESOURCERETKIKARTTA
  MY_COORDINATESOURCEGOOGLE
  MY_COORDINATESOURCEOTHER
  MY_COORDINATESOURCEUNKNOWN
}

enum CoordinateSystem {
  _
  MY_COORDINATESYSTEMYKJ
  MY_COORDINATESYSTEMWGS84
  MY_COORDINATESYSTEMWGS84DMS
  MY_COORDINATESYSTEMKKJ
  MY_COORDINATESYSTEMETRS_TM35FIN
  MY_COORDINATESYSTEMDD
  MY_COORDINATESYSTEMDMS
}

enum ForestVegetationZone {
  _
  MY_FORESTVEGETATIONZONE1A
  MY_FORESTVEGETATIONZONE1B
  MY_FORESTVEGETATIONZONE2A
  MY_FORESTVEGETATIONZONE2B
  MY_FORESTVEGETATIONZONE3A
  MY_FORESTVEGETATIONZONE3B
  MY_FORESTVEGETATIONZONE3C
  MY_FORESTVEGETATIONZONE4A
  MY_FORESTVEGETATIONZONE4B
  MY_FORESTVEGETATIONZONE4C
  MY_FORESTVEGETATIONZONE4D
}

enum GatheringType {
  _
  MY_GATHERINGTYPEFORAGINGAREA
  MY_GATHERINGTYPEBREEDINGANDRESTINGAREA
  MY_GATHERINGTYPECAVITYTREE
  MY_GATHERINGTYPEDROPPINGSTREE
  MY_GATHERINGTYPENESTTREE
  MY_GATHERINGTYPELOLIFEACCESS
  MY_GATHERINGTYPELOLIFECOREZONE
  MY_GATHERINGTYPELOLIFEHABITATZONE
  MY_GATHERINGTYPELOLIFEAPPLICABLEZONE
  MY_GATHERINGTYPEWATERBIRDPOINT
  MY_GATHERINGTYPEWATERBIRDROUND
}

enum GeoreferenceSource {
  _
  MY_GEOREFERENCESOURCEKOTKA
  MY_GEOREFERENCESOURCEKARTTAPAIKKA
  MY_GEOREFERENCESOURCEPAIKKATIETOIKKUNA
  MY_GEOREFERENCESOURCEKARJALANKARTAT
  MY_GEOREFERENCESOURCERETKIKARTTA
  MY_GEOREFERENCESOURCEGOOGLE
  MY_GEOREFERENCESOURCEPERUSKARTTA
  MY_GEOREFERENCESOURCEPAPERMAP
  MY_GEOREFERENCESOURCEOTHERPAPER
  MY_GEOREFERENCESOURCEOTHERWEB
  MY_GEOREFERENCESOURCECATALOGUE
  MY_GEOREFERENCESOURCEBIOGEOMANCER
  MY_GEOREFERENCESOURCEGEOLOCATE
  MY_GEOREFERENCESOURCEOTHER
  MY_GEOREFERENCESOURCEUNKNOWN
}

enum HabitatListItem {
  _
  MY_HABITATENUMVALUE1
  MY_HABITATENUMVALUE2
  MY_HABITATENUMVALUE3
  MY_HABITATENUMVALUE4
  MY_HABITATENUMVALUE5
  MY_HABITATENUMVALUE6
  MY_HABITATENUMVALUE7
  MY_HABITATENUMVALUE8
  MY_HABITATENUMVALUE9
  MY_HABITATENUMVALUE10
  MY_HABITATENUMVALUE11
  MY_HABITATENUMVALUE12
  MY_HABITATENUMVALUE13
  MY_HABITATENUMVALUE14
  MY_HABITATENUMVALUE15
  MY_HABITATENUMVALUE16
  MY_HABITATENUMVALUE17
  MY_HABITATENUMVALUE18
  MY_HABITATENUMVALUE19
  MY_HABITATENUMVALUE20
  MY_HABITATENUMVALUE21
  MY_HABITATENUMVALUE22
  MY_HABITATENUMVALUE23
  MY_HABITATENUMVALUE24
  MY_HABITATENUMVALUE25
  MY_HABITATENUMVALUE26
  MY_HABITATENUMVALUE27
  MY_HABITATENUMVALUE28
  MY_HABITATENUMVALUE29
  MY_HABITATENUMVALUE30
  MY_HABITATENUMVALUE31
  MY_HABITATENUMVALUE32
  MY_HABITATENUMVALUE33
  MY_HABITATENUMVALUE34
  MY_HABITATENUMVALUE35
  MY_HABITATENUMVALUE36
  MY_HABITATENUMVALUE87
  MY_HABITATENUMVALUE37
  MY_HABITATENUMVALUE38
  MY_HABITATENUMVALUE39
  MY_HABITATENUMVALUE40
  MY_HABITATENUMVALUE41
  MY_HABITATENUMVALUE42
  MY_HABITATENUMVALUE43
  MY_HABITATENUMVALUE44
  MY_HABITATENUMVALUE45
  MY_HABITATENUMVALUE46
  MY_HABITATENUMVALUE47
  MY_HABITATENUMVALUE48
  MY_HABITATENUMVALUE49
  MY_HABITATENUMVALUE50
  MY_HABITATENUMVALUE51
  MY_HABITATENUMVALUE52
  MY_HABITATENUMVALUE53
  MY_HABITATENUMVALUE54
  MY_HABITATENUMVALUE55
  MY_HABITATENUMVALUE56
  MY_HABITATENUMVALUE57
  MY_HABITATENUMVALUE58
  MY_HABITATENUMVALUE59
  MY_HABITATENUMVALUE60
  MY_HABITATENUMVALUE61
  MY_HABITATENUMVALUE62
  MY_HABITATENUMVALUE63
  MY_HABITATENUMVALUE64
  MY_HABITATENUMVALUE65
  MY_HABITATENUMVALUE66
  MY_HABITATENUMVALUE67
  MY_HABITATENUMVALUE68
  MY_HABITATENUMVALUE69
  MY_HABITATENUMVALUE70
  MY_HABITATENUMVALUE71
  MY_HABITATENUMVALUE72
  MY_HABITATENUMVALUE73
  MY_HABITATENUMVALUE74
  MY_HABITATENUMVALUE75
  MY_HABITATENUMVALUE76
  MY_HABITATENUMVALUE77
  MY_HABITATENUMVALUE78
  MY_HABITATENUMVALUE79
  MY_HABITATENUMVALUE80
  MY_HABITATENUMVALUE81
  MY_HABITATENUMVALUE82
  MY_HABITATENUMVALUE83
  MY_HABITATENUMVALUE84
  MY_HABITATENUMVALUE85
  MY_HABITATENUMVALUE86
  MY_HABITATENUMVALUE88
  MY_HABITATENUMVALUE89
  MY_HABITATENUMVALUE90
  MY_HABITATENUMVALUE91
  MY_HABITATENUMVALUE92
  MY_HABITATENUMVALUE93
  MY_HABITATENUMVALUE94
}

enum HabitatAttributesListItem {
  _
  MY_HABITATATTRIBUTESENUMVALUE1
  MY_HABITATATTRIBUTESENUMVALUE2
  MY_HABITATATTRIBUTESENUMVALUE3
  MY_HABITATATTRIBUTESENUMVALUE4
  MY_HABITATATTRIBUTESENUMVALUE5
  MY_HABITATATTRIBUTESENUMVALUE6
  MY_HABITATATTRIBUTESENUMVALUE7
  MY_HABITATATTRIBUTESENUMVALUE8
  MY_HABITATATTRIBUTESENUMVALUE9
  MY_HABITATATTRIBUTESENUMVALUE10
  MY_HABITATATTRIBUTESENUMVALUE11
  MY_HABITATATTRIBUTESENUMVALUE12
  MY_HABITATATTRIBUTESENUMVALUE13
  MY_HABITATATTRIBUTESENUMVALUE14
  MY_HABITATATTRIBUTESENUMVALUE15
  MY_HABITATATTRIBUTESENUMVALUE16
  MY_HABITATATTRIBUTESENUMVALUE17
  MY_HABITATATTRIBUTESENUMVALUE18
  MY_HABITATATTRIBUTESENUMVALUE19
  MY_HABITATATTRIBUTESENUMVALUE20
  MY_HABITATATTRIBUTESENUMVALUE21
  MY_HABITATATTRIBUTESENUMVALUE22
}

enum ControlLevel {
  _
  MY_INVASIVECONTROLEFFECTIVENESSFULL
  MY_INVASIVECONTROLEFFECTIVENESSPARTIAL
  MY_INVASIVECONTROLEFFECTIVENESSNONE
  MY_INVASIVECONTROLEFFECTIVENESSNOTFOUND
}

enum InvasiveControlMethodsListItem {
  _
  MY_INVASIVECONTROLMETHODSMECHANICAL
  MY_INVASIVECONTROLMETHODSCHEMICAL
  MY_INVASIVECONTROLMETHODSBIOLOGICAL
  MY_INVASIVECONTROLMETHODSOTHER
}

enum PredominantTree {
  _
  MX_37819
  MX_37812
  MX_37992
  MX_38004
  MX_38590
  MX_38686
  MX_38563
  MX_38527
  MX_41344
  MX_38016
  MX_39331
  MX_37990
  MX_38008
  MX_38010
  MX_37975
  MX_37976
  MX_39122
  MX_37815
}

enum SamplingMethod {
  _
  MY_SAMPLINGMETHODCARNET
  MY_SAMPLINGMETHODFEROMONETRAP
  MY_SAMPLINGMETHODNET
  MY_SAMPLINGMETHODDRAG
  MY_SAMPLINGMETHODWINDOWTRAP
  MY_SAMPLINGMETHODDIGGING
  MY_SAMPLINGMETHODFISHNET
  MY_SAMPLINGMETHODHAND
  MY_SAMPLINGMETHODREARED
  MY_SAMPLINGMETHODEPUPA
  MY_SAMPLINGMETHODEXOVO
  MY_SAMPLINGMETHODELARVA
  MY_SAMPLINGMETHODFISHTRAP
  MY_SAMPLINGMETHODYELLOWWINDOWTRAP
  MY_SAMPLINGMETHODYELLOWPAN
  MY_SAMPLINGMETHODTRIANGLEDRAG
  MY_SAMPLINGMETHODPITFALL
  MY_SAMPLINGMETHODECLECTORTRAP
  MY_SAMPLINGMETHODDUNGTRAP
  MY_SAMPLINGMETHODBOARD
  MY_SAMPLINGMETHODYELLOWTRAP
  MY_SAMPLINGMETHODMISTNET
  MY_SAMPLINGMETHODSWEEPING
  MY_SAMPLINGMETHODSOILSAMPLE
  MY_SAMPLINGMETHODWASHING
  MY_SAMPLINGMETHODMALAISE
  MY_SAMPLINGMETHODPANTRAP
  MY_SAMPLINGMETHODSEINE
  MY_SAMPLINGMETHODANGLEFISHING
  MY_SAMPLINGMETHODTRAMPLING
  MY_SAMPLINGMETHODBEAMTRAWL
  MY_SAMPLINGMETHODTRAP
  MY_SAMPLINGMETHODDROPPING
  MY_SAMPLINGMETHODTRUNKWINDOWTRAP
  MY_SAMPLINGMETHODELECTROFISHING
  MY_SAMPLINGMETHODSIFTING
  MY_SAMPLINGMETHODDIVERINSECTTRAP
  MY_SAMPLINGMETHODDIVING
  MY_SAMPLINGMETHODBAIT
  MY_SAMPLINGMETHODBAITTRAP
  MY_SAMPLINGMETHODTRAWLING
  MY_SAMPLINGMETHODLIGHT
  MY_SAMPLINGMETHODLIGHTTRAP
  MY_SAMPLINGMETHODWATERBUCKET
  MY_SAMPLINGMETHODAQUATICNET
  MY_SAMPLINGMETHODAQUATICEMERGENCETRAP
  MY_SAMPLINGMETHODWATERSIEVE
  MY_SAMPLINGMETHODOTHER
}

type Unit {
  abundanceString: String
  abundanceUnit: AbundanceUnit

  # Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)
  additionalIDs: [String]
  adultIndividualCount: Int

  # Estimated or known age in calendar years, years, days or other relevant unit.
  age: String

  # E.g. how age was determined, by whom and when.
  ageNotes: String
  alive: Boolean
  ankleInMillimeters: [String]
  areaInSquareMeters: Int
  atlasCode: AtlasCode
  audio: [String]
  batBehavior: BatBehavior
  beakInMillimeters: [String]
  birdAge: BirdAge
  birdBehavior: [String]
  birdPlumage: BirdPlumage
  breeding: Boolean
  broodSize: Int

  # Cause of death, if not intentionally trapped on sampled
  causeOfDeath: String
  checklistID: String

  # Results of chemical reaction tests etc.
  chemistry: String
  context: String

  # Numeric or other description on the amount of individuals (or sprouts, fruiting bodies or such) in the specimen. Sexes and juveniles can be specified like so: 1m2f3j (=1 male, 2 females, 3 juveniles)
  count: String

  # Diameter at breast height, in centimeters
  dBH: String

  # Leave empty if no sample taken, or if the sample is recorded separately
  dNASampleLocation: String

  # Estimation of decay stage (lahoaste in Finnish) on the scale of 1 to 5 and/or description
  decayStage: String
  distance: Distance

  # For palaeontological specimens, earliest possible geochronologic epoch or lowest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected
  earliestEpochOrLowestSeries: EarliestEpochOrLowestSeries
  femaleIndividualCount: Int

  # Fruit type of the collected fruits, used for botanical garden accessions/seed bank.
  fruitType: FruitType

  # Genotype of the microbial strain
  genotype: String
  gonadInMillimeters: [String]

  # Microbial culture growth medium name, usually from a standard
  growthMediumName: String

  # Other growth conditions for the microbial culture, light etc.
  growthOtherConditions: String

  # Microbial culture growth temperature
  growthTemperature: String
  hasIdentification: [String]
  hasSubUnit: [String]
  hostID: String
  hostInformalNameString: String
  id: String
  identifications: [Identification]
  images: [String]
  indirectObservationType: IndirectObservationType
  individualCount: Int

  # Description of the infestation status of the collected seeds, used for botanical garden accessions/seed bank.
  infestation: String
  informalNameString: String
  informalTaxonGroup: String

  # Valitut eliöryhmät
  informalTaxonGroups: [String]

  # Pathovars, serovars and other infrasubspecific subdivisions of microbes.
  infrasubspecificSubdivision: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  juvenileIndividualCount: Int
  keywords: [String]
  larvaIndividualCount: Int

  # For palaeontological specimens, latest possible geochronologic epoch or highest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected.
  latestEpochOrHighestSeries: LatestEpochOrHighestSeries
  lengthInMillimeters: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage

  # Free-text notes or addtional information about the life stage. If multiple values present, describe them here.
  lifeStageDescription: String
  likelyMigrant: Boolean

  # Macroscopic features and measurements, if not recorded separately into measurement fields.
  macroscopy: String
  maleIndividualCount: Int
  measurement: Measurement

  # According to German TRBA August 2015, which is more comprehensive than the EU or Finnish list for bacterial risk groups
  microbiologicalRiskGroup: MicrobiologicalRiskGroup

  # Microscopic features and measurements, if not recorded separately into measurement fields.
  microscopy: String
  movingDirection: MovingDirection
  movingStatus: [String]

  # Information on mutant microbial strain.
  mutant: String
  nativeStatus: NativeStatus
  nestCount: Int
  nestNotes: String
  nestTreeDiameterInCentimeters: Int
  nestType: NestType

  # Additional information to the data in each section.
  notes: String
  pairCount: Int
  pairCountOpinion: Int
  plantLifeStage: PlantLifeStage

  # Status code for the plant (wild, alien etc.)
  plantStatusCode: PlantStatusCode

  # Abundance of the taxon in the field
  populationAbundance: String

  # Preparations/preparates made from the specimen, if not recorded as separate Preparations/samples in the designated section
  preparations: String

  # Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.
  preservation: [PreservationListItem]

  # Can be used to highlight one unit as primary specimen/observation if there are many in one document. Only one unit per document can be marked as primary.
  primarySpecimen: Boolean

  # Origin or source of the garden accession
  provenance: Provenance

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Type of record, most commonly preserved specimen for museum specimens and observation for associated observations ("seuralaislajihavainto").
  recordBasis: RecordBasis

  # What parts of the record are / have been in storage.
  recordParts: [RecordPartsListItem]

  # Bird or bat ring number, code, colour code or such
  ring: String

  # Main method for (usually intentional) sampling
  samplingMethod: SamplingMethod
  samplingMethodNotes: String

  # Maturity of the collected seeds, used for botanical garden accessions/seed bank.
  seedMaturity: SeedMaturity

  # Seed morphology of the collected seeds, used for botanical garden accessions/seed bank.
  seedMorphology: SeedMorphology

  # Sex of the individual(s)
  sex: Sex

  # E.g. how sex was determined, by whom and when.
  sexNotes: String
  shortHandText: String
  smell: Smell
  smellNotes: String
  stratigraphyVerbatim: String
  substrateClassification: SubstrateClassification
  substrateDecayStage: SubstrateDecayStage
  substrateNotes: String
  substrateSpecies: String
  substrateSpeciesID: String
  substrateSpeciesInformalNameString: String
  substrateTreeClassification: [SubstrateTreeClassificationListItem]
  tailInMillimeters: [String]
  taste: Taste
  tasteNotes: String
  taxonConfidence: TaxonConfidence
  twitched: Boolean
  type: String
  typeSpecimens: [TypeSpecimen]
  unitFact: UnitFact
  unitGathering: UnitGathering
  unitType: [String]
  weightInGrams: [String]
  wild: Wild
  wingInMillimeters: [String]
}

enum AbundanceUnit {
  _
  MY_ABUNDANCEUNITINDIVIDUALCOUNT
  MY_ABUNDANCEUNITPAIRCOUNT
  MY_ABUNDANCEUNITNEST
  MY_ABUNDANCEUNITBREEDINGSITE
  MY_ABUNDANCEUNITFEEDINGSITE
  MY_ABUNDANCEUNITCOLONY
  MY_ABUNDANCEUNITFRUITBODY
  MY_ABUNDANCEUNITSPROUT
  MY_ABUNDANCEUNITHUMMOCK
  MY_ABUNDANCEUNITTHALLUS
  MY_ABUNDANCEUNITFLOWER
  MY_ABUNDANCEUNITSPOT
  MY_ABUNDANCEUNITTRUNK
  MY_ABUNDANCEUNITQUEEN
  MY_ABUNDANCEUNITSHELL
  MY_ABUNDANCEUNITDROPPINGS
  MY_ABUNDANCEUNITMARKS
  MY_ABUNDANCEUNITINDIRECT
  MY_ABUNDANCEUNITSQUAREDM
  MY_ABUNDANCEUNITSQUAREM
  MY_ABUNDANCEUNITRELATIVEDENSITY
  MY_ABUNDANCEUNITOCCURSDOESNOTOCCUR
}

enum AtlasCode {
  _
  MY_ATLASCODEENUM1
  MY_ATLASCODEENUM2
  MY_ATLASCODEENUM3
  MY_ATLASCODEENUM4
  MY_ATLASCODEENUM5
  MY_ATLASCODEENUM6
  MY_ATLASCODEENUM61
  MY_ATLASCODEENUM62
  MY_ATLASCODEENUM63
  MY_ATLASCODEENUM64
  MY_ATLASCODEENUM65
  MY_ATLASCODEENUM66
  MY_ATLASCODEENUM7
  MY_ATLASCODEENUM71
  MY_ATLASCODEENUM72
  MY_ATLASCODEENUM73
  MY_ATLASCODEENUM74
  MY_ATLASCODEENUM75
  MY_ATLASCODEENUM8
  MY_ATLASCODEENUM81
  MY_ATLASCODEENUM82
}

enum BatBehavior {
  _
  MY_BATBEHAVIORHIBERNATING
  MY_BATBEHAVIORROOSTING
  MY_BATBEHAVIORHUNTING
}

enum BirdAge {
  _
  MY_BIRDAGEPP
  MY_BIRDAGEPM
  MY_BIRDAGEFL
  MY_BIRDAGEPLUS1KV
  MY_BIRDAGE1KV
  MY_BIRDAGEPLUS2KV
  MY_BIRDAGE2KV
  MY_BIRDAGEPLUS3KV
  MY_BIRDAGE3KV
  MY_BIRDAGEPLUS4KV
  MY_BIRDAGE4KV
  MY_BIRDAGEPLUS5KV
  MY_BIRDAGE5KV
  MY_BIRDAGEPLUS6KV
  MY_BIRDAGE6KV
  MY_BIRDAGEPLUS7KV
  MY_BIRDAGE7KV
  MY_BIRDAGEPLUS8KV
  MY_BIRDAGE8KV
}

enum BirdPlumage {
  _
  MY_BIRDPLUMAGEAD
  MY_BIRDPLUMAGEEIJP
  MY_BIRDPLUMAGEIMM
  MY_BIRDPLUMAGEJP
  MY_BIRDPLUMAGEJUV
  MY_BIRDPLUMAGENPUK
  MY_BIRDPLUMAGEPULL
  MY_BIRDPLUMAGESUBAD
  MY_BIRDPLUMAGETP
  MY_BIRDPLUMAGEVP
  MY_BIRDPLUMAGEPEP
  MY_BIRDPLUMAGESS
}

enum Distance {
  _
  MY_DISTANCEOVERFLIGHT
  MY_DISTANCENEAR
  MY_DISTANCEQUITEFAR
  MY_DISTANCEFAR
  MY_DISTANCEVERYFAR
}

enum EarliestEpochOrLowestSeries {
  _
  MY_EPOCHORSERIESCAMBRIAN
  MY_EPOCHORSERIESCARBONIFEROUS
  MY_EPOCHORSERIESCRETACEOUS
  MY_EPOCHORSERIESDEVONIAN
  MY_EPOCHORSERIESEDIACARAN
  MY_EPOCHORSERIESJURASSIC
  MY_EPOCHORSERIESORDOVICIAN
  MY_EPOCHORSERIESPERMIAN
  MY_EPOCHORSERIESQUATERNARY
  MY_EPOCHORSERIESRECENT
  MY_EPOCHORSERIESSILURIAN
  MY_EPOCHORSERIESTERTIARY
  MY_EPOCHORSERIESTRIASSIC
}

enum FruitType {
  _
  MY_FRUITTYPEACHENE
  MY_FRUITTYPEBERRY
  MY_FRUITTYPECAPSULE
  MY_FRUITTYPECARYOPSIS
  MY_FRUITTYPECONE
  MY_FRUITTYPEDRUPE
  MY_FRUITTYPEFOLLICLE
  MY_FRUITTYPELEGUME
  MY_FRUITTYPENUT
  MY_FRUITTYPEOTHER
  MY_FRUITTYPEPOME
  MY_FRUITTYPESCHIZOCARP
  MY_FRUITTYPESILIQUA
}

enum IndirectObservationType {
  _
  MY_INDIRECTOBSERVATIONTYPEFECES
  MY_INDIRECTOBSERVATIONTYPESNOWTRACKS
  MY_INDIRECTOBSERVATIONTYPEURINE
  MY_INDIRECTOBSERVATIONTYPEFEASTING
  MY_INDIRECTOBSERVATIONTYPEFOODSTOCK
  MY_INDIRECTOBSERVATIONTYPENONE
}

enum LatestEpochOrHighestSeries {
  _
  MY_EPOCHORSERIESCAMBRIAN
  MY_EPOCHORSERIESCARBONIFEROUS
  MY_EPOCHORSERIESCRETACEOUS
  MY_EPOCHORSERIESDEVONIAN
  MY_EPOCHORSERIESEDIACARAN
  MY_EPOCHORSERIESJURASSIC
  MY_EPOCHORSERIESORDOVICIAN
  MY_EPOCHORSERIESPERMIAN
  MY_EPOCHORSERIESQUATERNARY
  MY_EPOCHORSERIESRECENT
  MY_EPOCHORSERIESSILURIAN
  MY_EPOCHORSERIESTERTIARY
  MY_EPOCHORSERIESTRIASSIC
}

type Measurement {
  beakMillimeters: [Float]
  bodyCentimeters: [Float]
  bodyMillimeters: [Float]
  context: String
  dNAConcentrationNgPerMicroliter: [Float]
  dNARatioOfAbsorbance260And280: [Float]
  dNAVolumeMicroliters: [Float]
  earLengthMillimeters: [Float]
  embryoCount: [Float]
  follicleDiameterMillimeters: [Float]
  footLengthMillimeters: [Float]
  forearmMillimeters: [Float]
  gonadMillimeters: [Float]
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  tailCentimeters: [Float]
  tailMillimeters: [Float]
  tarsusLengthMillimeters: [Float]
  totalLengthCentimeters: [Float]
  totalLengthMillimeters: [Float]
  type: String
  uterineScarCount: [Float]
  weightGrams: [Float]
  weightKilograms: [Float]
  wingMaxMillimeters: [Float]
  wingMillimeters: [Float]
  wingMinMillimeters: [Float]
}

enum MicrobiologicalRiskGroup {
  _
  MY_MICROBIOLOGICALRISKGROUP1
  MY_MICROBIOLOGICALRISKGROUP2
  MY_MICROBIOLOGICALRISKGROUP3
  MY_MICROBIOLOGICALRISKGROUP4
}

enum MovingDirection {
  _
  MY_MOVINGDIRECTIONN
  MY_MOVINGDIRECTIONNNE
  MY_MOVINGDIRECTIONNE
  MY_MOVINGDIRECTIONENE
  MY_MOVINGDIRECTIONE
  MY_MOVINGDIRECTIONESE
  MY_MOVINGDIRECTIONSE
  MY_MOVINGDIRECTIONSSE
  MY_MOVINGDIRECTIONS
  MY_MOVINGDIRECTIONSSW
  MY_MOVINGDIRECTIONSW
  MY_MOVINGDIRECTIONWSW
  MY_MOVINGDIRECTIONW
  MY_MOVINGDIRECTIONWNW
  MY_MOVINGDIRECTIONNW
  MY_MOVINGDIRECTIONNNW
}

enum NativeStatus {
  _
  MY_NATIVE
  MY_NONNATIVE
}

enum NestType {
  _
  MY_NESTTYPETREECAVITY
  MY_NESTTYPETWIG
  MY_NESTTYPENESTBOX
  MY_NESTTYPEBUILDING
  MY_NESTTYPEGROUNDCAVITY
  MY_NESTTYPEOTHER
}

enum PlantStatusCode {
  _
  MY_PLANTSTATUSCODEL
  MY_PLANTSTATUSCODEA
  MY_PLANTSTATUSCODEAV
  MY_PLANTSTATUSCODEAOV
  MY_PLANTSTATUSCODEAN
  MY_PLANTSTATUSCODEANV
  MY_PLANTSTATUSCODEANS
  MY_PLANTSTATUSCODET
  MY_PLANTSTATUSCODETV
  MY_PLANTSTATUSCODETOV
  MY_PLANTSTATUSCODETNV
  MY_PLANTSTATUSCODETNS
  MY_PLANTSTATUSCODEV
  MY_PLANTSTATUSCODEOV
  MY_PLANTSTATUSCODEN
  MY_PLANTSTATUSCODENV
  MY_PLANTSTATUSCODENS
  MY_PLANTSTATUSCODEE
  MY_PLANTSTATUSCODETE
  MY_PLANTSTATUSCODETVE
  MY_PLANTSTATUSCODETOVE
  MY_PLANTSTATUSCODETNVE
  MY_PLANTSTATUSCODETNSE
  MY_PLANTSTATUSCODETN
  MY_PLANTSTATUSCODETNE
  MY_PLANTSTATUSCODER
  MY_PLANTSTATUSCODEC
  MY_PLANTSTATUSCODEH
  MY_PLANTSTATUSCODEG
  MY_PLANTSTATUSCODEF
}

enum PreservationListItem {
  _
  MY_PRESERVATIONPRESSED
  MY_PRESERVATIONDRY
  MY_PRESERVATIONCRITICALPOINTDRYING
  MY_PRESERVATIONPINNED
  MY_PRESERVATIONGLUED
  MY_PRESERVATIONLIQUID
  MY_PRESERVATIONETHANOL
  MY_PRESERVATIONETHANOLPURE
  MY_PRESERVATIONETHANOL70
  MY_PRESERVATIONETHANOL80
  MY_PRESERVATIONETHANOL80PURE
  MY_PRESERVATIONETHANOL96
  MY_PRESERVATIONETHANOLDENATURED
  MY_PRESERVATIONETHANOLFORMALIN
  MY_PRESERVATIONETHANOLEXFORMALIN
  MY_PRESERVATIONFORMALIN
  MY_PRESERVATIONBOUINSOLUTION
  MY_PRESERVATIONPAMPELSFLUID
  MY_PRESERVATIONGLYCEROL
  MY_PRESERVATIONPARAFFIN
  MY_PRESERVATIONMERCURICCHLORIDE
  MY_PRESERVATIONCRYOPRESERVED
  MY_PRESERVATIONFROZEN
  MY_PRESERVATIONFROZENMINUS80C
  MY_PRESERVATIONFREEZEDRIED
  MY_PRESERVATIONGOLDPLATED
  MY_PRESERVATIONACTIVECULTURE
  MY_PRESERVATIONLIVING
  MY_PRESERVATIONSLIDE
  MY_PRESERVATIONSLIDECANADABALSAM
  MY_PRESERVATIONSLIDEEUPARAL
  MY_PRESERVATIONSLIDEPOLYVIOL
  MY_PRESERVATIONSTUFFED
  MY_PRESERVATIONCAST
  MY_PRESERVATIONPLASTINATED
  MY_PRESERVATIONFROZENMINUS80CANDETHANOLMINUS20C
}

enum Provenance {
  _
  MY_PROVENANCEUNKNOWN
  MY_PROVENANCECULTIVATED
  MY_PROVENANCECULTIVATEDUNSURE
  MY_PROVENANCECULTIVATEDPROPAGATEDFROMWILDSOURCE
  MY_PROVENANCEWILDSOURCE
  MY_PROVENANCEWILDSOURCEUNSURE
  MY_PROVENANCEESCAPEDCULTIVATED
  MY_PROVENANCEPROPAGULE
}

enum RecordBasis {
  _
  MY_RECORDBASISPRESERVEDSPECIMEN
  MY_RECORDBASISHUMANOBSERVATION
  MY_RECORDBASISHUMANOBSERVATIONSEEN
  MY_RECORDBASISHUMANOBSERVATIONHEARD
  MY_RECORDBASISHUMANOBSERVATIONHANDLED
  MY_RECORDBASISHUMANOBSERVATIONPHOTO
  MY_RECORDBASISHUMANOBSERVATIONAUDIO
  MY_RECORDBASISHUMANOBSERVATIONVIDEO
  MY_RECORDBASISHUMANOBSERVATIONINDIRECT
  MY_RECORDBASISMACHINEOBSERVATION
  MY_RECORDBASISMACHINEOBSERVATIONPHOTO
  MY_RECORDBASISMACHINEOBSERVATIONVIDEO
  MY_RECORDBASISMACHINEOBSERVATIONAUDIO
  MY_RECORDBASISMACHINEOBSERVATIONGEOLOGGER
  MY_RECORDBASISMACHINEOBSERVATIONSATELLITETRANSMITTER
  MY_RECORDBASISFOSSILSPECIMEN
  MY_RECORDBASISSUBFOSSILSPECIMEN
  MY_RECORDBASISSUBFOSSILSPECIMENAMBERINCLUSION
  MY_RECORDBASISMATERIALSAMPLE
  MY_RECORDBASISMATERIALSAMPLEAIR
  MY_RECORDBASISMATERIALSAMPLESOIL
  MY_RECORDBASISMATERIALSAMPLEWATER
  MY_RECORDBASISMICROBIALSPECIMEN
  MY_RECORDBASISLIVINGSPECIMEN
  MY_RECORDBASISLITERATURE
}

enum RecordPartsListItem {
  _
  MY_RECORDPARTSBONES
  MY_RECORDPARTSANTLER
  MY_RECORDPARTSHEAD
  MY_RECORDPARTSSKULL
  MY_RECORDPARTSSKIN
  MY_RECORDPARTSWING
  MY_RECORDPARTSTAIL
  MY_RECORDPARTSTISSUE
  MY_RECORDPARTSFEATHER
  MY_RECORDPARTSEGG
  MY_RECORDPARTSINTESTINE
  MY_RECORDPARTSGONAD
  MY_RECORDPARTSSEED
  MY_RECORDPARTSNEST
  MY_RECORDPARTSFAECES
  MY_RECORDPARTSFEEDINGMARKS
  MY_RECORDPARTSTRACKS
  MY_RECORDPARTSSCALE
  MY_RECORDPARTSFIN
  MY_RECORDPARTSFULL
  MY_RECORDPARTSPART
  MY_RECORDPARTSACTIVECULTURE
  MY_RECORDPARTSCUTTING
  MY_RECORDPARTSVEGETATIVEPART
  MY_RECORDPARTSFREEZEDRIED
  MY_RECORDPARTSDRYICE
  MY_RECORDPARTSDNA
  MY_RECORDPARTSSHELL
  MY_RECORDPARTSWHOLEPLANT
  MY_RECORDPARTSTISSUECULTURE
  MY_RECORDPARTSMOUNT
  MY_RECORDPARTSSKULLANDBONES
}

enum SeedMaturity {
  _
  MY_SEEDMATURITYIMMATURE
  MY_SEEDMATURITYMATURE
  MY_SEEDMATURITYMIXED
}

enum SeedMorphology {
  _
  MY_SEEDMORPHOLOGYBENT
  MY_SEEDMORPHOLOGYBROAD
  MY_SEEDMORPHOLOGYCAPITATE
  MY_SEEDMORPHOLOGYFOLDED
  MY_SEEDMORPHOLOGYLATERAL
  MY_SEEDMORPHOLOGYLINEARFULLYDEVELOPED
  MY_SEEDMORPHOLOGYLINEARUNDERDEVELOPED
  MY_SEEDMORPHOLOGYPERIPHERAL
  MY_SEEDMORPHOLOGYRUDIMENTARY
  MY_SEEDMORPHOLOGYSPATULATEFULLYDEVELOPED
  MY_SEEDMORPHOLOGYSPATULATEUNDERDEVELOPED
  MY_SEEDMORPHOLOGYUNDIFFERENTIATED
  MY_SEEDMORPHOLOGYINVESTING
}

enum Smell {
  _
  MY_SMELLNOTSMELLED
  MY_SMELLNOSMELLED
  MY_SMELLWEAK
  MY_SMELLMODERATE
  MY_SMELLSTRONG
}

enum SubstrateClassification {
  _
  MY_SUBSTRATEGROUND
  MY_SUBSTRATEGROUNDLOWSHRUBS
  MY_SUBSTRATEGROUNDLICHENS
  MY_SUBSTRATEGROUNDHERBS
  MY_SUBSTRATEGROUNDMOSSES
  MY_SUBSTRATEGROUNDSPHAGNUM
  MY_SUBSTRATEGROUNDGRASSY
  MY_SUBSTRATEGROUNDNEEDLELITTER
  MY_SUBSTRATEGROUNDLEAFLITTER
  MY_SUBSTRATEGROUNDMIXEDLITTER
  MY_SUBSTRATEGROUNDSANDYSOIL
  MY_SUBSTRATEGROUNDGRAVELSOIL
  MY_SUBSTRATEGROUNDCLAYEYSOIL
  MY_SUBSTRATEGROUNDHEATHHUMUS
  MY_SUBSTRATEGROUNDMULL
  MY_SUBSTRATEGROUNDPEAT
  MY_SUBSTRATEGROUNDBURNEDSOIL
  MY_SUBSTRATELIVINGTREE
  MY_SUBSTRATELIVINGTREETRUNK
  MY_SUBSTRATELIVINGTREEBASE
  MY_SUBSTRATELIVINGTREEROOTS
  MY_SUBSTRATELIVINGTREEBRANCH
  MY_SUBSTRATELIVINGTREEDEADBRANCH
  MY_SUBSTRATELIVINGTREEDEADLIMB
  MY_SUBSTRATELIVINGTREELEAF
  MY_SUBSTRATELIVINGTREENEEDLE
  MY_SUBSTRATEDEADWOOD
  MY_SUBSTRATEDEADWOODSTANDINGTREETRUNK
  MY_SUBSTRATEDEADWOODSTANDINGTREEBRANCH
  MY_SUBSTRATEDEADWOODSTANDINGTREEBASE
  MY_SUBSTRATEDEADWOODFALLENTREETRUNK
  MY_SUBSTRATEDEADWOODFALLENTREEBRANCH
  MY_SUBSTRATEDEADWOODUPTURNEDROOTS
  MY_SUBSTRATEDEADWOODDEADROOTS
  MY_SUBSTRATEDEADWOODSTUMP
  MY_SUBSTRATEDEADWOODFALLENBRANCH
  MY_SUBSTRATEDEADWOODCONE
  MY_SUBSTRATEDEADWOODTWIGS
  MY_SUBSTRATEDEADWOODBARK
  MY_SUBSTRATEDEADWOODSAWDUST
  MY_SUBSTRATEDEADWOODPIECEOFWOOD
  MY_SUBSTRATEDEADWOODLOGGINGRESIDUE
  MY_SUBSTRATEDEADWOODLOG
  MY_SUBSTRATEDEADWOODDRIFTWOOD
  MY_SUBSTRATEDEADWOODCONSTRUCTIONWOOD
  MY_SUBSTRATEDUNG
  MY_SUBSTRATECOMPOST
  MY_SUBSTRATELIVINGSHOOT
  MY_SUBSTRATEDEADSHOOT
  MY_SUBSTRATELIVINGFUNGUS
  MY_SUBSTRATEDEADFUNGUS
  MY_SUBSTRATELIVINGANIMAL
  MY_SUBSTRATEDEADANIMAL
  MY_SUBSTRATEROCKSURFACE
  MY_SUBSTRATEDEADNEEDLE
  MY_SUBSTRATEDEADLEAF
}

enum SubstrateDecayStage {
  _
  MY_SUBSTRATEDECAYSTAGEENUM1
  MY_SUBSTRATEDECAYSTAGEENUM2
  MY_SUBSTRATEDECAYSTAGEENUM3
  MY_SUBSTRATEDECAYSTAGEENUM4
  MY_SUBSTRATEDECAYSTAGEENUM5
}

enum SubstrateTreeClassificationListItem {
  _
  MY_SUBSTRATETREECLASSIFICATIONENUM1
  MY_SUBSTRATETREECLASSIFICATIONENUM2
  MY_SUBSTRATETREECLASSIFICATIONENUM3
  MY_SUBSTRATETREECLASSIFICATIONENUM4
  MY_SUBSTRATETREECLASSIFICATIONENUM5
  MY_SUBSTRATETREECLASSIFICATIONENUM6
}

enum Taste {
  _
  MY_TASTENOTTASTED
  MY_TASTENOTASTE
  MY_TASTEWEAK
  MY_TASTEMODERATE
  MY_TASTESTRONG
}

enum TaxonConfidence {
  _
  MY_TAXONCONFIDENCESURE
  MY_TAXONCONFIDENCEUNSURE
  MY_TAXONCONFIDENCESUBSPECIESUNSURE
}

type TypeSpecimen {
  context: String
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions
  type: String

  # Author of the type species
  typeAuthor: String

  # Publication reference for original description or basionyme
  typeBasionymePubl: String

  # Additional information on the type
  typeNotes: String

  # Publication reference for type publication
  typePubl: String

  # ID for the type series, if part of one
  typeSeriesID: String

  # Name of the type species
  typeSpecies: String

  # Is this holotype, paratype, syntype etc...
  typeStatus: TypeStatus

  # Name of the type subspecies
  typeSubspecies: String

  # Author of the type subspecies
  typeSubspeciesAuthor: String

  # Verification whether this really is a type?
  typeVerification: TypeVerification

  # Name of the person who chose the type, preferably in the format "Lastname, firstname"
  typif: String

  # Date when the specimen was chosen as a type
  typifDate: String
}

enum TypeStatus {
  _
  MY_TYPESTATUSTYPE
  MY_TYPESTATUSHOLOTYPE
  MY_TYPESTATUSSYNTYPE
  MY_TYPESTATUSPARATYPE
  MY_TYPESTATUSLECTOTYPE
  MY_TYPESTATUSPARALECTOTYPE
  MY_TYPESTATUSNEOTYPE
  MY_TYPESTATUSALLOTYPE
  MY_TYPESTATUSNEOALLOTYPE
  MY_TYPESTATUSISOTYPE
  MY_TYPESTATUSEPITYPE
  MY_TYPESTATUSISOLECTOTYPE
  MY_TYPESTATUSISOEPITYPE
  MY_TYPESTATUSISONEOTYPE
  MY_TYPESTATUSISOPARATYPE
  MY_TYPESTATUSISOSYNTYPE
  MY_TYPESTATUSORIGINALMATERIAL
  MY_TYPESTATUSCOTYPE
  MY_TYPESTATUSTOPOTYPE
  MY_TYPESTATUSHOMOTYPE
  MY_TYPESTATUSNO
  MY_TYPESTATUSPOSSIBLE
  MY_TYPESTATUSOBSCURE
  MY_TYPESTATUSTYPESTRAIN
  MY_TYPESTATUSPATHOVARREFERENCESTRAIN
}

enum TypeVerification {
  _
  MY_TYPEVERIFICATIONVERIFIED
  MY_TYPEVERIFICATIONUNVERIFIED
  MY_TYPEVERIFICATIONPROBABLE
  MY_TYPEVERIFICATIONDOUBTFUL
}

type UnitFact {
  adultIndividualCount: Int
  autocompleteSelectedTaxonID: String
  context: String
  glowWormMicrohabitat: GlowWormMicrohabitat
  id: String
  individualCountBiotopeA: Int
  individualCountBiotopeB: Int
  individualCountBiotopeC: Int
  individualCountBiotopeD: Int
  individualCountBiotopeE: Int
  individualCountBiotopeF: Int
  individualCountBiotopeG: Int
  individualCountBiotopeH: Int
  individualCountFlock: Int
  individualCountInner: Int
  individualCountOuter: Int
  juvenileIndividualCount: Int
  lineTransectObsType: LineTransectObsType
  lineTransectRouteFieldType: LineTransectRouteFieldType
  lolifeDroppingsCount: LolifeDroppingsCount
  lolifeDroppingsQuality: LolifeDroppingsQuality
  lolifeDroppingsType: LolifeDroppingsType
  lolifeNestTree: LolifeNestTree
  pairCountInner: Int
  pairCountOuter: Int
  pointCountFlock: String
  runningWaterInVicinity: Boolean
  type: String
  waterbirdFemale: WaterbirdFemale
  waterbirdJuvenileAgeClass: WaterbirdJuvenileAgeClass
  waterbirdJuvenileCountAccurate: Boolean
  waterbirdObserverOpinionSelectedCensus: Boolean
  waterbirdPairCountOpinionReasoning: WaterbirdPairCountOpinionReasoning
}

enum GlowWormMicrohabitat {
  _
  MY_GLOWWORMMICROHABITATENUM1
  MY_GLOWWORMMICROHABITATENUM2
  MY_GLOWWORMMICROHABITATENUM3
  MY_GLOWWORMMICROHABITATENUM4
  MY_GLOWWORMMICROHABITATENUM5
  MY_GLOWWORMMICROHABITATENUM6
  MY_GLOWWORMMICROHABITATENUMOTHER
}

enum LineTransectObsType {
  _
  MY_LINETRANSECTOBSTYPESONG
  MY_LINETRANSECTOBSTYPEOTHERSOUND
  MY_LINETRANSECTOBSTYPESEEN
  MY_LINETRANSECTOBSTYPESEENMALE
  MY_LINETRANSECTOBSTYPESEENFEMALE
  MY_LINETRANSECTOBSTYPEFLYINGOVERHEAD
  MY_LINETRANSECTOBSTYPEFLOCK
  MY_LINETRANSECTOBSTYPEFLOCKFLYINGOVERHEAD
  MY_LINETRANSECTOBSTYPESEENPAIR
  MY_LINETRANSECTOBSTYPESEENBROOD
  MY_LINETRANSECTOBSTYPESEENNEST
  MY_LINETRANSECTOBSTYPEUNKNOWN
}

enum LineTransectRouteFieldType {
  _
  MY_LINETRANSECTROUTEFIELDTYPEINNER
  MY_LINETRANSECTROUTEFIELDTYPEOUTER
}

enum LolifeDroppingsCount {
  _
  MY_LOLIFEDROPPINGSCOUNT0
  MY_LOLIFEDROPPINGSCOUNT1
  MY_LOLIFEDROPPINGSCOUNT2
  MY_LOLIFEDROPPINGSCOUNT25
  MY_LOLIFEDROPPINGSCOUNT3
  MY_LOLIFEDROPPINGSCOUNT4
}

enum LolifeDroppingsQuality {
  _
  MY_LOLIFEDROPPINGSQUALITY1
  MY_LOLIFEDROPPINGSQUALITY2
}

enum LolifeDroppingsType {
  _
  MY_LOLIFEDROPPINGSTYPEROCK
  MY_LOLIFEDROPPINGSTYPETREE
  MY_LOLIFEDROPPINGSTYPETREEGROUP
  MY_LOLIFEDROPPINGSTYPEOTHER
}

enum LolifeNestTree {
  _
  MX_38590
  MX_37812
  MX_37999
  MX_37993
  MX_38010
  MX_38008
  MY_LOLIFENESTTREEOTHER
}

enum WaterbirdFemale {
  _
  MY_WATERBIRDFEMALEENUMYES
  MY_WATERBIRDFEMALEENUMNO
  MY_WATERBIRDFEMALEENUMLONELYPANICKING
}

enum WaterbirdJuvenileAgeClass {
  _
  MY_WATERBIRDJUVENILEAGECLASSIA
  MY_WATERBIRDJUVENILEAGECLASSIB
  MY_WATERBIRDJUVENILEAGECLASSIC
  MY_WATERBIRDJUVENILEAGECLASSIIA
  MY_WATERBIRDJUVENILEAGECLASSIIB
  MY_WATERBIRDJUVENILEAGECLASSIIC
  MY_WATERBIRDJUVENILEAGECLASSIIIA
  MY_WATERBIRDJUVENILEAGECLASSUNKNOWN
}

enum WaterbirdPairCountOpinionReasoning {
  _
  MY_WATERBIRDPAIRCOUNTOPINIONREASONINGENUM1
  MY_WATERBIRDPAIRCOUNTOPINIONREASONINGENUM2
  MY_WATERBIRDPAIRCOUNTOPINIONREASONINGENUM3
  MY_WATERBIRDPAIRCOUNTOPINIONREASONINGENUMOTHER
}

type UnitGathering {
  context: String
  dateBegin: String
  dateEnd: String
  geometry: JSON

  # Informal description of the habitat.
  habitatDescription: String
  habitatIUCN: String
  id: String

  # Type of substrate or name of substrate species.
  substrate: String
  type: String
}

enum Wild {
  _
  MY_WILDWILD
  MY_WILDUNKNOWN
  MY_WILDNONWILD
}

enum Status3 {
  _
  MY_STATUSOK
  MY_STATUSMISSING
  MY_STATUSUNRECOVERABLE
  MY_STATUSLOST
  MY_STATUSDONATED
  MY_STATUSDEPOSITED
  MY_STATUSDEACCESSIONED
  MY_STATUSDISCARDED
  MY_STATUSSPENT
  MY_STATUSDESTROYED
  MY_STATUSUNDEFINED
  MY_STATUSAXENIC
  MY_STATUSNONAXENIC
  MY_STATUSNOTAVAILABLE
  MY_STATUSDEAD
  MY_STATUSNOVOUCHERRETAINED
}

enum VerificationStatusListItem {
  _
  MY_VERIFICATIONSTATUSOK
  MY_VERIFICATIONSTATUSVERIFY
  MY_VERIFICATIONSTATUSCOMPLETE
  MY_VERIFICATIONSTATUSGEOREFERENCE
  MY_VERIFICATIONSTATUSDET
  MY_VERIFICATIONSTATUSCHECKID
  MY_VERIFICATIONSTATUSVERIFYCOORDINATES
}

type DownloadRequest2 {
  apiKeyExpires: String
  approximateResultSize: Int!
  collectionId: [String]
  completed: Boolean!
  context: String
  created: String
  createdFile: String
  createdFileSize: String
  dataUsePurpose: String
  downloadFormat: String
  downloadInclude: [String]
  downloadType: String!
  downloaded: [String]
  email: String
  failed: Boolean
  failureReason: String
  filter: [String]!
  id: String
  locale: String
  person: String
  requested: String!
  source: String!
  type: String
  warehouse: String!
}

type Endangerment2 {
  context: String
  endangerment: Endangerment3!
  herboSortOrder: Int
  id: String
  sortOrder: Int
  type: String
}

enum Endangerment3 {
  MKV_ENDANGERMENTREASONP
  MKV_ENDANGERMENTREASONKE
  MKV_ENDANGERMENTREASONH
  MKV_ENDANGERMENTREASONKU
  MKV_ENDANGERMENTREASONR
  MKV_ENDANGERMENTREASONKS
  MKV_ENDANGERMENTREASONPM
  MKV_ENDANGERMENTREASONPR
  MKV_ENDANGERMENTREASONN
  MKV_ENDANGERMENTREASONM
  MKV_ENDANGERMENTREASONMP
  MKV_ENDANGERMENTREASONMV
  MKV_ENDANGERMENTREASONMK
  MKV_ENDANGERMENTREASONML
  MKV_ENDANGERMENTREASONO
  MKV_ENDANGERMENTREASONVR
  MKV_ENDANGERMENTREASONKH
  MKV_ENDANGERMENTREASONI
  MKV_ENDANGERMENTREASONS
  MKV_ENDANGERMENTREASONKIL
  MKV_ENDANGERMENTREASONRIS
  MKV_ENDANGERMENTREASONKV
  MKV_ENDANGERMENTREASONU
  MKV_ENDANGERMENTREASONVIE
  MKV_ENDANGERMENTREASONMUU
  MKV_ENDANGERMENTREASONT
}

type Event3 {
  agent: String

  # Enter the amount in the branch as n, addition to the previously given amount as +n or reduction as -n
  amount: String
  amountEstimationUnit: String

  # ID for the accossiated branch
  branchID: String!
  context: String
  date: String
  eRH: String
  estimatedSeedQuantity: Int
  eventType: EventType!
  germinationConditions: String
  germinationPercentage: Int
  germinationRate: Float
  id: String
  lifeStage: LifeStage2
  notes: String
  numberOfSeedsEmpty: Int
  numberOfSeedsFull: Int
  numberOfSeedsInfested: Int
  numberOfSeedsMouldy: Int
  numberOfSeedsPartFull: Int
  numberOfSeedsTested: Int
  percentageSeedsFull: Int
  seedsExchangedInstitution: String
  testPassed: Boolean
  type: String
  viabilityPercentage: Int
}

enum EventType {
  MY_EVENTTYPEDISCARDED
  MY_EVENTTYPEDONATING
  MY_EVENTTYPEINVENTORY
  MY_EVENTTYPEMARKEDDEAD
  MY_EVENTTYPEOCCASIONALREMARK
  MY_EVENTTYPETEMPORARYPLACEMENT
  MY_EVENTTYPEPLANTING
  MY_EVENTTYPEPLANTEDBACKTOWILD
  MY_EVENTTYPEPOLLINATION
  MY_EVENTTYPEPRICKINGOUT
  MY_EVENTTYPEPOTTING
  MY_EVENTTYPEPROPAGATION
  MY_EVENTTYPEPROPAGATIONMATERIALCOLLECTED
  MY_EVENTTYPEPRUNING
  MY_EVENTTYPESOWING
  MY_EVENTTYPESTORING
  MY_EVENTTYPETRANSFERRING
  MY_EVENTTYPEOTHER
  MY_EVENTTYPEATLANTIS
  MY_EVENTTYPECLEANING
  MY_EVENTTYPEQUANTITYESTIMATION
  MY_EVENTTYPECUTTESTING
  MY_EVENTTYPEDRYING
  MY_EVENTTYPEGERMINATIONTESTING
  MY_EVENTTYPEGERMINATIONRETESTING
  MY_EVENTTYPEGERMINATIONCONTROLLING
  MY_EVENTTYPETZTESTING
  MY_EVENTTYPESEEDEXCHANGE
  MY_EVENTTYPETPUSKA
}

enum LifeStage2 {
  _
  MY_PLANTLIFESTAGESTERILE
  MY_PLANTLIFESTAGEFERTILE
  MY_PLANTLIFESTAGESEED
  MY_PLANTLIFESTAGESPROUT
  MY_PLANTLIFESTAGEBUD
  MY_PLANTLIFESTAGEFLOWER
  MY_PLANTLIFESTAGEWITHEREDFLOWER
  MY_PLANTLIFESTAGERIPENINGFRUIT
  MY_PLANTLIFESTAGERIPEFRUIT
  MY_PLANTLIFESTAGEDEADSPROUT
  MY_PLANTLIFESTAGESUBTERRANEAN
}

type Field2 {
  context: String
  fields: [Field2]
  filters: JSON
  id: String
  label: String
  name: String
  notices: JSON
  options: JSON
  required: Boolean
  type: String
  ui: JSON
  validators: JSON
  value: String
  warnings: JSON
}

type Fieldset2 {
  context: String
  id: String
  type: String
}

type Form2 {
  baseFormID: String
  category: Category

  # Id for the collection to where observation useing this form are connected
  collectionID: String

  # The schema context of the form (e.g. MY.document, MNP.namedPlace...)
  context: String
  description: String
  fields: [Field2]

  # Use fields, uiSchema and translations from the form
  fieldsFormID: String
  id: String
  language: Language
  logo: String
  name: String
  options: FormOptions
  patch: [JSON]
  shortDescription: String

  # Shown at sidebar and & as browser title
  shortTitle: String
  supportedLanguage: [SupportedLanguageListItem]
  title: String
  translations: JSON
  type: String
  uiSchema: JSON
}

enum Category {
  _
  MHL_CATEGORYGENERIC
  MHL_CATEGORYSURVEY
  MHL_CATEGORYTAXONOMICGROUP
  MHL_CATEGORYBIRDMONITORINGSCHEMES
  MHL_CATEGORYCITIZENSCIENCE
  MHL_CATEGORYBIOMONCOMPLETELISTS
}

enum Language {
  _
  EN
  FI
  SV
}

type FormOptions {
  about: MultiLang

  # Form admin can lock documents. Locked documents can't be edited
  adminLockable: Boolean

  # Allows usage in spreadsheet upload component
  allowExcel: Boolean

  # Allows creating templates from documents
  allowTemplate: Boolean

  # Label for the cancel button at the form footer
  cancelLabel: String
  context: String

  # Has dataset about page
  dataset: Boolean

  # Theme form introduction page doesn't show description for the form permission request button
  disableRequestDescription: Boolean

  # Prevent sending documents & named places
  disabled: Boolean

  # Only if has named places. All documents for admin
  displayOwnSubmissions: Boolean

  # The users can see all the documents with the form's collection ID instead of just their own
  documentsViewableForAll: Boolean

  # Label for the draft button at the form footer
  draftLabel: String
  editLabel: String

  # Units without count aren't considered in laji.fi viewer (including document viewers and datatables)
  emptyOnNoCount: Boolean

  # Excludes from the Vihko excel tools
  excludeFromGlobalExcel: Boolean
  footer: FormFooter

  # Label for the own submissions list at the header of document form
  formOwnSubmissionsLabel: String

  # Shown at form permission intro page. Allows HTML
  formPermissionDescription: String
  forms: [String]

  # The form has administrators. Administrators can handle user access permissions and admin roles for all forms with the collectionID of the form.
  hasAdmins: Boolean

  # Hides the cancel button at form footer
  hideCancelButton: Boolean
  hideDraftButton: Boolean

  # Hides the save/edit button at form footer
  hideSaveButton: Boolean

  # Terms of Service is hidden at the header of observation form
  hideTES: Boolean

  # Hides the draft button at form footer
  hideTempButton: Boolean
  id: String
  instructions: MultiLang

  # Form UI has a greeting page for convenient mobile usage
  mobile: Boolean
  namedPlaceOptions: FormNamedPlaceOptions

  # The title label for theme form sidebar
  navigationTitle: String

  # Available actions for own submissions (only on the own submissions page). Defaults to ['edit', 'view', 'download', 'stats', 'delete']
  ownSubmissionsActions: [String]

  # Shown at sidebar link and title of all submissions page
  ownSubmissionsAdminTitle: String

  # Columns for own submissions (only on the own submissions page). Defaults to ['dateEdited', 'dateObserved', 'taxon', 'namedPlaceName', 'observer', 'id']
  ownSubmissionsColumns: [String]

  # Shown at sidebar link and title of all submissions page
  ownSubmissionsTitle: String

  # Periods that the "NoExistingGatheringsInNamedPlace" validation uses
  periods: [String]
  prepopulateWithInformalTaxonGroups: [String]
  prepopulateWithTaxonSets: String
  prepopulatedDocument: Document2
  printType: PrintType

  # Users need to have permission to access the form
  restrictAccess: RestrictAccess
  resultServiceType: ResultServiceType

  # Message shown when document save failed
  saveErrorMessage: String

  # Label for the save button at the form footer
  saveLabel: String

  # Message shown when document was successfully saved
  saveSuccessMessage: String

  # Message shown when document draft was successfully saved
  saveTempSuccessMessage: String
  season: FormSeason

  # Makes the documents reported with the form secondary
  secondaryCopy: Boolean

  # Overrides MHL.shortTitle usage
  shortTitleFromCollectionName: Boolean

  # Sub forms are shown only if they have this property
  sidebarFormLabel: String

  # Has only a form page, no sidebar
  simple: Boolean

  # Documents can't have data not defined in form fields. Defaults to true.
  strict: Boolean

  # Label for the draft button at the form footer
  tempLabel: String
  type: String

  # Makes the form use named places
  useNamedPlaces: Boolean

  # Uses schema comments as form help texts
  useSchemaCommentsAsHelpTexts: Boolean
  viewerType: ViewerType
  warnEditingOldDocument: Boolean

  # Duration in ISO 8601 duration format. Defaults to P1W (one week)
  warnEditingOldDocumentDuration: Boolean
}

type FormFooter {
  context: String

  # Text to show for footer
  footerDescription: String

  # Key is an image URI, value is the URI of the page clicking the image opens
  footerLogos: JSON
  id: String
  type: String
}

type FormNamedPlaceOptions {
  # Named place viewer shows button to copy the URL for the named place viewer
  adminShowCopyLink: Boolean

  # Form users can create new named places for the form
  allowAddingPublic: Boolean

  # Help text for bird association filter
  birdAssociationAreaHelp: String

  # Description shown at named place choose page. Allows HTML.
  chooseDescription: String
  context: String

  # The latest document is copied to named place's prepopulatedDocument. if documents date is same or after the current prepopulated document's date, or if prepopulated document doesn't have date. Date is checked from gatheringEvent or from gatherings
  copyLatestDocumentToNamedPlace: Boolean

  # Description shown above named place form when creating new named place. Allows HTML.
  createDescription: String

  # Label for new named place creation button at named place choose page
  createNewButtonLabel: String

  # Label for text before new named place creation button at named place choose page
  createNewButtonPrependingTextLabel: String

  # Theme own submissions page uses local document viewer (that shows more accurate data)
  documentListUseLocalDocumentViewer: Boolean

  # Forces local document viewer to show these fields
  documentViewerForcedFields: [String]

  # The path of geometry that document viewer should show
  documentViewerGatheringGeometryJSONPath: [String]

  # Document viewer zooms to data instead of locked zoom level
  documentViewerZoomToData: Boolean

  # Admin label for named place viewer's document list
  earlierLabel: String

  # Description shown at top of page when editing named place
  editDescription: String

  # The named place UI allows filtering by bird association area
  filterByBirdAssociationArea: Boolean

  # The named place UI allows filtering by municipality
  filterByMunicipality: Boolean

  # The named place UI allows filtering by tags
  filterByTags: Boolean

  # When recording a document for a named place, the named place's data of these fields will be shown at the top of the page (defaults to ["alternativeIDs", "name", "municipality"]
  headerFields: [String]

  # On named place chooser view, map tab is hidden
  hideMapTab: Boolean
  id: String

  # Named places will be fetched with units included (hard coded to work only for HR.2049)
  includeUnits: Boolean

  # Fields that named place viewer shows (if not defined will be digged from uiSchema["ui:options"].fieldsScopes[form collectionID])
  infoFields: [String]

  # Label for named place viewer last census
  lastCensusLabel: String

  # Overrides labels for named place list column headers
  listColumnNameMapping: JSON

  # List of columns visible in the list view
  listColumns: [String]
  listColumnsMultisort: Boolean

  # Label for named place chooser list tab
  listLabel: String
  mapCluster: Boolean

  # Overlays that named place chooser map should show
  mapOverlayNames: [String]

  # Tilelayer name that named place chooser map should show
  mapTileLayerName: String

  # User label for named place viewer's document list
  myEarlierLabel: String

  # Form ID of named place form (defaults to MHL.36)
  namedPlaceFormID: String

  # Fields that named places list shows.
  namedPlaceList: [String]

  # When a new named place is created, the prepopulatedDocument will be populated according to this.
  prepopulatedDocumentFields: JSON

  # Label for print button of named place viewer
  printLabel: String
  releaseLabel: String
  reservableLabel: String

  # Places are reservable if defined. Value defines when the reservation should expire in ISO-8601. Example: ${year}-10-12
  reservationUntil: String
  reservedLabel: String

  # Named place list shows legend for the row colors
  showLegendList: Boolean

  # Named place chooser view starts with map tab instead of list
  startWithMap: Boolean
  type: String

  # Instead of populating observation form with prepopulatedDocument, it is populated with acceptedDocument. Admin can change the acceptedDocument from observation list
  useAcceptedDocument: Boolean

  # Named place viewer label for button for recording new observation
  useLabel: String

  # Named place chooser map is initialized with data fitted in view.
  zoomToData: Boolean
}

enum PrintType {
  _
  MHL_PRINTTYPELINETRANSECT
}

enum RestrictAccess {
  _
  MHL_RESTRICTACCESSSTRICT
  MHL_RESTRICTACCESSLOOSE
}

enum ResultServiceType {
  _
  MHL_RESULTSERVICETYPELINETRANSECT
  MHL_RESULTSERVICETYPENAFI
  MHL_RESULTSERVICETYPEBIRDPOINTCOUNT
  MHL_RESULTSERVICETYPEWINTERBIRDCOUNT
  MHL_RESULTSERVICETYPESYKEINSECTPROJECTS
  MHL_RESULTSERVICETYPEINVASIVECONTROL
  MHL_RESULTSERVICETYPECOMPLETELISTS
  MHL_RESULTSERVICETYPEBIRDCOUNT
}

type FormSeason {
  context: String

  # End of season
  end: String
  id: String

  # Start of season
  start: String
  type: String
}

enum ViewerType {
  _
  MHL_VIEWERTYPELINETRANSECT
  MHL_VIEWERTYPEBIRDPOINTCOUNT
}

enum SupportedLanguageListItem {
  _
  EN
  FI
  SV
}

type FormInstructions2 {
  context: String
  id: String
  type: String
}

type FormPermission2 {
  admins: [String]
  collectionID: String!
  context: String
  editors: [String]
  id: String
  permissionRequests: [String]
  type: String
}

type FormPermissionPerson2 {
  admins: [String]
  context: String
  editors: [String]
  id: String
  permissionRequests: [String]
  personID: String!
  type: String
}

type FormPermissionSingle2 {
  collectionID: String!
  context: String
  id: String
  type: TypeOfThePermission
  userID: String
}

enum TypeOfThePermission {
  _
  MFP_TYPEADMIN
  MFP_TYPEEDITOR
  MFP_TYPEACCESSREQUEST
}

type Habitat3 {
  context: String
  habitat: ElinympRist!
  habitatSpecificType: [HabitatSpecificTypeListItem]
  herboSortOrder: Int
  id: String
  sortOrder: Int
  type: String
}

enum ElinympRist {
  MKV_HABITATM
  MKV_HABITATMK
  MKV_HABITATMKK
  MKV_HABITATMKT
  MKV_HABITATML
  MKV_HABITATMLT
  MKV_HABITATMLK
  MKV_HABITATMT
  MKV_HABITATMTL
  MKV_HABITATS
  MKV_HABITATSL
  MKV_HABITATSLA
  MKV_HABITATSLR
  MKV_HABITATSLK
  MKV_HABITATSN
  MKV_HABITATSNK
  MKV_HABITATSNR
  MKV_HABITATSR
  MKV_HABITATSRK
  MKV_HABITATSRR
  MKV_HABITATSK
  MKV_HABITATSKK
  MKV_HABITATSKR
  MKV_HABITATV
  MKV_HABITATVI
  MKV_HABITATVIK
  MKV_HABITATVIM
  MKV_HABITATVIS
  MKV_HABITATVIH
  MKV_HABITATVIE
  MKV_HABITATVIP
  MKV_HABITATVS
  MKV_HABITATVSK
  MKV_HABITATVSR
  MKV_HABITATVA
  MKV_HABITATVJ
  MKV_HABITATVP
  MKV_HABITATVK
  MKV_HABITATVL
  MKV_HABITATR
  MKV_HABITATRI
  MKV_HABITATRIM
  MKV_HABITATRIMT
  MKV_HABITATRIML
  MKV_HABITATRIP
  MKV_HABITATRIN
  MKV_HABITATRIL
  MKV_HABITATRIR
  MKV_HABITATRIS
  MKV_HABITATRIH
  MKV_HABITATRIT
  MKV_HABITATRJ
  MKV_HABITATRJM
  MKV_HABITATRJMT
  MKV_HABITATRJML
  MKV_HABITATRJP
  MKV_HABITATRJN
  MKV_HABITATRJL
  MKV_HABITATRJR
  MKV_HABITATRJS
  MKV_HABITATRJH
  MKV_HABITATRJT
  MKV_HABITATK
  MKV_HABITATKK
  MKV_HABITATKS
  MKV_HABITATKR
  MKV_HABITATKL
  MKV_HABITATKM
  MKV_HABITATT
  MKV_HABITATTK
  MKV_HABITATTN
  MKV_HABITATTU
  MKV_HABITATTP
  MKV_HABITATTL
  MKV_HABITATTLL
  MKV_HABITATTLK
  MKV_HABITATTLS
  MKV_HABITATTLR
  MKV_HABITATTL_
  MKV_HABITATTS
  MKV_HABITATTJ
  MKV_HABITATTV
  MKV_HABITATTA
  MKV_HABITATI
  MKV_HABITATIN
  MKV_HABITATIT
  MKV_HABITATIH
  MKV_HABITATIK
  MKV_HABITATIO
  MKV_HABITATIV
  MKV_HABITATIP
  MKV_HABITATIU
  MKV_HABITATIR
  MKV_HABITATU
}

enum HabitatSpecificTypeListItem {
  _
  MKV_HABITATSPECIFICTYPEV
  MKV_HABITATSPECIFICTYPEH
  MKV_HABITATSPECIFICTYPEP
  MKV_HABITATSPECIFICTYPEJ
  MKV_HABITATSPECIFICTYPEPAK
  MKV_HABITATSPECIFICTYPEVAK
  MKV_HABITATSPECIFICTYPERA
  MKV_HABITATSPECIFICTYPEKA
  MKV_HABITATSPECIFICTYPEKE
  MKV_HABITATSPECIFICTYPECA
}

type Image2 {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  fullURL: String!
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]
  largeURL: String!

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  originalFilename: String
  originalURL: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  squareThumbnailURL: String!
  taxonDescriptionCaption: MultiLang
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
}

type Individual2 {
  context: String
  dcBibliographicCitation: MultiLang
  deleted: Boolean
  description: MultiLang
  descriptionURL: MultiLang
  hasPublicLocations: Boolean
  id: String
  images: [String]
  intellectualRights: IntellectualRights!
  nickname: String
  ownerPerson: [String]
  ringID: String
  taxon: String
  type: String
}

type InformalTaxonGroup2 {
  context: String

  # If this is true, the group is considered a root even if it has parents. For example Fishes is part of Water animals but still is wanted to be a root by itself.
  explicitlyDefinedRoot: Boolean
  hasSubGroup: [String]
  id: String
  name: MultiLang!
  type: String
}

type InformationSystem2 {
  allowedDatawarehouseOverridingSourceId: [String]
  context: String
  description: MultiLang!
  documentation: String!
  id: String
  isAllowedToQueryPrivateWarehouse: Boolean
  isWarehouseSource: Boolean
  lajiAuthLoginRedirectURI: String
  maintainingOrganization: String!
  name: MultiLang!
  personResponsible: String!
  publicity: Publicity!
  state: State!
  transactionApiURL: String!
  type: Type2!
  uRI: String!
}

enum Publicity {
  KE_INUSEBYLUOMUS
  KE_INPUBLICUSE
  KE_ADMINONLY
  KE_THIRDPARTY
}

enum State {
  KE_PRODUCTIONSTATE
  KE_DEVELOPMENTSTATE
  KE_ABANDONEDSTATE
}

enum Type2 {
  KE_WEBAPPLICATION
  KE_WEBSERVICE
  KE_SOFTWARECOMPONENT
  KE_PROGRAM
  KE_DATABASE
  KE_HARDWARE
  KE_SERVER
  KE_MOBILEAPP
}

type IucnRedListEvaluation2 {
  actionNotes: String
  borderGain: Boolean
  borderGainNotes: String
  context: String
  countOfOccurrencesMax: String
  countOfOccurrencesMin: String
  countOfOccurrencesNotes: String

  # <p> <b>A1</b>	Havaittu, arvioitu, päätelty tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 90 %:lla, erittäin uhanalaisilla vähintään 70 %:lla ja vaarantuneilla vähintään 50 %:lla viimeisten kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso) tilanteessa, jossa pienenemisen syyt ovat selvästi peruttavissa JA tunnettuja JA loppuneita, perustuen johonkin seuraavista vaihtoehdoista: </p> <ul><li><b>(a)</b> suora havainto</li> <li><b>(b)</b> taksonille käyttökelpoinen runsausindeksi</li> <li><b>(c)</b> esiintymisalueen tai levinneisyysalueen pieneneminen ja/tai elinympäristön laadun huonontuminen</li> <li><b>(d)</b> todellinen tai mahdollinen hyödyntäminen</li> <li><b>(e)</b> vieraiden taksonien, risteytymisen, tautien, saasteiden, kilpailijoiden tai loisten haitalliset vaikutukset.</li></ul> <p> <b>A2</b>	Havaittu, arvioitu, päätelty tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 80 %:lla, erittäin uhanalaisilla vähintään 50 %:lla ja vaarantuneilla vähintään 30 %:lla viimeisten kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso) tilanteessa, jossa pieneneminen ja sen syyt eivät ehkä ole loppuneet TAI niitä ei tunneta TAI ne eivät ehkä ole peruttavissa, perustuen yllä oleviin vaihtoehtoihin <b>(a)–(e)</b>. </p> <p> <b>A3</b>	Äärimmäisen uhanalaisilla vähintään 80 %, erittäin uhanalaisilla vähintään 50 % ja vaarantuneilla vähintään 30 % populaation pieneneminen, jonka ennustetaan tai epäillään tapahtuvan tulevien kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso, korkeintaan 100 vuotta), perustuen yllä oleviin vaihtoehtoihin <b>(b)–(e)</b>. </p> <p> <b>A4</b>	Havaittu, arvioitu, päätelty, ennustettu tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 80 %:lla, erittäin uhanalaisilla vähintään 50 %:lla ja vaarantuneilla vähintään 30 %:lla kymmenen vuoden tai kolmen sukupolven ajanjaksolla (valitaan pitempi; tulevaisuuteen maksimi 100 vuotta), johon sisältyy sekä mennyttä että tulevaa, ja pieneneminen ja sen syyt eivät ole loppuneet TAI niitä ei tunneta TAI ne eivät ehkä ole peruttavissa, perustuen yllä oleviin vaihtoehtoihin <b>(a)–(e)</b>. </p>
  criteriaA: String
  criteriaANotes: String

  # <p> Maantieteellinen alue tarkasteltuna joko
  # levinneisyysalueen (B1) tai esiintymisalueen (B2) tai
  # molempien mukaan.</p>
  #
  # <p>
  # <b>B1</b>	Levinneisyysalueen arvioidaan olevan äärimmäisen
  # uhanalaisilla alle 100 km², erittäin uhanalaisilla alle 5 000
  # km², vaarantuneilla alle 20 000 km² ja vähintään kaksi kohdista
  # a–c täyttyy:
  # </p>
  # <p>
  # <b>B1a.</b> esiintyminen on voimakkaasti pirstoutunut TAI äärimmäisen 
  # uhanalaisilla vain yksi tai erittäin uhanalaisilla enintään viisi tai 
  # vaarantuneilla enintään kymmenen esiintymispaikkaa tunnetaan
  # </p>
  # <p>
  # <b>B1b.</b> havaittu, päätelty tai ennustettu jatkuva väheneminen
  # joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> soveliaan elinympäristön määrä ja/tai
  # laatu</li>
  # <li><b>(iv)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(v)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  #
  # <p>
  # <b>B1c.</b> erittäin suuret vaihtelut joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(iv)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  #
  #
  # <p>
  # <b>B2</b>	Esiintymisalueen arvioidaan olevan äärimmäisen
  # uhanalaisilla alle 10 km², erittäin uhanalaisilla alle 500 km²,
  # vaarantuneilla alle 2 000 km² ja vähintään kaksi kohdista
  # a–c täyttyy:
  # </p>
  # <p>
  # <b>B2a.</b> esiintyminen on voimakkaasti pirstoutunut TAI äärimmäisen 
  # uhanalaisilla vain yksi tai erittäin uhanalaisilla enintään viisi tai 
  # vaarantuneilla enintään kymmenen esiintymispaikkaa tunnetaan
  # </p>
  # <p>
  # <b>B2b.</b> havaittu, päätelty tai ennustettu jatkuva väheneminen
  # joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> soveliaan elinympäristön määrä ja/tai laatu</li>
  # <li><b>(iv)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(v)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  #
  # <p>
  # <b>B2c.</b> erittäin suuret vaihtelut joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(iv)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  criteriaB: String
  criteriaBNotes: String

  # <p>Pieni ja jatkuvasti taantuva populaatio	Populaatio on arvioitu pienemmäksi kuin äärimmäisen
  # uhanalaisilla 250, erittäin uhanalaisilla 2 500 ja vaarantuneilla
  # 10 000 lisääntymiskykyistä yksilöä sekä jompikumpi
  # seuraavista:</p>
  #
  # <p>
  # <b>C1</b>	Äärimmäisen uhanalaisilla vähintään 25 %:n jatkuva
  # väheneminen kolmen vuoden tai yhden sukupolven aikana
  # (valitaan pitempi jakso, tulevaisuuteen korkeintaan
  # 100 vuotta), erittäin uhanalaisilla vähintään 20 %:n jatkuva
  # väheneminen viiden vuoden tai kahden sukupolven aikana
  # (valitaan pitempi jakso, tulevaisuuteen korkeintaan
  # 100 vuotta) ja vaarantuneilla vähintään 10 %:n jatkuva
  # väheneminen kymmenen vuoden tai kolmen sukupolven
  # aikana (valitaan pitempi jakso, tulevaisuuteen korkeintaan
  # 100 vuotta)
  # </p>
  #
  # <p>
  # <b>C2</b>	Havaittu, ennustettu tai päätelty lisääntymiskykyisten
  # yksilöiden määrän jatkuva väheneminen JA vähintään
  # toinen seuraavista (a–b):
  # </p>
  # <p>
  # <b>C2a.</b> populaation rakenne joko:
  # </p>
  # <ul><li>
  # <b>(i)</b> missään osapopulaatiossa ei ole äärimmäisen
  # uhanalaisilla yli 50, erittäin uhanalaisilla yli
  # 250 ja vaarantuneilla yli 1 000 lisääntymiskykyistä
  # yksilöä</li>
  # <li>
  # <b>(ii)</b> äärimmäisen uhanalaisilla vähintään 90 % ja
  # erittäin uhanalaisilla vähintään 95 % lisääntymiskykyisistä
  # yksilöistä sekä vaarantuneilla
  # kaikki yksilöt ovat yhdessä osapopulaatiossab. erittäin suuret vaihtelut lisääntymiskykyisten
  # yksilöiden määrässä
  # </li></ul>
  #
  # <p>
  # <b>C2b.</b> erittäin suuret vaihtelut lisääntymiskykyisten
  # yksilöiden määrässä
  # </p>
  criteriaC: String
  criteriaCNotes: String

  # <p>Populaation arvioitu koko on äärimmäisen uhanalaisilla
  # alle 50 ja erittäin uhanalaisilla alle 250 lisääntymiskykyistä
  # yksilöä. Vaarantuneilla populaatio on hyvin pieni tai
  # rajoittunut jommankumman vaihtoehdon mukaan:</p>
  # <p>
  # <b>D1</b>	Arvioitu populaatiokoko on alle 1 000 lisääntymiskykyistä
  # yksilöä.
  # </p>
  #
  # <p>
  # <b>D2</b>	Populaatiolla on hyvin rajoittunut esiintymisalue
  # (yleensä alle 20 km²) tai vähän esiintymispaikkoja (yleensä
  # korkeintaan viisi), ja populaatio on siten altis äkillisille
  # ja ennustamattomille ihmistoiminnan tai sattuman vaikutuksille
  # ja voi lyhyessä ajassa muuttua äärimmäisen
  # uhanalaiseksi tai jopa hävitä.
  # </p>
  criteriaD: String
  criteriaDNotes: String

  # <p>Kvantitatiivisen analyysin perusteella todennäköisyys
  # hävitä luonnosta on äärimmäisen uhanalaisilla vähintään
  # 50 % kymmenen vuoden tai kolmen sukupolven aikana
  # (valitaan pitempi, korkeintaan 100 vuotta), erittäin
  # uhanalaisilla vähintään 20 % kahdenkymmenen vuoden
  # tai viiden sukupolven aikana (valitaan pitempi, korkeintaan
  # 100 vuotta) ja vaarantuneilla vähintään 10 % sadan
  # vuoden aikana.Kvantitatiivisen analyysin perusteella todennäköisyys
  # hävitä luonnosta on äärimmäisen uhanalaisilla vähintään
  # 50 % kymmenen vuoden tai kolmen sukupolven aikana
  # (valitaan pitempi, korkeintaan 100 vuotta), erittäin
  # uhanalaisilla vähintään 20 % kahdenkymmenen vuoden
  # tai viiden sukupolven aikana (valitaan pitempi, korkeintaan
  # 100 vuotta) ja vaarantuneilla vähintään 10 % sadan
  # vuoden aikana.
  # </p>
  criteriaE: String
  criteriaENotes: String
  criteriaForStatus: String
  criteriaForStatusNotes: String
  criteriaNotes: String

  # <ul> <li><b>1. Tuntematon alkuperä.</b> Taksoni tunnetaan vain yhdestä tai muutamasta yksilöstä/ näyteestä, joiden löytöpaikkaa ei tunneta tai paikkatiedot ovat hyvin epätarkat, joten taksonin tilaa ei voida päätellä. </li><li><b>2. Taksonominen epävarmuus.</b> Tietojen vähäisyys voi olla seurausta taksonomisesta epävarmuudesta eli levinneisyydestä, ekologiasta, tilasta, ja uhkista on vähän tietoa, koska vähäinen näytteiden ja/ tai havaintojenmäärä johtuu siitä että taksonia edustaa poikkeava yksilö, hybridi, harvinainen värimuoto tai muun lajin alalajia. Se voi selittää tiedon puutetta yhtä todennäköisesti tai todennäköisemmin kuin se, että taksoni on aidosti harvinainen, uhanalainen tai riittämättömästi etsitty. Tästä on kuitenkin erotettava ne taksonit, joiden taksonomiassa/ taksonomisessa asemassa on jotain epäselvää: ne on joko arvioitava normaalisti tai jätettävä arvioinnin ulkopuolelle (NE) ja tästä arviointilistalle mukaan ottamisesta on päätettävä arvioinnin vaiheessa 1 (luku 2). </li><li><b>3. Puutteelliset tiedot.</b> Tiedot ovat riittämättömät arviointikriteerien soveltamiseksi eli kaikki muut syyt tietojen vähäisyyteen. </li></ul>
  ddReason: DdReason
  ddReasonNotes: String
  decreaseDuringPeriod: String
  decreaseDuringPeriodNotes: String
  distributionAreaMax: String

  # Merkitäksesi "enintään" jätä alaraja tyhjäksi. Merkitäksesi "vähintään" jätä yläraja tyhjäksi.
  distributionAreaMin: String
  distributionAreaNotes: String
  editNotes: String
  endangermentReasonNotes: String
  evaluatedTaxon: String!

  # <p>Tarkastelujakso = 3 x sukupolven pituus A-kriteerissä. Minimi 10 vuotta lyhytikäisillä lajeilla, maksimi 100 vuotta pitkäikäisillä lajeilla.</p>
  # <p>C-kriteerissä tarkastelujakson pituus vaihtelee luokasta riippuen 1-3 sukupolvea tai 3,5, tai 10 v.</p>
  # <p>Kenttä on tarkoitettu ensisijaisesti A-kriteeriä varten. Jos on samaan aikaan käytössä myös C-kriteeri, merkitse siihen liittyvä jakson pituus kommenttikenttään.</p>
  evaluationPeriodLength: String
  evaluationPeriodLengthNotes: String
  evaluationYear: String!

  # <p>Arvioinnin viimeisessä vaiheessa otetaan huomioon Suomen ulkopuolella olevien populaatioiden mahdollinen vaikutus arvioitavaan Suomen populaatioon. Tarvittaessa alennetaan tai korotetaan luokkaa sen perusteella. Luokkaa alennetaan, jos ulkopuolelta saatava täydennys voi vähentää lajin häviämisriskiä. Alennettu tai korotettu luokka on lajin lopullinen uhanalaisuusluokka. </p>
  #
  # <p>Luokka-kenttään asetetaan alennuksen tai korotuksen aiheuttama lopputulos. Tähän kenttään asetetaan tieto tehdystä alennuksesta tai korotuksesta.</p>
  externalPopulationImpactOnRedListStatus: ExternalPopulationImpactOnRedListStatus
  externalPopulationImpactOnRedListStatusNotes: String

  # <p>Onko populaatio voimakkaasti pirstoutunut? = enemmän kuin puolet yksilöistä (tai enemmän kuin puolet asutusta elinympäristöstä) on pienissä eristyneissä laikuissa, jotka ovat </p> <li>liian pieniä ylläpitämään elinvoimaista populaatiota ja</li> <li>kaukana muista elinympäristölaikuista suhteessa lajin leviämiskykyyn.</li>
  fragmentedHabitats: Boolean
  fragmentedHabitatsNotes: String

  # Vuosissa. (Ks. IUCN-ohje, viimeksi syntyneiden yksilöiden vanhempien keskim. ikä)
  generationAge: Float
  generationAgeNotes: String
  groundsForEvaluationNotes: String
  habitatGeneralNotes: String
  habitatNotes: String

  # <ul> <li><b>P - Pyynti:</b> metsästys, kalastus ja laiton tappaminen, myös esimerkiksi muiden eläinten jääminen kalanpyydyksiin</li> <li><b>Ke - Keräily ja poiminta</b>, myös siirto puutarhaan</li> <li><b>H - Häirintä ja liikenne</b></li> <li><b>Ku - Kuluminen:</b> maa - ja kallioperän kuluminen, esimerkiksi tallaamisen, maastoajon, kalliokiipeilyn tai ylilaidunnuksen vuoksi</li> <li><b>R - Rakentaminen (maalla):</b> asutukseen, elinkeinoihin, liikenteeseen ja virkistyskäyttöön liittyvä rakentaminen tierakentaminen, rakentamiseen liittyvät maansiirrot ja läjitykset</li> <li><b>Ks - Kaivannaistoiminta:</b> maa - aineksen ja kalliokiviaineksen otto, kaivostoiminta</li> <li><b>Pm - Peltomaiden muutokset:</b> salaojitus, viljelytapojen muutokset, karjanhoidon muutokset (ei laidunten sulkeutuminen), koneiden käyttö ja viljeltävien lajien vaihdot (ei torjunta - aineet)</li> <li><b>Pr - Pellonraivaus:</b> metsien, soiden ja niittyjen muuttaminen pelloiksi</li> <li><b>N - Avoimien alueiden sulkeutuminen:</b> mm. niitty - ja hakamaiden sekä metsälaidunten sulkeutuminen laidunnuksen ja niiton loputtua, sorakuoppien ja muiden avointen kenttien metsittäminen ja umpeenkasvu</li> <li><b>M - Metsien uudistamis - ja hoitotoimet:</b> toimet, jotka eivät sisälly seuraaviin uhkatekijöihin, esim. maaperän muokkaus. Uhanalaisuuden syynä metsien käyttö. Tarkennetaan työdokumentoinnissa</li> <li><b>Mp - Metsien puulajisuhteiden muutokset:</b> mm. lehtipuiden väheneminen ja lehtojen kuusettuminen</li> <li><b>Mv - Vanhojen metsien väheneminen:</b> vanhojen metsien ja kookkaiden puiden väheneminen</li> <li><b>Mk - Kuloalueiden väheneminen:</b> Kuloalueiden ja muiden luontaisen sukkession alkuvaiheiden väheneminen</li> <li><b>Ml - Lahopuun väheneminen:</b> lahoavan puuaineksen, kuolleiden tai kuolevien puiden sekä oksien, lahoja kolopuiden väheneminen</li> <li><b>O - Ojitus ja turpeenotto</b>, (ei purojen perkaukset): myös kunnostusojitus ja aikaisemmin tehdyn ojituksen myöhäisemmät vaikutukset</li> <li><b>Vr - Vesirakentaminen:</b> voimalaitokset, saha - ja myllypadot, vesien säännöstely, ruoppaukset ja perkaukset (myös purojen), rantavyöhykkeen rakenteellinen muuttaminen (esim. pengerrykset), järvien laskut, tekoaltaiden rakentaminen, pohjaveden otto ja lähteiden hyödyntäminen, mm. pohjaveden pinnan laskun aiheuttamat muutokset</li> <li><b>Kh - Kemialliset haittavaikutukset:</b> ympäristömyrkyt, torjunta - aineet, ilman ja vesien saasteet, öljyvahingot sekä rehevöittävä laskeuma</li> <li><b>I - Ilmastonmuutos:</b> ennustettu ilmaston lämpeneminen, sademäärien lisääntyminen ja äärimmäisten sääilmiöiden yleistyminen seuraavien 20–30 vuoden aikana (käytetään vain, kun on erityisiä perusteita ko. lajiin kohdistuville vaikutuksille)</li> <li><b>S - Satunnaistekijät:</b> satunnaistekijöiden aiheuttama uhka kun kanta tai esiintymisalue on hyvin pieni, myös lyhytaikaiset ilmastonmuutokset</li> <li><b>Kil - Kilpailu:</b> muiden lajien aiheuttama kilpailu</li> <li><b>Ris - Risteytyminen:</b> muiden lajien aiheuttama risteytyminen</li> <li><b>Kv - Suuret kannan vaihtelut</b></li> <li><b>U - Muutokset Suomen ulkopuolella:</b> esim. elinympäristöjen muutokset lintujen talvehtimisalueilla tai muuton aikaisilla levähdysalueilla, ulkomailla tapahtuva pyynti/metsästys</li> <li><b>Vie - Vieraiden lajien aiheuttamat uhat</b>: kilpailu, risteytyminen, taudit, ekosysteemimuutokset</li> <li><b>Muu - Muu tunnettu syy:</b> määriteltyihin uhkatekijöihin sisältymätön tunnettu syy, tarkennetaan työdokumentoinnissa</li> <li><b>? - Syy tuntematon</b></li> </ul>
  hasEndangermentReason: [String]
  hasOccurrence: [String]

  # <ul> <li><b>P - Pyynti:</b> metsästys, kalastus ja laiton tappaminen, myös esimerkiksi muiden eläinten jääminen kalanpyydyksiin</li> <li><b>Ke - Keräily ja poiminta</b>, myös siirto puutarhaan</li> <li><b>H - Häirintä ja liikenne</b></li> <li><b>Ku - Kuluminen:</b> maa - ja kallioperän kuluminen, esimerkiksi tallaamisen, maastoajon, kalliokiipeilyn tai ylilaidunnuksen vuoksi</li> <li><b>R - Rakentaminen (maalla):</b> asutukseen, elinkeinoihin, liikenteeseen ja virkistyskäyttöön liittyvä rakentaminen tierakentaminen, rakentamiseen liittyvät maansiirrot ja läjitykset</li> <li><b>Ks - Kaivannaistoiminta:</b> maa - aineksen ja kalliokiviaineksen otto, kaivostoiminta</li> <li><b>Pm - Peltomaiden muutokset:</b> salaojitus, viljelytapojen muutokset, karjanhoidon muutokset (ei laidunten sulkeutuminen), koneiden käyttö ja viljeltävien lajien vaihdot (ei torjunta - aineet)</li> <li><b>Pr - Pellonraivaus:</b> metsien, soiden ja niittyjen muuttaminen pelloiksi</li> <li><b>N - Avoimien alueiden sulkeutuminen:</b> mm. niitty - ja hakamaiden sekä metsälaidunten sulkeutuminen laidunnuksen ja niiton loputtua, sorakuoppien ja muiden avointen kenttien metsittäminen ja umpeenkasvu</li> <li><b>M - Metsien uudistamis - ja hoitotoimet:</b> toimet, jotka eivät sisälly seuraaviin uhkatekijöihin, esim. maaperän muokkaus. Uhanalaisuuden syynä metsien käyttö. Tarkennetaan työdokumentoinnissa</li> <li><b>Mp - Metsien puulajisuhteiden muutokset:</b> mm. lehtipuiden väheneminen ja lehtojen kuusettuminen</li> <li><b>Mv - Vanhojen metsien väheneminen:</b> vanhojen metsien ja kookkaiden puiden väheneminen</li> <li><b>Mk - Kuloalueiden väheneminen:</b> Kuloalueiden ja muiden luontaisen sukkession alkuvaiheiden väheneminen</li> <li><b>Ml - Lahopuun väheneminen:</b> lahoavan puuaineksen, kuolleiden tai kuolevien puiden sekä oksien, lahoja kolopuiden väheneminen</li> <li><b>O - Ojitus ja turpeenotto</b>, (ei purojen perkaukset): myös kunnostusojitus ja aikaisemmin tehdyn ojituksen myöhäisemmät vaikutukset</li> <li><b>Vr - Vesirakentaminen:</b> voimalaitokset, saha - ja myllypadot, vesien säännöstely, ruoppaukset ja perkaukset (myös purojen), rantavyöhykkeen rakenteellinen muuttaminen (esim. pengerrykset), järvien laskut, tekoaltaiden rakentaminen, pohjaveden otto ja lähteiden hyödyntäminen, mm. pohjaveden pinnan laskun aiheuttamat muutokset</li> <li><b>Kh - Kemialliset haittavaikutukset:</b> ympäristömyrkyt, torjunta - aineet, ilman ja vesien saasteet, öljyvahingot sekä rehevöittävä laskeuma</li> <li><b>I - Ilmastonmuutos:</b> ennustettu ilmaston lämpeneminen, sademäärien lisääntyminen ja äärimmäisten sääilmiöiden yleistyminen seuraavien 20–30 vuoden aikana (käytetään vain, kun on erityisiä perusteita ko. lajiin kohdistuville vaikutuksille)</li> <li><b>S - Satunnaistekijät:</b> satunnaistekijöiden aiheuttama uhka kun kanta tai esiintymisalue on hyvin pieni, myös lyhytaikaiset ilmastonmuutokset</li> <li><b>Kil - Kilpailu:</b> muiden lajien aiheuttama kilpailu</li> <li><b>Ris - Risteytyminen:</b> muiden lajien aiheuttama risteytyminen</li> <li><b>Kv - Suuret kannan vaihtelut</b></li> <li><b>U - Muutokset Suomen ulkopuolella:</b> esim. elinympäristöjen muutokset lintujen talvehtimisalueilla tai muuton aikaisilla levähdysalueilla, ulkomailla tapahtuva pyynti/metsästys</li> <li><b>Vie - Vieraiden lajien aiheuttamat uhat</b>: kilpailu, risteytyminen, taudit, ekosysteemimuutokset</li> <li><b>Muu - Muu tunnettu syy:</b> määriteltyihin uhkatekijöihin sisältymätön tunnettu syy, tarkennetaan työdokumentoinnissa</li> <li><b>? - Syy tuntematon</b></li> </ul>
  hasThreat: [String]
  id: String

  # Lisääntymiskykyisten yksilöiden määrä (ks. IUCN-ohje)
  individualCountMax: String

  # Lisääntymiskykyisten yksilöiden määrä (ks. IUCN-ohje). Merkitäksesi "enintään" jätä alaraja tyhjäksi. Merkitäksesi "vähintään" jätä yläraja tyhjäksi.
  individualCountMin: String
  individualCountNotes: String
  lastModified: String
  lastModifiedBy: String

  # Merkitään tiedot mahdollisesti hävinneiden tai hävinneiden lajien viimeisistä havainnosta.
  lastSightingNotes: String
  legacyPublications: String
  locked: Boolean
  lsaRecommendation: Boolean
  lsaRecommendationNotes: String
  occurrenceAreaMax: String

  # Merkitäksesi "enintään" jätä alaraja tyhjäksi. Merkitäksesi "vähintään" jätä yläraja tyhjäksi.
  occurrenceAreaMin: String
  occurrenceAreaNotes: String
  occurrenceNotes: String
  occurrenceRegionsNotes: String
  occurrenceRegionsPrivateNotes: String

  # <p>Suulliset tai kirjalliset tiedonannot, henkilökohtaiset tiedostot, muistiinpanot tai julkaisemattomat aineistot, verkkosivut, keskustelupalstat ja tyypillisesti yhtä lajia koskevat epävirallisemmat lähteet</p> <p><b>Viittausohjeita:</b></p> 			 <p>Meikäläinen Matti suullinen tiedonanto 2016</p> <p>Virtanen Terhi, julkaisematon selvitysaineisto Hollolasta 2015</p> <p>Heikkinen Heikki, havaintotiedonanto Nisäkäsharrastajien Nisäkäsverkko-sähköpostilista 3.5.2014 (http://www.myrsky.com/mammals/nisakasverkko.htm)</p> <p>Nämä vitteet tallentuvat vain lomakkelle, niistä ei synny julkaisua.</p>
  otherSources: String

  # Tyhjä = Tuntematon
  percentageOfGlobalPopulation: Float
  percentageOfGlobalPopulationNotes: String

  # Kenttä on tarkoitettu ensisijaisesti A-kriteeriä varten. Jos on samaan aikaan käytössä myös C-kriteerin eri pituinen tarkastelujakso, merkitse sen alun ja lopun populaatiokoko kommenttikenttään. Kommenttikentän käyttö koskee myös tilannetta, jossa on käytössä useita A:n alakriteereitä (A1-A4). Ensisijaisesti lomakkeelle merkitään lopulliseen uhanalaisuusluokkaan johtaneet tiedot.
  populationSizePeriodBeginning: String
  populationSizePeriodEnd: String
  populationSizePeriodNotes: String

  # Onko vaihtelun suuruusluokka vähintään 10-kertainen?
  populationVaries: Boolean
  populationVariesNotes: String
  possiblyRE: PossiblyRE
  possiblyRENotes: String

  # <p>Lisämerkinnät:</p>
  # <ul> 
  # <li><b>v - vanhat metsät</b> (myös yksittäiset vanhat puut ja runsaasti lahopuuta sisältävät nuoremmat metsät)</li>
  # <li><b>h - harjumetsät</b>, myös puoliavoimet</li>
  # <li><b>p - metsäpaloalueet</b> ja muut luontaisen sukkession alkuvaiheen metsät</li>
  # <li><b>j - jalopuuesiintymä</b></li>
  # <li><b>pa - paahteinen</b></li>
  # <li><b>va - varjoinen</b></li>
  # <li><b>ra - sijaitsee rannalla</b> (lajin esiintyminen on sidoksissa rannan läheisyyteen)</li>
  # <li><b>ka - karut kalliot ja kivikot</b></li>
  # <li><b>ke - keskiravinteiset kalliot ja kivikot</b></li>
  # <li><b>ca - kalkkivaikutteinen</b></li>
  # </ul>
  primaryHabitat: String

  # <p>Tieteelliset artikkelit, kirjat, julkaistut ja julkaisemattomat raportit, 
  # tietokannat, rekisterit, atlas-sivustot ym. vakiintuneet lähteet</p>
  # <p><b>Viittausohjeita:</b></p> 			<p><b>Julkaisu</b>: Huhtinen, S., Salo, P., Haikonen, V.& von Bonsdorff, T. 2010: Kotelosienet. - Teoksessa: Rassi, P., Hyvärinen, E., Juslén, A. & Mannerkoski I. (toim.), Suomen lajien uhanalaisuus, Punainen kirja 2010: 272-277. Ympäristöministeriö & Suomen ympäristökeskus, Helsinki. 685 s.</p> 			<p><b>Tietokanta</b>: Noyes, J. S. 2014: Universal Chalcidoidea Database. – World Wide Web electronic publication. Accessed at http//www.nhm.ac.uk/chalcidoids on 18 December 2014.</p>
  publication: [String]

  # <p><b>Aito muutos (uusi):</b> muutos johtuu aidosta muutoksesta, joka on tapahtunut edellisen arvioinnin jälkeen (populaation tila huonontunut/ parantunut tms.)</p>
  # <p><b>Aito muutos (ennen edellistä arviointia):</b> luokkaa käytetään taksoneihin, jotka arvioidaan vähintään kolmatta kertaa ja joista lasketaan uhanalaisuusindeksi (Red List Index). Muutos on tapahtunut ennen edellistä arviointia, mutta ensimmäisen jälkeen. Muutos on havaittu uuden tiedon perusteella ja mikäli se olisi ollut käytettävissä aiemmin, uusi luokka olisi annettu jo aiemmalla kerralla (aiemmilla kerroilla). Muutoksen ajankohta on dokumentoitava.</p>
  # <p><b>Kriteerien muutos:</b> kategorian muutos johtuu arviointikriteerien muutoksista.</p>
  # <p><b>Uusi tieto:</b> muutos johtuu siitä, että taksonin statuksesta on saatu uutta tietoa/tieto on lisääntynyt; esim. populaatio on osoittautunut aiempaa käsitystä suuremmaksi tai pienemmäksi.</p>
  # <p><b>Taksonominen muutos:</b> kategorian muutos johtuu taksonomisen aseman muuttumisesta; taksoni on vastikään jaettu kahtia (alalajista laji) tai yhdistetty toisen kanssa tai kuvattu uutena tieteelle tai taksoni ei ole enää validi (pidetään nykyisin hybridinä, varianttina tms.).</p>
  # <p><b>Virhe:</b> luokka on väärä, koska arvioinnissa on aiemmin tapahtunut virhe.</p>
  # <p><b>Virheellinen tieto:</b> aiempi luokka on valittu virheellisen tiedon vuoksi väärin (esim. määritysvirhe).</p>
  # <p><b>Muu syy:</b> muutos johtuu muusta syystä kuin aiemmista ja/tai vaatii lisäselvitystä (esimerkiksi arvioijien suhtautuminen epävarmuuteen muuttuu tai arvioinnin tulkintaohjeet ovat muuttuneet.</p>
  reasonForStatusChange: [ReasonForStatusChangeListItem]
  reasonForStatusChangeNotes: String

  # Tätä ei täytetä kuluvalle vuodelle. Muuttujaa käytetään ainoastaan tarvittaessa jälkikäteen uhanalaisuusindeksin laskemisessa. Jos tätä arviointia jälkikäteen halutaan korjata, arvioinnissa annettua luokkaa ei muuteta, vaan annetaan tässä korjattu luokka.
  redListIndexCorrection: RedListIndexCorrection
  redListIndexCorrectionNotes: String
  redListStatus: RedListStatus!
  redListStatusAccuracyNotes: String
  redListStatusMax: RedListStatusMax
  redListStatusMin: RedListStatusMin
  redListStatusNotes: String
  regionallyThreatenedNotes: String
  regionallyThreatenedPrivateNotes: String
  remarks: [String]
  secondaryHabitat: [String]
  state: State2!
  statusA: StatusA
  statusANotes: String
  statusB: StatusB
  statusBNotes: String
  statusC: StatusC
  statusCNotes: String
  statusD: StatusD
  statusDNotes: String
  statusE: StatusE
  statusENotes: String
  taxonomicNotes: String
  threatNotes: String
  type: String
  typeOfOccurrenceInFinland: TypeOfOccurrenceInFinland
  typeOfOccurrenceInFinlandNotes: String
}

enum DdReason {
  _
  MKV_DDREASONINCOMPLETESPATIALDATA
  MKV_DDREASONINCOMPLETETAXONOMICDATA
  MKV_DDREASONINCOMPLETEOTHERDATA
}

enum ExternalPopulationImpactOnRedListStatus {
  _
  MKV_EXTERNALPOPULATIONIMPACTONREDLISTSTATUSENUMMINUS1
  MKV_EXTERNALPOPULATIONIMPACTONREDLISTSTATUSENUMMINUS2
  MKV_EXTERNALPOPULATIONIMPACTONREDLISTSTATUSENUMPLUS1
  MKV_EXTERNALPOPULATIONIMPACTONREDLISTSTATUSENUMPLUS2
}

enum PossiblyRE {
  _
  MX_IUCNRE
  MX_IUCNEW
  MX_IUCNEX
}

enum ReasonForStatusChangeListItem {
  _
  MKV_REASONFORSTATUSCHANGEGENUINE
  MKV_REASONFORSTATUSCHANGEGENUINEBEFOREPREVIOUSEVALUATION
  MKV_REASONFORSTATUSCHANGECHANGESINCRITERIA
  MKV_REASONFORSTATUSCHANGEMOREINFORMATION
  MKV_REASONFORSTATUSCHANGECHANGESINTAXONOMY
  MKV_REASONFORSTATUSCHANGEERROR
  MKV_REASONFORSTATUSCHANGEERRONEOUSINFORMATION
  MKV_REASONFORSTATUSCHANGEOTHER
}

enum RedListIndexCorrection {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum RedListStatus {
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum RedListStatusMax {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum RedListStatusMin {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum State2 {
  MKV_STATEREADY
  MKV_STATEREADYFORCOMMENTS
  MKV_STATESTARTED
}

enum StatusA {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum StatusB {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum StatusC {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum StatusD {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum StatusE {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum TypeOfOccurrenceInFinland {
  _
  MX_DOESNOTOCCUR
  MX_TYPEOFOCCURRENCEOCCURS
  MX_TYPEOFOCCURRENCESTABLEPOPULATION
  MX_TYPEOFOCCURRENCECOMMON
  MX_TYPEOFOCCURRENCERARE
  MX_TYPEOFOCCURRENCEVERYRARE
  MX_TYPEOFOCCURRENCEVAGRANT
  MX_TYPEOFOCCURRENCERAREVAGRANT
  MX_TYPEOFOCCURRENCEMIGRANT
  MX_TYPEOFOCCURRENCEIMPORT
  MX_TYPEOFOCCURRENCEANTHROPOGENIC
  MX_TYPEOFOCCURRENCENOTESTABLISHED
  MX_TYPEOFOCCURRENCEEXTIRPATED
  MX_TYPEOFOCCURRENCEOLDRECORDS
  MX_TYPEOFOCCURRENCEUNCERTAIN
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERAL
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTEXTINCT
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERAL
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCEALIENNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCEALIENOLDEXTINCT
  MX_TYPEOFOCCURRENCESMALLDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCENOTABLEDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCECOMPLETELYCULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCEONLYCULTIVATED
  MX_TYPEOFOCCURRENCEMAXSHORTDISTANCEESCAPE
  MX_TYPEOFOCCURRENCEMAXSOILIMMIGRANT
  MX_TYPEOFOCCURRENCEMAXREPLANTED
  MX_TYPEOFOCCURRENCEMAXRELICT
  MX_TYPEOFOCCURRENCENOTEVALUATED
  MX_TYPEOFOCCURRENCEREGULARBREEDER
  MX_TYPEOFOCCURRENCEIRREGULARBREEDER
  MX_TYPEOFOCCURRENCEPASSAGEMIGRANT
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYA
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYB
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYC
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYD
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYE
  MX_TYPEOFOCCURRENCEOCCURSBASEDONOCCURRENCES
}

type IucnRedListEvaluationYear2 {
  context: String
  evaluationYear: String!
  id: String
  locked: Boolean
  type: String
}

type IucnRedListTaxonGroup2 {
  context: String
  hasIucnSubGroup: [String]
  id: String
  includesInformalTaxonGroup: [String]
  includesTaxon: [String]
  name: MultiLang!
  type: String
}

type Model2 {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  highDetailModelURL: String
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  lowDetailModelURL: String
  originalFilename: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  taxonDescriptionCaption: MultiLang
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
  videoURL: String!
}

type Multimedia2 {
  context: String
  id: String
  type: String
}

type NamedPlace2 {
  acceptedDocument: Document2
  accessibility: Accessibility
  active: DateRange2
  alternativeIDs: [String]

  # Formal abbreviation. For Finnish eliömaakunnat, use Finnish abbreviation.
  biogeographicalProvince: [String]
  birdAssociationArea: [String]
  collectionID: String
  context: String

  # Persons who have rights to see and use the named places in their documents
  editors: [String]
  geometry: JSON!
  id: String
  images: [String]
  locality: String

  # Informal description of the exact locality, e.g. '5 km NE of city X, under stone bridge'
  localityDescription: String
  municipality: [String]
  name: String!
  notes: String

  # Persons who have full use access and rights to edit the named place
  owners: [String]
  prepopulatedDocument: Document2
  priority: Priority
  privateNotes: String

  # Is the named place publicaly available. (Defaults to false)
  public: Boolean
  reserve: Reserve
  tags: [TagsListItem]
  taxonIDs: [String]
  type: String
}

enum Accessibility {
  _
  MNP_ACCESSIBILITYEASY
  MNP_ACCESSIBILITYMODERATE
  MNP_ACCESSIBILITYDIFFICULT
}

enum Priority {
  _
  MNP_PRIORITY1
  MNP_PRIORITY2
  MNP_PRIORITY3
  MNP_PRIORITY4
  MNP_PRIORITY5
}

type Reserve {
  context: String
  id: String
  reserver: String!
  type: String
  until: String!
}

enum TagsListItem {
  _
  MNP_TAGACCESSIBILITYEASY
  MNP_TAGACCESSIBILITYMODERATE
  MNP_TAGACCESSIBILITYDIFFICULT
  MNP_TAGHABITATIMPORTANT
  MNP_TAGCENSUSRARE
  MNP_TAGHABITATFARMLAND
  MNP_TAGHABITATMIRE
  MNP_TAGHABITATMOUNTAIN
  MNP_TAGSUITABLE
}

type News2 {
  content: String!
  context: String
  eventDate: String!
  id: String
  language: Language2!
  publishDate: String
  targetIndividualIds: [String]
  targets: [String]
  title: String!
  type: String
}

enum Language2 {
  EN
  FI
  SV
}

type Notification2 {
  annotation: Annotation2
  context: String
  created: String!
  friendRequest: String
  friendRequestAccepted: String
  id: String
  notificationReason: NotificationReason
  seen: Boolean
  toPerson: String!
  type: String
}

enum NotificationReason {
  _
  MHN_NOTIFICATIONREASONOWNDOCUMENTANNOTATED
  MHN_NOTIFICATIONREASONANNOTATEDDOCUMENTANNOTATED
}

type Occurrence2 {
  area: String!
  context: String
  id: String
  notes: String
  specimenURI: String
  status: Status4!
  taxon: String!
  threatened: Boolean
  type: String
  year: String
}

enum Status4 {
  MX_DOESNOTOCCUR
  MX_TYPEOFOCCURRENCEOCCURS
  MX_TYPEOFOCCURRENCESTABLEPOPULATION
  MX_TYPEOFOCCURRENCECOMMON
  MX_TYPEOFOCCURRENCERARE
  MX_TYPEOFOCCURRENCEVERYRARE
  MX_TYPEOFOCCURRENCEVAGRANT
  MX_TYPEOFOCCURRENCERAREVAGRANT
  MX_TYPEOFOCCURRENCEMIGRANT
  MX_TYPEOFOCCURRENCEIMPORT
  MX_TYPEOFOCCURRENCEANTHROPOGENIC
  MX_TYPEOFOCCURRENCENOTESTABLISHED
  MX_TYPEOFOCCURRENCEEXTIRPATED
  MX_TYPEOFOCCURRENCEOLDRECORDS
  MX_TYPEOFOCCURRENCEUNCERTAIN
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERAL
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTEXTINCT
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERAL
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCEALIENNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCEALIENOLDEXTINCT
  MX_TYPEOFOCCURRENCESMALLDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCENOTABLEDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCECOMPLETELYCULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCEONLYCULTIVATED
  MX_TYPEOFOCCURRENCEMAXSHORTDISTANCEESCAPE
  MX_TYPEOFOCCURRENCEMAXSOILIMMIGRANT
  MX_TYPEOFOCCURRENCEMAXREPLANTED
  MX_TYPEOFOCCURRENCEMAXRELICT
  MX_TYPEOFOCCURRENCENOTEVALUATED
  MX_TYPEOFOCCURRENCEREGULARBREEDER
  MX_TYPEOFOCCURRENCEIRREGULARBREEDER
  MX_TYPEOFOCCURRENCEPASSAGEMIGRANT
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYA
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYB
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYC
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYD
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYE
  MX_TYPEOFOCCURRENCEOCCURSBASEDONOCCURRENCES
}

type Organization2 {
  # Official code for this organization, if one exists
  abbreviation: String

  # If organisation code is given, the source for it must be chosen.
  abbreviationExplanation: AbbreviationExplanation

  # Filled in by ICT team
  ad: String

  # Name of content/collection contact person for the organization.
  contentContact: String
  contentContactID: [String]
  context: String

  # Name of the country as on a postal address.
  country: String

  # Address and other contact details to be given for courier services, if different from normal postal address. Appears on transaction PDFs like formulated here.
  courierAddress: String
  creator: String

  # Tags this organisation has
  datasetID: [String]
  dateCreated: String
  dateEdited: String

  # Last date for sending seed orders to this organization.
  dateOrdersDue: String

  # Economic Operators Registration and Identification number for customs clearance, if needed.
  eORINumber: String
  editNotes: String
  editor: String

  # Contact email address for the organization, or address of a contact person.
  email: String

  # Fax number, with country code
  fax: String

  # Used for organisations that are not to be used (duplicates etc.)
  hidden: Boolean
  id: String

  # Usually city name
  locality: String

  # Web address where the logo of the organization is located. Used on Kotka transaction PDFs for now.
  logo: String

  # Free-text notes
  notes: String
  organizationLevel1: MultiLang!
  organizationLevel2: MultiLang
  organizationLevel3: MultiLang
  organizationLevel4: MultiLang

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Phone number for organization or contact person, with country code.
  phone: String

  # Insert only numbers, leave 'P.O. Box', 'PL' or such out.
  postOfficeBox: String
  postalCode: String

  # E.g. state or province; use only if needed in the postal address
  region: String
  streetAddress: String
  type: String

  # Organisation website. Include http://
  uRL: String
}

enum AbbreviationExplanation {
  _
  MOS_ABBREVIATION_EXPLANATIONINDEXHERBARIORUM
  MOS_ABBREVIATION_EXPLANATIONINSECTANDSPIDERCOLLECTIONSOFTHEWORLD
}

type Pdf2 {
  caption: String
  context: String
  documentURI: [String]
  fullURL: String!
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]
  largeURL: String!
  originalFilename: String
  originalURL: String
  pdfURL: String!

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions
  sourceSystem: String!
  squareThumbnailURL: String!
  thumbnailURL: String!
  type: String
  uploadDateTime: String
  uploadedBy: String
}

type Permit2 {
  context: String
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  permitEndDate: String
  permitFile: String
  permitNotes: String
  permitStartDate: String
  permitStatus: PermitStatus
  permitType: PermitType
  type: String
}

enum PermitStatus {
  _
  HRA_PERMITSTATUSAVAILABLE
  HRA_PERMITSTATUSNOTREQUIRED
}

enum PermitType {
  _
  HRA_PERMITTYPEPIC
  HRA_PERMITTYPEMAT
  HRA_PERMITTYPEMTA
  HRA_PERMITCOLLECTINGPERMIT
  HRA_PERMITTYPEEXPORTPERMIT
  HRA_PERMITTYPEOTHER
  HRA_PERMITTYPEMEMORANDUMOFUNDERSTANDING
}

type Person2 {
  address: String
  appleLoginName: String
  context: String
  defaultLanguage: String
  defaultQNamePrefix: String
  description: String
  emailAddress: String!
  facebookLoginName: String
  fieldjournalLoginName: [String]
  firstJoined: String
  fullName: String!
  givenNames: String
  googleLoginName: String

  # Group, membership or any other way that allows the user to distinguish themselves from people with the same name
  group: String
  hakaLoginName: String
  hatikkaLoginName: [String]
  id: String
  inaturalistLoginName: String
  inheritedName: String
  insectDatabaseLoginName: [String]
  kastikkaUserName: [String]
  lTKMLoginName: String
  lajiAuthLoginName: String
  lintuvaaraLoginName: [String]
  omariistaLoginName: String
  organisation: [String]

  # Lists all organisations that this user administrates (can grant access to PAP and add users to this organisation)
  organisationAdmin: [String]
  preferredName: String
  previousEmailAddress: [String]
  role: [RoleListItem]
  roleAnnotation: RoleAnnotation
  roleKotka: RoleKotka
  securePortalUserRoleExpires: String
  type: String
  virtuLoginName: String
  yearOfBirth: String
}

enum RoleListItem {
  _
  MA_ADMIN
  MA_SECUREPORTALUSER
  MA_SENSITIVEINFORMATIONAPPROVALREQUESTHANDLER
  MA_TAXONEDITORUSER
  MA_TAXONEDITORUSERDESCRIPTIONWRITERONLY
  MA_HAUKKAUSER
  MA_SATELLITEDATAMANAGEMENTUSER
  MA_INVASIVEPORTALADMIN
  MA_SPECIESCHALLENGEADMIN
  MA_LUOMUSSPACECALENDARUSER
  MA_LUOMUSSPACEOPENINGTIMESUSER
  MA_TAXONIDEDITOR
}

enum RoleAnnotation {
  _
  MMAN_EXPERT
  MMAN_BASIC
  MMAN_OWNER
  MMAN_FORMADMIN
  MMAN_ICTADMIN
}

enum RoleKotka {
  _
  MA_ADMIN
  MA_ADVANCED
  MA_MEMBER
  MA_GUEST
}

type Preparation2 {
  context: String
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String

  # Date when the preparation/sample was prepared.
  preparationDate: String

  # Materials (chemicals, kits etc.) used in the preparation process. It is possible to choose several.
  preparationMaterials: [PreparationMaterialsListItem]

  # Processes used in the preparation. It is possible to choose several.
  preparationProcess: [PreparationProcessListItem]

  # Additional information about the preparation process.
  preparationProcessNotes: String

  # Name of the person who prepared the preparation/sample, preferably in the format 'lastname, firstname'
  preparedBy: String
  type: String
}

enum PreparationMaterialsListItem {
  _
  MF_PREPARATIONMATERIALSACETONE
  MF_PREPARATIONMATERIALSAMMONIA
  MF_PREPARATIONMATERIALSBASYNTAN
  MF_PREPARATIONMATERIALSBORAX
  MF_PREPARATIONMATERIALSEULAN
  MF_PREPARATIONMATERIALSHYDROGENPEROXIDE
  MF_PREPARATIONMATERIALSMETHYLENECHLORIDE
  MF_PREPARATIONMATERIALSNOVALTAN
  MF_PREPARATIONMATERIALSPAPAINE
  MF_PREPARATIONMATERIALSPLASTER
  MF_PREPARATIONMATERIALSPOLYURETHANE
  MF_PREPARATIONMATERIALSPRETANIX
  MF_PREPARATIONMATERIALSPURIFIEDGASOLINE
  MF_PREPARATIONMATERIALSWOODWOOL
  MF_PREPARATIONMATERIALSCTAB
  MF_PREPARATIONMATERIALSEZNAFORENSICKIT
  MF_PREPARATIONMATERIALSDNEASYBLOODANDTISSUEKIT
  MF_PREPARATIONMATERIALSDNEASYPLANTKIT
  MF_PREPARATIONMATERIALSNUCLEOSPINTISSUEKIT
  MF_PREPARATIONMATERIALSNUCLEOSPINPLANTTWO
  MF_PREPARATIONMATERIALSSALTEXTRACTION
  MF_PREPARATIONMATERIALSDNEASYPLANTMINIKIT
  MF_PREPARATIONMATERIALSMAGATTRACTHMWDNAKIT
}

enum PreparationProcessListItem {
  _
  MF_PREPARATIONPROCESSTANNING
  MF_PREPARATIONPROCESSENZYMATICMACERATION
  MF_PREPARATIONPROCESSDEGREASING
  MF_PREPARATIONPROCESSBEETLECLEANING
  MF_PREPARATIONPROCESSPEG
  MF_PREPARATIONPROCESSFREEZEDRYING
}

type Profile2 {
  birdSongRecognitionSkillLevels: [BirdSongRecognitionSkillLevel2]
  birdwatchingActivityLevel: BirdwatchingActivityLevel
  blocked: [String]
  context: String
  finnishBirdSongRecognitionSkillLevel: FinnishBirdSongRecognitionSkillLevel
  friendRequests: [String]
  friends: [String]
  id: String
  image: String
  nameVisibleInKerttu: Boolean
  personalCollectionIdentifier: String
  profileDescription: String
  profileKey: String
  settings: JSON
  taxonExpertise: [String]
  taxonExpertiseNotes: String
  type: String
  userID: String!
}

enum BirdwatchingActivityLevel {
  _
  MA_BIRDWATCHINGACTIVITYLEVELENUM1
  MA_BIRDWATCHINGACTIVITYLEVELENUM2
  MA_BIRDWATCHINGACTIVITYLEVELENUM3
  MA_BIRDWATCHINGACTIVITYLEVELENUM4
}

enum FinnishBirdSongRecognitionSkillLevel {
  _
  MA_FINNISHBIRDSONGRECOGNITIONSKILLLEVELENUM1
  MA_FINNISHBIRDSONGRECOGNITIONSKILLLEVELENUM2
  MA_FINNISHBIRDSONGRECOGNITIONSKILLLEVELENUM3
  MA_FINNISHBIRDSONGRECOGNITIONSKILLLEVELENUM4
}

type Publication3 {
  context: String
  dcBibliographicCitation: MultiLang
  dcURI: String
  id: String
  type: String
}

type RegionalStatus2 {
  context: String
  id: String
  regionalStatusArea: String!
  regionalStatusStatus: RegionalStatusStatus!
  type: String
}

enum RegionalStatusStatus {
  MX_DOESNOTOCCUR
  MX_TYPEOFOCCURRENCEOCCURS
  MX_TYPEOFOCCURRENCESTABLEPOPULATION
  MX_TYPEOFOCCURRENCECOMMON
  MX_TYPEOFOCCURRENCERARE
  MX_TYPEOFOCCURRENCEVERYRARE
  MX_TYPEOFOCCURRENCEVAGRANT
  MX_TYPEOFOCCURRENCERAREVAGRANT
  MX_TYPEOFOCCURRENCEMIGRANT
  MX_TYPEOFOCCURRENCEIMPORT
  MX_TYPEOFOCCURRENCEANTHROPOGENIC
  MX_TYPEOFOCCURRENCENOTESTABLISHED
  MX_TYPEOFOCCURRENCEEXTIRPATED
  MX_TYPEOFOCCURRENCEOLDRECORDS
  MX_TYPEOFOCCURRENCEUNCERTAIN
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERAL
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTEXTINCT
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERAL
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCEALIENNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCEALIENOLDEXTINCT
  MX_TYPEOFOCCURRENCESMALLDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCENOTABLEDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCECOMPLETELYCULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCEONLYCULTIVATED
  MX_TYPEOFOCCURRENCEMAXSHORTDISTANCEESCAPE
  MX_TYPEOFOCCURRENCEMAXSOILIMMIGRANT
  MX_TYPEOFOCCURRENCEMAXREPLANTED
  MX_TYPEOFOCCURRENCEMAXRELICT
  MX_TYPEOFOCCURRENCENOTEVALUATED
  MX_TYPEOFOCCURRENCEREGULARBREEDER
  MX_TYPEOFOCCURRENCEIRREGULARBREEDER
  MX_TYPEOFOCCURRENCEPASSAGEMIGRANT
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYA
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYB
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYC
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYD
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYE
  MX_TYPEOFOCCURRENCEOCCURSBASEDONOCCURRENCES
}

type Sample2 {
  # Other identifiers this preparation/sample has, in format 'type:identifier'. For example: 'MZHtissue:123'. You can enter the type and colon and then click 'generate' to fetch the next free number for that prefix type.
  additionalIDs: [String]

  # BOLD ID (usually BOLD "Sample ID") for the preparation/sample. If no other preparation/sample information is entered, use the BOLD field on the document level
  bold: String

  # The collection which this preparation/sample belongs to, if different from the collection of the specimen.
  collectionID: String

  # Notes on the defects of the preparation/sample (missing parts or such). For specimen level status use the condition field in the basic information section (document level). Empty value means same as "good" or "hyvä" - that the sample is in fine condition.
  condition: String
  context: String
  creator: String

  # Name of the instrument or device used for DNA extraction
  dNAExtractionInstrument: String

  # Tag for the preparation/sample. For specimen level tags, use the tag field in the basic information section (document level).
  datasetID: [String]
  dateCreated: String
  dateEdited: String
  editor: String

  # DNA sample elution medium
  elutionMedium: ElutionMedium

  # Diary-style information about what has been done to the preparation/sample
  event: [String]

  # Genbank ID for the preparation/sample. If no other preparation/sample information is entered, use the Genbank field on the document level
  genbank: [String]
  id: String

  # For example a jar that contains multiple fish individuals can be recorded as one specimen and one preparation. Can also be used for DNA samples (was DNA extracted from single or multiple individuals?).
  individualsInPreparation: IndividualsInPreparation

  # Which parent or larger collection this is part of.
  isPartOf: String

  # Preparation/sample material. Choose preparation/sample type first.
  material: Material
  measurement: Measurement

  # Additional information about the preparation/sample
  notes: String

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Type of preparation/sample
  preparationType: PreparationType!

  # Preservation methods and materials of the preparation/sample. It is possible to choose several
  preservation: [PreparationSamplePreservationListItem]

  # Publication references or doi's that refer to this preparations/sample. For publications referring to the specimen, use publications field in the Other section (document level).
  publication: [String]

  # DNA sample quality on a three step scale. The quality is defined by quality check measurements
  quality: Quality

  # Date of the latest quality check measurements
  qualityCheckDate: String

  # Method or instrument used for quality measurements
  qualityCheckMethod: [QualityCheckMethodListItem]

  # Additional information about the DNA sample quality
  qualityNotes: String

  # Location of the preparation/sample so that museum personnel can find it. E.g. room, freezer, shelf number etc.
  sampleLocation: String
  specimenID: String!

  # Status of the preparation/sample. For specimen level status use the status field in the basic information section. Empty value means same as "ok" - that there is nothing special about the status of the sample.
  status: PreparationSampleStatus
  type: String
}

enum ElutionMedium {
  _
  MF_ELUTIONMEDIUMULTRAPUREWATER
  MF_ELUTIONMEDIUMELUTIONBUFFER
}

enum IndividualsInPreparation {
  _
  MF_INDIVIDUALSINPREPARATIONMULTIPLE
  MF_INDIVIDUALSINPREPARATIONSINGLE
}

enum Material {
  _
  MF_MATERIALBIRDSTUDYSKIN
  MF_MATERIALWING
  MF_MATERIALTAIL
  MF_MATERIALWINGANDTAIL
  MF_MATERIALSKULL
  MF_MATERIALENTIRESKELETON
  MF_MATERIALBONES
  MF_MATERIALSKULLANDBONES
  MF_MATERIALANTLERS
  MF_MATERIALHEAD
  MF_MATERIALMUSCLE
  MF_MATERIALLIVER
  MF_MATERIALLEAF
  MF_MATERIALBLOOD
  MF_MATERIALLEG
  MF_MATERIALSKIN
  MF_MATERIALFEATHER
  MF_MATERIALEGG
  MF_MATERIALEGGCONTENT
  MF_MATERIALGENOMICDNA
  MF_MATERIALMITOCHONDRIALDNA
  MF_MATERIALCHLOROPLASTDNA
  MF_MATERIALENVIRONMENTALDNA
  MF_MATERIALTEETH
  MF_MATERIALBODYPARTS
  MF_MATERIALENTIREORGANISM
  MF_MATERIALAPPENDAGES
  MF_MATERIALGENITALPREPARATION
  MF_MATERIALSECTION
  MF_MATERIALCHROMOSOMES
  MF_MATERIALSHELL
  MF_MATERIALHAIR
  MF_MATERIALCLUTCH
  MF_MATERIALEGGSHELL
  MF_MATERIALEGGSHELLFRAGMENTS
  MF_MATERIALNEST
  MF_MATERIALNESTMATERIAL
  MF_MATERIALOTHER
}

enum PreparationType {
  MF_PREPARATIONTYPESKIN
  MF_PREPARATIONTYPESKELETAL
  MF_PREPARATIONTYPEMOUNT
  MF_PREPARATIONTYPETISSUE
  MF_PREPARATIONTYPETISSUEECOTOXICOLOGY
  MF_PREPARATIONTYPELIQUID
  MF_PREPARATIONTYPEMICROSCOPESLIDE
  MF_PREPARATIONTYPEDNAEXTRACT
  MF_PREPARATIONTYPEEGG
  MF_PREPARATIONTYPENEST
  MF_PREPARATIONTYPEOTHER
}

enum PreparationSamplePreservationListItem {
  _
  MY_PRESERVATIONPRESSED
  MY_PRESERVATIONDRY
  MY_PRESERVATIONCRITICALPOINTDRYING
  MY_PRESERVATIONPINNED
  MY_PRESERVATIONGLUED
  MY_PRESERVATIONLIQUID
  MY_PRESERVATIONETHANOL
  MY_PRESERVATIONETHANOLPURE
  MY_PRESERVATIONETHANOL70
  MY_PRESERVATIONETHANOL80
  MY_PRESERVATIONETHANOL80PURE
  MY_PRESERVATIONETHANOL96
  MY_PRESERVATIONETHANOLDENATURED
  MY_PRESERVATIONETHANOLFORMALIN
  MY_PRESERVATIONETHANOLEXFORMALIN
  MY_PRESERVATIONFORMALIN
  MY_PRESERVATIONBOUINSOLUTION
  MY_PRESERVATIONPAMPELSFLUID
  MY_PRESERVATIONGLYCEROL
  MY_PRESERVATIONPARAFFIN
  MY_PRESERVATIONMERCURICCHLORIDE
  MY_PRESERVATIONCRYOPRESERVED
  MY_PRESERVATIONFROZEN
  MY_PRESERVATIONFROZENMINUS80C
  MY_PRESERVATIONFREEZEDRIED
  MY_PRESERVATIONGOLDPLATED
  MY_PRESERVATIONACTIVECULTURE
  MY_PRESERVATIONLIVING
  MY_PRESERVATIONSLIDE
  MY_PRESERVATIONSLIDECANADABALSAM
  MY_PRESERVATIONSLIDEEUPARAL
  MY_PRESERVATIONSLIDEPOLYVIOL
  MY_PRESERVATIONSTUFFED
  MY_PRESERVATIONCAST
  MY_PRESERVATIONPLASTINATED
  MY_PRESERVATIONFROZENMINUS80CANDETHANOLMINUS20C
}

enum Quality {
  _
  MF_QUALITYLOW
  MF_QUALITYMEDIUM
  MF_QUALITYHIGH
}

enum QualityCheckMethodListItem {
  _
  MF_QUALITYCHECKMETHODNANODROP
  MF_QUALITYCHECKMETHODCUBIT
}

enum PreparationSampleStatus {
  _
  MY_STATUSOK
  MY_STATUSMISSING
  MY_STATUSUNRECOVERABLE
  MY_STATUSLOST
  MY_STATUSDONATED
  MY_STATUSDEPOSITED
  MY_STATUSDEACCESSIONED
  MY_STATUSDISCARDED
  MY_STATUSSPENT
  MY_STATUSDESTROYED
  MY_STATUSUNDEFINED
  MY_STATUSAXENIC
  MY_STATUSNONAXENIC
  MY_STATUSNOTAVAILABLE
  MY_STATUSDEAD
  MY_STATUSNOVOUCHERRETAINED
}

type SatelliteTrackingProject2 {
  context: String
  description: MultiLang
  id: String
  name: MultiLang!
  targetIndividualIds: [String]
  type: String
}

type SpecimenTransaction2 {
  attachments: [String]

  # If you choose "Yes, with restrictions", explain the restrictions in the following field "Rights and obligations".
  availableForGeneticResearch: AvailableForGeneticResearch
  awayCount: Int
  awayIDs: [String]

  # For statistical purposes. The collection where the transaction is directed to. Record transactions directed to different collections as separate transactions if you use this field.
  collectionID: String
  context: String

  # Select the correspondent organization from a list. If not found on the list, you need to add the new organization first.
  correspondentOrganization: String

  # Name of the corresponding person. If the transaction goes to a private person, write their postal address here.
  correspondentPerson: String

  # Receicing researcher in the correspondent organisation for outgoing transactions.
  correspondentResearcher: String
  creator: String
  damagedCount: Int
  damagedIDs: [String]
  dateCreated: String
  dateEdited: String

  # Date when the loan needs to be returned.
  dueDate: String
  editor: String

  # Sender's ID for the transaction.
  externalID: String

  # Country where the genetic resource or traditional knowledge was acquired from, provider country, country of origin. List of countries in Kotka is based on ISO 3166 Country Codes -standard and may differ from the country list in ABSCH.
  geneticResourceAcquisitionCountry: String

  # Date when the genetic resource or traditional knowledge was aqcuired.
  geneticResourceAcquisitionDate: String

  # Description of the genetic resource or traditional knowledge (possible identifiers, taxa, number of specimens, region etc.). Instruction source EU DECLARE User manual and QA.
  geneticResourceDescription: String

  # Presence or absence of rights and obligations relating to access and benefit sharing, including rights and obligations regarding subsequent applications and commercialization. Instruction source EU DECLARE user manual and QA.
  geneticResourceRightsAndObligations: String

  # Person or legal entity from whom the user obtained the genetic resources directly, i.e. the previous actor in the value chain. Often a museum or other organization. If a genetic resource is obtained directly from the provider country, the name of the country should be provided. Instruction source EU DECLARE User manual and QA.
  geneticResourceSource: String

  # Choose the type of the genetic resource for statistical and reporting purposes.
  geneticResourceType: GeneticResourceType
  harmonizedSystemCode: String

  # Whether the resource has an IRCC number or not. If not, more information needs to be filled in.
  hasIRCC: Boolean

  # Internationally Recognized Certificate of Compliance. Kotka checks from the ABS Clearing House that the entered IRCC number exists and is valid.
  iRCC: String
  id: String

  # Date when incoming transaction was received.
  incomingReceived: String

  # Date when the incoming loan was returned to the sender.
  incomingReturned: String

  # Private remarks that are shown only in Kotka and not to the corresponding organisation.
  internalRemarks: String

  # Loan/transaction number used in paper loan catalogs or old software (e.g. Curator)
  legacyID: String

  # Person handling the transaction at local Kotka institution.
  localHandler: String
  localHandlerEmail: String

  # Person responsible for the transaction in our museum/local Kotka institution
  localPerson: String

  # Contact email for the person responsible in our museum.
  localPersonEmail: String

  # For incoming loans, name of the researcher receiving the loan at our local institution.
  localResearcher: String

  # Description of the material included in this transaction.
  material: String
  missingCount: Int
  missingIDs: [String]

  # In how many parcels was the transaction sent/carried.
  numberOfParcels: String

  # Date when the outgoing loan was returned to us
  outgoingReturned: String

  # When the transaction was sent out from us
  outgoingSent: String

  # Team or organisation that owns the record and can edit it.
  owner: String
  permits: [Permit2]

  # Remarks that are shown to both parties of the transaction.
  publicRemarks: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # When signed loan receipt was received from the loanee
  receiptReturned: String

  # When loan request was received here.
  requestReceived: String

  # Are you importing genetic resources, traditional knowledge associated to genetic resources or both?
  resourceImported: ResourceImported
  returnedCount: Int
  returnedIDs: [String]

  # Whether the transaction is closed, outstanding or in process.
  status: TransactionStatus
  transactionEvents: [SpecimenTransactionEvent]

  # Means of sending, mail, courier etc.
  transportMethod: TransportMethod

  # What kind of transaction this is.
  type: TransactionType!

  # Is it e.g. non-human genetic material that is going to be used for genetic research as is defined by the protocol?
  underNagoya: Boolean
}

enum AvailableForGeneticResearch {
  _
  HRX_AVAILABLEFORGENETICRESEARCHYES
  HRX_AVAILABLEFORGENETICRESEARCHWITHRESTRICTIONS
  HRX_AVAILABLEFORGENETICRESEARCHNO
}

enum GeneticResourceType {
  _
  HRX_GENETICRESOURCETYPEANIMAL
  HRX_GENETICRESOURCETYPEPLANT
  HRX_GENETICRESOURCETYPEFUNGUS
  HRX_GENETICRESOURCETYPEMICROBE
  HRX_GENETICRESOURCETYPESOIL
  HRX_GENETICRESOURCETYPEAQUA
}

enum ResourceImported {
  _
  HRX_RESOURCEIMPORTEDGENETICRESOURCES
  HRX_RESOURCEIMPORTEDTRADITIONALKNOWLEDGE
  HRX_RESOURCEIMPORTEDBOTH
}

enum TransactionStatus {
  _
  HRX_STATUSINPROCESS
  HRX_STATUSOUTSTANDING
  HRX_STATUSCLOSED
}

type SpecimenTransactionEvent {
  context: String
  eventDate: String!
  eventDocumentIDs: [String]
  eventHandler: String
  eventNotes: String
  eventType: EventType2!
  id: String
  type: String
}

enum EventType2 {
  HRX_EVENTTYPERETURN
  HRX_EVENTTYPEADDITION
}

enum TransportMethod {
  _
  HRX_TRANSPORTMETHODPRIORITY
  HRX_TRANSPORTMETHODECONOMY
  HRX_TRANSPORTMETHODCOURIER
  HRX_TRANSPORTMETHODCARRIED
  HRX_TRANSPORTMETHODOTHER
  HRX_TRANSPORTMETHODIMAGE
}

enum TransactionType {
  HRX_TYPELOANINCOMING
  HRX_TYPEGIFTINCOMING
  HRX_TYPEEXCHANGEINCOMING
  HRX_TYPELOANOUTGOING
  HRX_TYPEGIFTOUTGOING
  HRX_TYPEEXCHANGEOUTGOING
  HRX_TYPEFIELDCOLLECTION
  HRX_TYPEIMPORTNOTICE
  HRX_TYPEABSNEGOTIATIONS
  HRX_TYPEVIRTUALLOANOUTGOING
  HRX_TYPEDEACCESSION
}

type SubUnit2 {
  # Estimated or known age in calendar years, years, days or other relevant unit.
  age: String
  context: String
  id: String
  individualCount: Int

  # Sex of the individual(s)
  sex: Sex
  type: String
}

type Tag2 {
  context: String
  description: MultiLang
  id: String
  name: MultiLang
  requiredRolesAdd: [RequiredRolesAddListItem]
  requiredRolesRemove: [RequiredRolesRemoveListItem]
  type: Type3
}

enum RequiredRolesAddListItem {
  _
  MMAN_EXPERT
  MMAN_BASIC
  MMAN_OWNER
  MMAN_FORMADMIN
  MMAN_ICTADMIN
}

enum RequiredRolesRemoveListItem {
  _
  MMAN_EXPERT
  MMAN_BASIC
  MMAN_OWNER
  MMAN_FORMADMIN
  MMAN_ICTADMIN
}

enum Type3 {
  _
  MMAN_TYPECHECK
  MMAN_TYPEADMIN
  MMAN_TYPEINFO
  MMAN_TYPEINVASIVE
  MMAN_TYPECENSUS
  MMAN_TYPENEGATIVEQUALITY
  MMAN_TYPEPOSITIVEQUALITY
}

type Taxon2 {
  # Identifier of this taxon concept/name in other systems/sources
  additionalID: [String]

  # Leväosakkaiden kuvaus
  algalPartnerOfLichen: String

  # Names used in observations that are linked to taxonomy. (Eg names used in special cases and informal and slang names.)
  alsoKnownAs: [String]

  # Commonly used names. (Eg names used in recent literature.)
  alternativeVernacularName: AlternativeVernacularName
  autoNonWild: Boolean

  # Lajin elintavat
  behaviour: String
  birdlifeCode: String
  breedingSecureLevel: BreedingSecureLevel
  circumscription: String

  # Informal but commonly used name. Name that is outdated, unofficial or non-recommended, but which is still commonly used for this taxon.
  colloquialVernacularName: ColloquialVernacularName
  conservationStatusDescriptionFinland: String
  conservationStatusDescriptionWorld: String
  context: String
  createdAtTimestamp: String
  cultivationText: String
  customReportFormLink: String

  # Käpyjen kuvaus
  descriptionCone: String

  # Kukan kuvaus
  descriptionFlower: String

  # Hedelmän/siemenen -kuvaus
  descriptionFruitAndSeed: String

  # Itiöemän kuvaus
  descriptionFruitbody: String
  descriptionHostParasite: String

  # Lehden kuvaus
  descriptionLeaf: String

  # Lajin mikroskooppiset tuntomerkit
  descriptionMicroscopicIdentification: String

  # Eliön koon kuvaus
  descriptionOrganismSize: String
  descriptionReferences: String
  descriptionRoot: String

  # Itiöpesäkkeet ja suvuton lisääntyminen
  descriptionSporangiumAndAsexualReproduction: String

  # Itiöiden kuvaus
  descriptionSpore: String

  # Kasvin varren kuvaus
  descriptionStem: String
  descriptionText: String

  # Sekovarren kuvaus
  descriptionThallus: String
  descriptionToxicity: String
  distributionFinland: String
  distributionMapFinland: String

  # Lajin ekologian sekalainen kuvaus
  ecology: String
  economicUseText: String
  etymologyText: String
  euringCode: String
  euringNumber: String
  externalLinkURL: String
  finnish: Boolean
  frequencyScoringPoints: Int
  growthFormAndGrowthHabit: String

  # Lajin elinympäristö
  habitat: String

  # Lajin kasvialusta
  habitatSubstrate: String
  hasAdminStatus: [HasAdminStatusListItem]
  hasAlternativeName: [String]
  hasBasionym: [String]
  hasHeterotypicSynonym: [String]
  hasHomotypicSynonym: [String]
  hasMisappliedName: [String]
  hasMisspelledName: [String]
  hasObjectiveSynonym: [String]
  hasOrthographicVariant: [String]
  hasSubjectiveSynonym: [String]
  hasSynonym: [String]
  hasUncertainSynonym: [String]
  herboSortOrder: Int

  # Should this taxon be hidden when showing contents of a checklist (publicly)?
  hiddenTaxon: Boolean
  id: String
  identificationText: String
  ingressText: String
  invasiveCitizenActionsText: String
  invasiveEffectText: String
  invasivePreventionMethodsText: String
  invasiveSpeciesCategory: InvasiveSpeciesCategory
  invasiveSpeciesClassificationDescription: String
  invasiveSpeciesEarlyWarning: Boolean
  invasiveSpeciesEstablishment: InvasiveSpeciesEstablishment
  invasiveSpeciesMainGroup: [InvasiveSpeciesMainGroupListItem]
  isPartOf: String
  isPartOfInformalTaxonGroup: [String]
  isPartOfSet: [IsPartOfSetListItem]

  # Eliön elinkierto
  lifeCycle: String
  management: String
  miscText: String
  nameAccordingTo: String
  nameDecidedBy: String
  nameDecidedDate: String
  naturaAreaSecureLevel: NaturaAreaSecureLevel
  nestSiteSecureLevel: NestSiteSecureLevel
  notes: String

  # Names not recommended and no longer (for a long time) commonly used. (For example, names used in the literature in the 20th century, or names transferred to another taxon.
  obsoleteVernacularName: ObsoleteVernacularName
  occurrenceInFinland: OccurrenceInFinland
  occurrenceInFinlandPublication: [String]
  occurrenceInFinlandSpecimenURI: String
  originAndDistributionText: String
  originalDescription: String
  originalPublication: [String]
  overridingTargetName: [String]

  # <p>Lisämerkinnät:</p>
  # <ul> 
  # <li><b>v - vanhat metsät</b> (myös yksittäiset vanhat puut ja runsaasti lahopuuta sisältävät nuoremmat metsät)</li>
  # <li><b>h - harjumetsät</b>, myös puoliavoimet</li>
  # <li><b>p - metsäpaloalueet</b> ja muut luontaisen sukkession alkuvaiheen metsät</li>
  # <li><b>j - jalopuuesiintymä</b></li>
  # <li><b>pa - paahteinen</b></li>
  # <li><b>va - varjoinen</b></li>
  # <li><b>ra - sijaitsee rannalla</b> (lajin esiintyminen on sidoksissa rannan läheisyyteen)</li>
  # <li><b>ka - karut kalliot ja kivikot</b></li>
  # <li><b>ke - keskiravinteiset kalliot ja kivikot</b></li>
  # <li><b>ca - kalkkivaikutteinen</b></li>
  # </ul>
  primaryHabitat: String
  privateNotes: String
  productionText: String
  redListStatus2000Finland: RedListStatus2000Finland
  redListStatus2010Finland: RedListStatus2010Finland
  redListStatus2015Finland: RedListStatus2015Finland
  redListStatus2019Finland: RedListStatus2019Finland
  reproduction: String

  # Kukinta-aika
  reproductionFloweringTime: String

  # Pölytyksen kuvaus
  reproductionPollination: String
  scientificName: String
  scientificNameAuthorship: String
  secondaryHabitat: [String]

  # Secure level (salaus-/karkeistustaso) for the data
  secureLevel: SecureLevel
  skosExactMatch: String
  sortOrder: Int
  speciesCardAuthors: String
  stopInformalTaxonGroupInheritance: Boolean
  stopOccurrenceInFinlandPublicationInheritance: Boolean
  stopOriginalPublicationInheritance: Boolean
  targetName: [String]
  taxonEditor: [String]
  taxonExpert: [String]
  taxonRank: TaxonomicRank
  taxonomyText: String
  tradeName: [String]
  type: String
  typeOfOccurrenceInFinland: [TypeOfOccurrenceListItem]
  typeOfOccurrenceInFinlandNotes: String
  typeSpecimenURI: String
  vernacularName: MultiLang
  winteringSecureLevel: WinteringSecureLevel
}

# Commonly used names. (Eg names used in recent literature.)
type AlternativeVernacularName {
  en: [String]
  fi: [String]
  sv: [String]
}

enum BreedingSecureLevel {
  _
  MX_SECURELEVELNONE
  MX_SECURELEVELKM1
  MX_SECURELEVELKM5
  MX_SECURELEVELKM10
  MX_SECURELEVELKM25
  MX_SECURELEVELKM50
  MX_SECURELEVELKM100
  MX_SECURELEVELHIGHEST
  MX_SECURELEVELNOSHOW
}

# Informal but commonly used name. Name that is outdated, unofficial or non-recommended, but which is still commonly used for this taxon.
type ColloquialVernacularName {
  en: [String]
  fi: [String]
  sv: [String]
}

enum HasAdminStatusListItem {
  _
  MX_FINLEX160_1997_APPENDIX4_2021
  MX_FINLEX160_1997_APPENDIX4_SPECIALINTEREST_2021
  MX_FINLEX160_1997_APPENDIX1
  MX_FINLEX160_1997_APPENDIX2A
  MX_FINLEX160_1997_APPENDIX2B
  MX_FINLEX160_1997_APPENDIX3A
  MX_FINLEX160_1997_APPENDIX3B
  MX_FINLEX160_1997_APPENDIX3C
  MX_FINLEX160_1997_LARGEBIRDSOFPREY
  MX_HABITATSDIRECTIVEANNEXII
  MX_HABITATSDIRECTIVEANNEXIV
  MX_HABITATSDIRECTIVEANNEXV
  MX_PRIMARYINTERESTINEU
  MX_HABITATSDIRECTIVEANNEXIIEXCEPTIONGRANTED
  MX_HABITATSDIRECTIVEANNEXII_FINLANDNATURASPECIES
  MX_HABITATSDIRECTIVEANNEXIVEXCEPTIONGRANTED
  MX_HABITATSDIRECTIVEANNEXVEXCEPTIONGRANTED
  MX_BIRDSDIRECTIVESTATUSAPPENDIX1
  MX_BIRDSDIRECTIVESTATUSAPPENDIX2A
  MX_BIRDSDIRECTIVESTATUSAPPENDIX2B
  MX_BIRDSDIRECTIVESTATUSAPPENDIX3A
  MX_BIRDSDIRECTIVESTATUSAPPENDIX3B
  MX_BIRDSDIRECTIVESTATUSMIGRATORYBIRDS
  MX_CITES_APPENDIXI
  MX_CITES_APPENDIXII
  MX_CITES_APPENDIXIII
  MX_EUREGULATION_CITES_APPENDIXA
  MX_EUREGULATION_CITES_APPENDIXB
  MX_EUREGULATION_CITES_APPENDIXD
  MX_FINNISHENVIRONMENTINSTITUTE2020PROTECTIONPRIORITYSPECIES
  MX_FINNISHENVIRONMENTINSTITUTE2010PROTECTIONPRIORITYSPECIES
  MX_GAMEBIRD
  MX_GAMEMAMMAL
  MX_UNPROTECTEDSPECIES
  MX_NATIONALLYSIGNIFICANTINVASIVESPECIES
  MX_EUINVASIVESPECIESLIST
  MX_QUARANTINEPLANTPEST
  MX_QUALITYPLANTPEST
  MX_OTHERPLANTPEST
  MX_NATIONALINVASIVESPECIESSTRATEGY
  MX_OTHERINVASIVESPECIESLIST
  MX_CONTROLLINGRISKSOFINVASIVEALIENSPECIES
  MX_FINNISHENVIRONMENTINSTITUTE20072010FORESTSPECIES
  MX_FINNISHENVIRONMENTINSTITUTE2020CONSERVATIONPROJECTSPECIES
  MX_FINNISHENVIRONMENTINSTITUTE2020CONSERVATIONPROJECTAAPAMIRESPECIES
  MX_FINNISHENVIRONMENTINSTITUTE2020CONSERVATIONPROJECTVASCULARSPECIES
  MX_CROPWILDRELATIVE
  MX_FINNISHENVIRONMENTINSTITUTE20192021FORESTSPECIES
  MX_FORESTCENTRESPECIES
  MX_REGIONALLYTHREATENED2020_1A
  MX_REGIONALLYTHREATENED2020_1B
  MX_REGIONALLYTHREATENED2020_2A
  MX_REGIONALLYTHREATENED2020_2B
  MX_REGIONALLYTHREATENED2020_3A
  MX_REGIONALLYTHREATENED2020_3B
  MX_REGIONALLYTHREATENED2020_3C
  MX_REGIONALLYTHREATENED2020_4A
  MX_REGIONALLYTHREATENED2020_4B
  MX_REGIONALLYTHREATENED2020_4C
  MX_REGIONALLYTHREATENED2020_4D
  MX_FINLEX160_1997_APPENDIX4
  MX_FINLEX160_1997_APPENDIX4_SPECIALINTEREST
}

enum InvasiveSpeciesCategory {
  _
  MX_INVASIVEEXTREMELYDANGEROUS
  MX_INVASIVEDANGEROUS
  MX_INVASIVEWATCHLIST
}

enum InvasiveSpeciesEstablishment {
  _
  MX_INVASIVEESTABLISHED
  MX_INVASIVESPORADIC
  MX_INVASIVENOTYETINFINLAND
  MX_INVASIVEESTABLISHMENTUNKNOWN
  MX_INVASIVEESTABLISHMENTACCIDENTAL
  MX_INVASIVENONWILD
}

enum InvasiveSpeciesMainGroupListItem {
  _
  HBE_MG2
  HBE_MG3
  HBE_MG4
  HBE_MG5
  HBE_MG6
  HBE_MG7
  HBE_MG8
  HBE_MG9
  HBE_MG12
  HBE_MG11
  HBE_MG10
  HBE_MG13
  HBE_MG14
}

enum IsPartOfSetListItem {
  _
  MX_TAXONSETSYKEBUTTERFLYCENSUSPAPILIONOIDEA
  MX_TAXONSETSYKEBUTTERFLYCENSUSOTHER
  MX_TAXONSETWATERBIRDWATERBIRDS
  MX_TAXONSETWATERBIRDWADERS
  MX_TAXONSETWATERBIRDGULLS
  MX_TAXONSETWATERBIRDPASSERINES
  MX_TAXONSETWATERBIRDAMPHIBIA
  MX_TAXONSETSYKEBUMBLEBEE
  MVL_1201
  MX_TAXONSETSYKEBUMBLEBEEOTHER
  MX_TAXONSETBIRDATLASCOMMON
  MX_TAXONSETBIOMONCOMPLETELISTODONATA
  MX_TAXONSETBIOMONCOMPLETELISTBUTTERFLIES
  MX_TAXONSETBIOMONCOMPLETELISTMOTHS
  MX_TAXONSETBIOMONCOMPLETELISTBOMBUS
  MX_TAXONSETBIOMONCOMPLETELISTAMPHIBIAREPTILIA
  MX_TAXONSETBIOMONCOMPLETELISTLARGEFLOWERS
  MX_TAXONSETBIOMONCOMPLETELISTSUBARCTICPLANTS
  MX_TAXONSETBIOMONCOMPLETELISTMACROLICHENS
  MX_TAXONSETBIOMONCOMPLETELISTBRACKETFUNGI
  MX_TAXONSETBIOMONCOMPLETELISTPRACTICALFUNGI
  MX_TAXONSETSYKEMACROZOOBENTHOS
}

enum NaturaAreaSecureLevel {
  _
  MX_SECURELEVELNONE
  MX_SECURELEVELKM1
  MX_SECURELEVELKM5
  MX_SECURELEVELKM10
  MX_SECURELEVELKM25
  MX_SECURELEVELKM50
  MX_SECURELEVELKM100
  MX_SECURELEVELHIGHEST
  MX_SECURELEVELNOSHOW
}

enum NestSiteSecureLevel {
  _
  MX_SECURELEVELNONE
  MX_SECURELEVELKM1
  MX_SECURELEVELKM5
  MX_SECURELEVELKM10
  MX_SECURELEVELKM25
  MX_SECURELEVELKM50
  MX_SECURELEVELKM100
  MX_SECURELEVELHIGHEST
  MX_SECURELEVELNOSHOW
}

# Names not recommended and no longer (for a long time) commonly used. (For example, names used in the literature in the 20th century, or names transferred to another taxon.
type ObsoleteVernacularName {
  en: [String]
  fi: [String]
  sv: [String]
}

enum OccurrenceInFinland {
  _
  MX_DOESNOTOCCUR
  MX_OCCURRENCEINFINLANDPUBLISHED
  MX_OCCURRENCEINFINLANDCOLLECTED
  MX_OCCURRENCEINFINLANDOBSERVED
  MX_OCCURRENCEINFINLANDPUBLISHEDUNCERTAIN
  MX_OCCURRENCEINFINLANDCOLLECTEDUNCERTAIN
  MX_OCCURRENCEINFINLANDOBSERVEDUNCERTAIN
  MX_OCCURRENCEINFINLANDPUBLISHEDERROR
  MX_OCCURRENCEINFINLANDPRESUMED
}

enum RedListStatus2000Finland {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum RedListStatus2010Finland {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum RedListStatus2015Finland {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum RedListStatus2019Finland {
  _
  MX_IUCNEX
  MX_IUCNEW
  MX_IUCNRE
  MX_IUCNCR
  MX_IUCNEN
  MX_IUCNVU
  MX_IUCNNT
  MX_IUCNLC
  MX_IUCNDD
  MX_IUCNNA
  MX_IUCNNE
}

enum TaxonomicRank {
  _
  MX_SUPERDOMAIN
  MX_DOMAIN
  MX_KINGDOM
  MX_SUBKINGDOM
  MX_INFRAKINGDOM
  MX_SUPERPHYLUM
  MX_PHYLUM
  MX_SUBPHYLUM
  MX_INFRAPHYLUM
  MX_SUPERDIVISION
  MX_DIVISION
  MX_SUBDIVISION
  MX_INFRADIVISION
  MX_SUPERCLASS
  MX_CLASS
  MX_SUBCLASS
  MX_INFRACLASS
  MX_PARVCLASS
  MX_SUPERORDER
  MX_ORDER
  MX_SUBORDER
  MX_INFRAORDER
  MX_PARVORDER
  MX_SUPERFAMILY
  MX_FAMILY
  MX_SUBFAMILY
  MX_TRIBE
  MX_SUBTRIBE
  MX_SUPERGENUS
  MX_GENUS
  MX_NOTHOGENUS
  MX_SUBGENUS
  MX_SECTION
  MX_SUBSECTION
  MX_SERIES
  MX_SUBSERIES
  MX_INFRAGENERICTAXON
  MX_AGGREGATE
  MX_SPECIESAGGREGATE
  MX_SPECIES
  MX_NOTHOSPECIES
  MX_INFRASPECIFICTAXON
  MX_SUBSPECIFICAGGREGATE
  MX_SUBSPECIES
  MX_NOTHOSUBSPECIES
  MX_VARIETY
  MX_SUBVARIETY
  MX_FORM
  MX_SUBFORM
  MX_HYBRID
  MX_ANAMORPH
  MX_ECOTYPE
  MX_POPULATIONGROUP
  MX_INTERGENERICHYBRID
  MX_INFRAGENERICHYBRID
  MX_CULTIVAR
  MX_GROUP
  MX_GREX
}

enum TypeOfOccurrenceListItem {
  _
  MX_DOESNOTOCCUR
  MX_TYPEOFOCCURRENCEOCCURS
  MX_TYPEOFOCCURRENCESTABLEPOPULATION
  MX_TYPEOFOCCURRENCECOMMON
  MX_TYPEOFOCCURRENCERARE
  MX_TYPEOFOCCURRENCEVERYRARE
  MX_TYPEOFOCCURRENCEVAGRANT
  MX_TYPEOFOCCURRENCERAREVAGRANT
  MX_TYPEOFOCCURRENCEMIGRANT
  MX_TYPEOFOCCURRENCEIMPORT
  MX_TYPEOFOCCURRENCEANTHROPOGENIC
  MX_TYPEOFOCCURRENCENOTESTABLISHED
  MX_TYPEOFOCCURRENCEEXTIRPATED
  MX_TYPEOFOCCURRENCEOLDRECORDS
  MX_TYPEOFOCCURRENCEUNCERTAIN
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDRESIDENT
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERAL
  MX_TYPEOFOCCURRENCESPONTANEOUSNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCESPONTANEOUSOLDFORMERLYRESIDENTEXTINCT
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERAL
  MX_TYPEOFOCCURRENCEALIENNEWEPHEMERALONLYOLD
  MX_TYPEOFOCCURRENCEALIENNEWRESIDENT
  MX_TYPEOFOCCURRENCEALIENOLDFORMERLYRESIDENTPOSSIBLYEXTINCT
  MX_TYPEOFOCCURRENCEALIENOLDEXTINCT
  MX_TYPEOFOCCURRENCESMALLDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCENOTABLEDEGREECULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCECOMPLETELYCULTIVATEDORIGIN
  MX_TYPEOFOCCURRENCEONLYCULTIVATED
  MX_TYPEOFOCCURRENCEMAXSHORTDISTANCEESCAPE
  MX_TYPEOFOCCURRENCEMAXSOILIMMIGRANT
  MX_TYPEOFOCCURRENCEMAXREPLANTED
  MX_TYPEOFOCCURRENCEMAXRELICT
  MX_TYPEOFOCCURRENCENOTEVALUATED
  MX_TYPEOFOCCURRENCEREGULARBREEDER
  MX_TYPEOFOCCURRENCEIRREGULARBREEDER
  MX_TYPEOFOCCURRENCEPASSAGEMIGRANT
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYA
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYB
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYC
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYD
  MX_TYPEOFOCCURRENCEBIRDLIFECATEGORYE
  MX_TYPEOFOCCURRENCEOCCURSBASEDONOCCURRENCES
}

enum WinteringSecureLevel {
  _
  MX_SECURELEVELNONE
  MX_SECURELEVELKM1
  MX_SECURELEVELKM5
  MX_SECURELEVELKM10
  MX_SECURELEVELKM25
  MX_SECURELEVELKM50
  MX_SECURELEVELKM100
  MX_SECURELEVELHIGHEST
  MX_SECURELEVELNOSHOW
}

type TaxonConcept2 {
  congruent: [String]
  context: String
  excludes: [String]
  id: String
  includedIn: [String]
  overlaps: [String]
  type: String
}

type TaxonGroupIucnEditors2 {
  context: String
  id: String
  iucnEditor: [String]
  taxonGroup: String!
  type: String
}

type TaxonInteraction2 {
  context: String
  id: String
  interactionType: InteractionType!
  objectLifeStage: ObjectLifeStage
  objectTaxon: String!
  originalPublication: [String]
  subjectLifeStage: SubjectLifeStage
  subjectTaxon: String!
  type: String
}

enum InteractionType {
  MI_TAXONINTERACTIONNEUTRALISM
  MI_TAXONINTERACTIONANTAGONISM
  MI_TAXONINTERACTIONCOMMENSALISM
  MI_TAXONINTERACTIONCOMPETITION
  MI_TAXONINTERACTIONAMENSALISM
  MI_TAXONINTERACTIONMUTUALISM
  MI_TAXONINTERACTIONPREDATION
  MI_TAXONINTERACTIONPARASITISM
  MI_TAXONINTERACTIONECTOPARASITISM
  MI_TAXONINTERACTIONENDOPARASITISM
}

enum ObjectLifeStage {
  _
  MY_LIFESTAGEEGG
  MY_LIFESTAGELARVA
  MY_LIFESTAGEPUPA
  MY_LIFESTAGEJUVENILE
  MY_LIFESTAGENYMPH
  MY_LIFESTAGESUBIMAGO
  MY_LIFESTAGEIMMATURE
  MY_LIFESTAGEADULT
  MY_LIFESTAGEFERTILE
  MY_LIFESTAGESTERILE
  MY_LIFESTAGETADPOLE
  MY_LIFESTAGEEMBRYO
  MY_LIFESTAGESUBADULT
  MY_LIFESTAGEMATURE
  MY_LIFESTAGEPULLUS
  MY_LIFESTAGEHATCHEDEGG
  MY_LIFESTAGEHATCHEDPUPA
  MY_LIFESTAGEGALL
  MY_LIFESTAGEMARKS
  MY_LIFESTAGETRIUNGULIN
}

enum SubjectLifeStage {
  _
  MY_LIFESTAGEEGG
  MY_LIFESTAGELARVA
  MY_LIFESTAGEPUPA
  MY_LIFESTAGEJUVENILE
  MY_LIFESTAGENYMPH
  MY_LIFESTAGESUBIMAGO
  MY_LIFESTAGEIMMATURE
  MY_LIFESTAGEADULT
  MY_LIFESTAGEFERTILE
  MY_LIFESTAGESTERILE
  MY_LIFESTAGETADPOLE
  MY_LIFESTAGEEMBRYO
  MY_LIFESTAGESUBADULT
  MY_LIFESTAGEMATURE
  MY_LIFESTAGEPULLUS
  MY_LIFESTAGEHATCHEDEGG
  MY_LIFESTAGEHATCHEDPUPA
  MY_LIFESTAGEGALL
  MY_LIFESTAGEMARKS
  MY_LIFESTAGETRIUNGULIN
}

type TaxonSet2 {
  context: String
  id: String
  type: String
}

type Trait2 {
  baseUnit: String
  context: String
  dataEntryName: String!
  description: String!
  exampleValues: String
  externalIdentifier: [String]
  hasEnumeration: [String]
  id: String
  name: String!
  partOfGroup: String!
  reference: [String]
  type: String
}

type TraitEnumValue2 {
  context: String
  dataEntryName: String!
  description: String!
  id: String
  name: String!
  sortOrder: Int
  type: String
}

type TraitGroup2 {
  context: String
  description: String!
  id: String
  name: String!
  type: String
}

type Transaction2 {
  # If you choose "Yes, with restrictions", explain the restrictions in the following field "Rights and obligations".
  availableForGeneticResearch: IsGeneticResearchAllowedOnTheGeneticResourceS
  availableForGeneticResearchNotes: String
  away: [String]
  awayOther: Int

  # For statiscal purposes. The collection where the transaction is directed to. Record transactions directed to different collections as separate transactions if you use this field.
  collectionID: String
  context: String

  # Which Luomus' department is shown on loan sheets
  correspondenceHeaderOrganizationCode: String

  # Select the correspondent organization from a list. If not found on the list, you need to add the new organization first.
  correspondentOrganization: String!

  # Name of the corresponding person. If the transaction goes to a private person, write his/her postal address here.
  correspondentPerson: String
  creator: String
  damaged: [String]
  damagedOther: Int
  dateCreated: String
  dateEdited: String

  # Date when the loan needs to be returned.
  dueDate: String
  editNotes: String
  editor: String

  # Sender's ID for the transaction.
  externalTransactionID: String

  # Country where the genetic resource or traditional knowledge was acquired from, provider country, country of origin. List of countries in Kotka is based on ISO 3166 Country Codes -standard and may differ from the country list in ABSCH.
  geneticResourceAcquisitionCountry: String

  # Date when the genetic resource or traditional knowledge was aqcuired.
  geneticResourceAcquisitionDate: String

  # Description of the genetic resource or traditional knowledge (possible identifiers, taxa, number of specimens, region etc.). Instruction source EU DECLARE User manual and QA.
  geneticResourceDescription: String

  # Presence or absence of rights and obligations relating to access and benefit sharing, including rights and obligations regarding subsequent applications and commercialization. Instruction source EU DECLARE user manual and QA.
  geneticResourceRightsAndObligations: String

  # Person or legal entity from whom the user obtained the genetic resources directly, i.e. the previous actor in the value chain. Often a museum or other organization. If a genetic resource is obtained directly from the provider country, the name of the country should be provided. Instruction source EU DECLARE User manual and QA.
  geneticResourceSource: String

  # Choose the type of the genetic resource for statistical and reporting purposes.
  geneticResourceType: TypeOfResource

  # Whether the resource has an IRCC number or not. If not, more information needs to be filled in.
  hasIRCC: Boolean

  # Internationally Recognized Certificate of Compliance. Kotka checks from the ABS Clearing House that the entered IRCC number exists and is valid.
  iRCC: String
  id: String
  ids: String
  internalRemarks: MultiLang

  # Responsible team in our museum.
  localDepartment: LocalDepartment

  # Responsible person in our museum.
  localPerson: String

  # Responsible person's email in our museum.
  localPersonEmail: String

  # For incoming loans, name of the researcher receiving the loan.
  localResearcher: String
  material: MultiLang
  missing: [String]
  missingOther: Int

  # Loan number used in paper loan catalogs or old software (e.g. Curator)
  oldLoanID: String

  # Team or organisation that owns the record and can edit it.
  owner: String
  permits: [Permit2]
  publicRemarks: MultiLang

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # When signed loan receipt was received from the loanee
  receiptReturned: String

  # Are you importing genetic resources, traditional knowledge associated to genetic resources or both?
  resourceImported: WhatAreYouImporting
  returned: [String]
  returnedOther: Int
  sentParcels: MultiLang

  # Means of sending, mail, courier etc.
  sentType: SentType

  # When loan request, loan, gift or exchange was received here.
  transactionRequestReceived: String!

  # Date when the outgoing loan was returned back from the correspondent to the museum
  transactionReturned: String

  # When the transaction was sent out from us
  transactionSent: String

  # Whether the transaction is closed, outstanding or in process.
  transactionStatus: TransactionStatus2

  # What kind of transaction this is.
  transactionType: TransactionType2!
  type: String

  # Is it e.g. non-human genetic material that is going to be used for genetic research as is defined by the protocol?
  underNagoya: Boolean
}

enum IsGeneticResearchAllowedOnTheGeneticResourceS {
  _
  HRA_AVAILABLEFORGENETICRESEARCHYES
  HRA_AVAILABLEFORGENETICRESEARCHWITHRESTRICTIONS
  HRA_AVAILABLEFORGENETICRESEARCHNO
}

enum TypeOfResource {
  _
  HRA_GENETICRESOURCETYPEANIMAL
  HRA_GENETICRESOURCETYPEPLANT
  HRA_GENETICRESOURCETYPEFUNGUS
  HRA_GENETICRESOURCETYPEMICROBE
  HRA_GENETICRESOURCETYPESOIL
  HRA_GENETICRESOURCETYPEAQUA
}

enum LocalDepartment {
  _
  HRA_LOCALDEPARTMENTDIPTERAHYMENOPTERA
  HRA_LOCALDEPARTMENTLEPIDOPTERACOLEOPTERA
  HRA_LOCALDEPARTMENTMETAZOA
  HRA_LOCALDEPARTMENTMONITORING
  HRA_LOCALDEPARTMENTBRYOLOGY
  HRA_LOCALDEPARTMENTGARDEN
  HRA_LOCALDEPARTMENTMYCOLOGY
  HRA_LOCALDEPARTMENTVASCULARPLANTS
}

enum WhatAreYouImporting {
  _
  HRA_RESOURCEIMPORTEDGENETICRESOURCES
  HRA_RESOURCEIMPORTEDTRADITIONALKNOWLEDGE
  HRA_RESOURCEIMPORTEDBOTH
}

enum SentType {
  _
  HRA_SENTTYPEPRIORITY
  HRA_SENTTYPEECONOMY
  HRA_SENTTYPECOURIER
  HRA_SENTTYPECARRIED
  HRA_SENTTYPEOTHER
  HRA_SENTTYPEIMAGE
}

enum TransactionStatus2 {
  _
  HRA_TRANSACTIONSTATUSINPROCESS
  HRA_TRANSACTIONSTATUSOUTSTANDING
  HRA_TRANSACTIONSTATUSCLOSED
}

enum TransactionType2 {
  HRA_TRANSACTIONTYPELOANINCOMING
  HRA_TRANSACTIONTYPEGIFTINCOMING
  HRA_TRANSACTIONTYPEEXCHANGEINCOMING
  HRA_TRANSACTIONTYPELOANOUTGOING
  HRA_TRANSACTIONTYPEGIFTOUTGOING
  HRA_TRANSACTIONTYPEEXCHANGEOUTGOING
  HRA_TRANSACTIONTYPEFIELDCOLLECTION
  HRA_TRANSACTIONTYPEIMPORTNOTICE
  HRA_TRANSACTIONTYPEABSNEGOTIATIONS
  HRA_TRANSACTIONTYPEVIRTUALLOANOUTGOING
}

type TransactionEvent2 {
  context: String
  eventDate: String!
  eventHandler: String!
  eventType: EventType3!
  id: String
  items: [TransactionItem]!
  notes: String
  numberOfPackages: Int
  sentBy: SentBy
  type: String
}

enum EventType3 {
  HRAA_EVENTTYPESEND
  HRAA_EVENTTYPERECEIVE
  HRAA_EVENTTYPEOTHER
}

type TransactionItem {
  collectionID: String
  context: String
  id: String
  itemCount: Int!
  itemID: String
  itemLabel: String
  itemType: ItemType!
  notes: String
  status: Status5!
  type: String
}

enum ItemType {
  HRAB_ITEMTYPESPECIMEN
  HRAB_ITEMTYPESPECIMENBATCH
  HRAB_ITEMTYPEIMAGE
  HRAB_ITEMTYPEOTHER
}

enum Status5 {
  HRAB_STATUSOK
  HRAB_STATUSMISSING
  HRAB_STATUSDAMAGED
}

enum SentBy {
  _
  HRAA_SENTBYPRIORITY
  HRAA_SENTBYECONOMY
  HRAA_SENTBYCOURIER
  HRAA_SENTBYCARRIED
  HRAA_SENTBYOTHER
}

type Translation2 {
  context: String
  en: [JSON]
  fi: [JSON]
  id: String
  sv: [JSON]
  type: String
}

type UnitOfMeasurement2 {
  baseConversion: Float!
  baseUnit: String
  context: String
  id: String
  isBaseUnit: Boolean!
  rdfsLabel: RdfsLabel
  type: String
}

type RdfsLabel {
  en: [String]
  fi: [String]
  sv: [String]
}

type Validator2 {
  context: String
  id: String
  type: String
}

type Video2 {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  originalFilename: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  taxonDescriptionCaption: MultiLang
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
  videoURL: String!
}

type BibliographicResource {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [BibliographicResource2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type PagedView {
  first: String!
  id: String!
  itemsPerPage: String!
  last: String!
  next: String
  previous: String
  type: String!
}

type Concept {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Concept2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Pinkka {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Pinkka2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AdministrativeStatus {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [AdministrativeStatus2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Agent {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Agent2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Annotation {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Annotation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AnnotationOccurrence2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [AnnotationOccurrence]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Area {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Area2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Audio {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Audio2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type BirdSongRecognitionSkillLevel {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [BirdSongRecognitionSkillLevel2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Branch {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Branch2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Checklist {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Checklist2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ChecklistVersion {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [ChecklistVersion2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Collection {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Collection2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type CompleteList {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [CompleteList2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ContentContextDescription {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [ContentContextDescription2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DataField {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DataField2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Dataset {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Dataset2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DateRange {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DateRange2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Device {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Device2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DeviceIndividual {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DeviceIndividual2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Document {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Document2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DownloadRequest {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DownloadRequest2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Endangerment {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Endangerment2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Event2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Event3]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Field {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Field2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Fieldset {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Fieldset2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Form {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Form2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormFooter2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormFooter]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormInstructions {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormInstructions2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormNamedPlaceOptions2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormNamedPlaceOptions]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormOptions2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormOptions]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormPermission {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormPermission2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormPermissionPerson {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormPermissionPerson2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormPermissionSingle {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormPermissionSingle2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormSeason2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormSeason]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Gathering2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Gathering]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type GatheringEvent2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [GatheringEvent]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type GatheringFact2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [GatheringFact]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Habitat2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Habitat3]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Identification2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Identification]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Image {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Image2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Individual {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Individual2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type InformalTaxonGroup {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [InformalTaxonGroup2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type InformationSystem {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [InformationSystem2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IucnRedListEvaluation {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [IucnRedListEvaluation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IucnRedListEvaluationYear {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [IucnRedListEvaluationYear2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IucnRedListTaxonGroup {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [IucnRedListTaxonGroup2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Measurement2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Measurement]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Model {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Model2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Multimedia {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Multimedia2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type NamedPlace {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [NamedPlace2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type News {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [News2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Notification {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Notification2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Occurrence {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Occurrence2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Organization {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Organization2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Pdf {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Pdf2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Permit {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Permit2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Person {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Person2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Preparation {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Preparation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Profile {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Profile2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Publication2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Publication3]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type RegionalStatus {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [RegionalStatus2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Reserve2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Reserve]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Sample {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Sample2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SatelliteTrackingProject {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SatelliteTrackingProject2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SpecimenTransaction {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SpecimenTransaction2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SpecimenTransactionEvent2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SpecimenTransactionEvent]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SubUnit {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SubUnit2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Tag {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Tag2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Taxon {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Taxon2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonCensus3 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonCensus2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonConcept {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonConcept2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonGroupIucnEditors {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonGroupIucnEditors2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonInteraction {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonInteraction2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonSet {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonSet2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Trait {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Trait2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TraitEnumValue {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TraitEnumValue2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TraitGroup {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TraitGroup2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Transaction {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Transaction2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TransactionEvent {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TransactionEvent2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TransactionItem2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TransactionItem]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Translation {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Translation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TypeSpecimen2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TypeSpecimen]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Unit2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Unit]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type UnitFact2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [UnitFact]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type UnitGathering2 {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [UnitGathering]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type UnitOfMeasurement {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [UnitOfMeasurement2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Validator {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Validator2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type Video {
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Video2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type BibliographicResourceVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ConceptVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type PinkkaVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type AdministrativeStatusVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type AgentVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type AnnotationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type AnnotationOccurrenceVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type AreaVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type AudioVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type BirdSongRecognitionSkillLevelVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type BranchVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ChecklistVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ChecklistVersionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type CollectionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type CompleteListVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ContentContextDescriptionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type DataFieldVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type DatasetVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type DateRangeVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type DeviceVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type DeviceIndividualVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type DocumentVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type DownloadRequestVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type EndangermentVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type EventVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FieldVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FieldsetVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormFooterVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormInstructionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormNamedPlaceOptionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormOptionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormPermissionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormPermissionPersonVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormPermissionSingleVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type FormSeasonVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type GatheringVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type GatheringEventVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type GatheringFactVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type HabitatVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type IdentificationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ImageVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type IndividualVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type InformalTaxonGroupVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type InformationSystemVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type IucnRedListEvaluationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type IucnRedListEvaluationYearVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type IucnRedListTaxonGroupVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type MeasurementVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ModelVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type MultimediaVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type NamedPlaceVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type NewsVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type NotificationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type OccurrenceVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type OrganizationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type PdfVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type PermitVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type PersonVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type PreparationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ProfileVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type PublicationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type RegionalStatusVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ReserveVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type SampleVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type SatelliteTrackingProjectVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type SpecimenTransactionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type SpecimenTransactionEventVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type SubUnitVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TagVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TaxonVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TaxonCensusVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TaxonConceptVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TaxonGroupIucnEditorVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TaxonInteractionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TaxonSetVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TraitVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TraitEnumValueVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TraitGroupVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TransactionVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TransactionEventVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TransactionItemVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TranslationVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type TypeSpecimanVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type UnitVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type UnitFactVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type UnitGatheringVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type UnitOfMeasurementVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type ValidatorVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

type VideoVerListItem {
  created: String!
  patch: [JSON]
  version: Int!
}

# Warning: Not every request will work with this viewer type
type ViewerAnyAuth {
  # Return a Bibliographic Resource.
  #
  # Equivalent to GET /BibliographicResource/{id}
  getBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!
  ): BibliographicResource2

  # Return a Concept.
  #
  # Equivalent to GET /Concept/{id}
  getConcept(
    # Id for the Concept
    id: String!
  ): Concept2

  # Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).
  #
  # Equivalent to GET /Pinkka/{id}
  getPinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!
  ): Pinkka2

  # Return a Administrative status.
  #
  # Equivalent to GET /administrativeStatus/{id}
  getadministrativeStatus(
    # Id for the Administrative status
    id: String!
  ): AdministrativeStatus2

  # Return a agent.
  #
  # Equivalent to GET /agent/{id}
  getagent(
    # Id for the agent
    id: String!
  ): Agent2

  # Return a annotation.
  #
  # Equivalent to GET /annotation/{id}
  getannotation(
    # Id for the annotation
    id: String!
  ): Annotation2

  # Return a annotationOccurrence.
  #
  # Equivalent to GET /annotationOccurrence/{id}
  getannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!
  ): AnnotationOccurrence

  # Return a Area.
  #
  # Equivalent to GET /area/{id}
  getarea(
    # Id for the Area
    id: String!
  ): Area2

  # Return a Audio recording.
  #
  # Equivalent to GET /audio/{id}
  getaudio(
    # Id for the Audio recording
    id: String!
  ): Audio2

  # Return a Instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel/{id}
  getbirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!
  ): BirdSongRecognitionSkillLevel2

  # Return a Branch.
  #
  # Equivalent to GET /branch/{id}
  getbranch(
    # Id for the Branch
    id: String!
  ): Branch2

  # Return a Checklist.
  #
  # Equivalent to GET /checklist/{id}
  getchecklist(
    # Id for the Checklist
    id: String!
  ): Checklist2

  # Return a Checklist version.
  #
  # Equivalent to GET /checklistVersion/{id}
  getchecklistVersion(
    # Id for the Checklist version
    id: String!
  ): ChecklistVersion2

  # Return a Collection.
  #
  # Equivalent to GET /collection/{id}
  getcollection(
    # Id for the Collection
    id: String!
  ): Collection2

  # Return a completeList.
  #
  # Equivalent to GET /completeList/{id}
  getcompleteList(
    # Id for the completeList
    id: String!
  ): CompleteList2

  # Return a Instances of this describe one taxon description context.
  #
  # Equivalent to GET /contentContextDescription/{id}
  getcontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!
  ): ContentContextDescription2

  # Return a Data field.
  #
  # Equivalent to GET /dataField/{id}
  getdataField(
    # Id for the Data field
    id: String!
  ): DataField2

  # Return a Tag.
  #
  # Equivalent to GET /dataset/{id}
  getdataset(
    # Id for the Tag
    id: String!
  ): Dataset2

  # Return a dateRange.
  #
  # Equivalent to GET /dateRange/{id}
  getdateRange(
    # Id for the dateRange
    id: String!
  ): DateRange2

  # Return a device.
  #
  # Equivalent to GET /device/{id}
  getdevice(
    # Id for the device
    id: String!
  ): Device2

  # Return a deviceIndividual.
  #
  # Equivalent to GET /deviceIndividual/{id}
  getdeviceIndividual(
    # Id for the deviceIndividual
    id: String!
  ): DeviceIndividual2

  # Return a Submissions.
  #
  # Equivalent to GET /document/{id}
  getdocument(
    # Id for the Submissions
    id: String!
  ): Document2

  # Return a Download request.
  #
  # Equivalent to GET /downloadRequest/{id}
  getdownloadRequest(
    # Id for the Download request
    id: String!
  ): DownloadRequest2

  # Return a Endagerment object.
  #
  # Equivalent to GET /endangerment/{id}
  getendangerment(
    # Id for the Endagerment object
    id: String!
  ): Endangerment2

  # Return a event.
  #
  # Equivalent to GET /event/{id}
  getevent(
    # Id for the event
    id: String!
  ): Event3

  # Return a field.
  #
  # Equivalent to GET /field/{id}
  getfield(
    # Id for the field
    id: String!
  ): Field2

  # Return a fieldset.
  #
  # Equivalent to GET /fieldset/{id}
  getfieldset(
    # Id for the fieldset
    id: String!
  ): Fieldset2

  # Return a form.
  #
  # Equivalent to GET /form/{id}
  getform(
    # Id for the form
    id: String!
  ): Form2

  # Return a formFooter.
  #
  # Equivalent to GET /formFooter/{id}
  getformFooter(
    # Id for the formFooter
    id: String!
  ): FormFooter

  # Return a formInstructions.
  #
  # Equivalent to GET /formInstructions/{id}
  getformInstructions(
    # Id for the formInstructions
    id: String!
  ): FormInstructions2

  # Return a formNamedPlaceOptions.
  #
  # Equivalent to GET /formNamedPlaceOptions/{id}
  getformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!
  ): FormNamedPlaceOptions

  # Return a formOptions.
  #
  # Equivalent to GET /formOptions/{id}
  getformOptions(
    # Id for the formOptions
    id: String!
  ): FormOptions

  # Return a formPermission.
  #
  # Equivalent to GET /formPermission/{id}
  getformPermission(
    # Id for the formPermission
    id: String!
  ): FormPermission2

  # Return a formPermissionPerson.
  #
  # Equivalent to GET /formPermissionPerson/{id}
  getformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!
  ): FormPermissionPerson2

  # Return a formPermissionSingle.
  #
  # Equivalent to GET /formPermissionSingle/{id}
  getformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!
  ): FormPermissionSingle2

  # Return a formSeason.
  #
  # Equivalent to GET /formSeason/{id}
  getformSeason(
    # Id for the formSeason
    id: String!
  ): FormSeason

  # Return a Gathering event.
  #
  # Equivalent to GET /gathering/{id}
  getgathering(
    # Id for the Gathering event
    id: String!
  ): Gathering

  # Return a Global gathering event.
  #
  # Equivalent to GET /gatheringEvent/{id}
  getgatheringEvent(
    # Id for the Global gathering event
    id: String!
  ): GatheringEvent

  # Return a Keruutapahtuman faktat.
  #
  # Equivalent to GET /gatheringFact/{id}
  getgatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!
  ): GatheringFact

  # Return a IUCN Red List Evaluation Habitat.
  #
  # Equivalent to GET /habitat/{id}
  gethabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!
  ): Habitat3

  # Return a Identification.
  #
  # Equivalent to GET /identification/{id}
  getidentification(
    # Id for the Identification
    id: String!
  ): Identification

  # Return a Image.
  #
  # Equivalent to GET /image/{id}
  getimage(
    # Id for the Image
    id: String!
  ): Image2

  # Return a individual.
  #
  # Equivalent to GET /individual/{id}
  getindividual(
    # Id for the individual
    id: String!
  ): Individual2

  # Return a Informal Taxon Group.
  #
  # Equivalent to GET /informalTaxonGroup/{id}
  getinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!
  ): InformalTaxonGroup2

  # Return a Information System.
  #
  # Equivalent to GET /informationSystem/{id}
  getinformationSystem(
    # Id for the Information System
    id: String!
  ): InformationSystem2

  # Return a IUCN Red List Evaluation.
  #
  # Equivalent to GET /iucnRedListEvaluation/{id}
  getiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!
  ): IucnRedListEvaluation2

  # Return a IUCN Evaluation Year.
  #
  # Equivalent to GET /iucnRedListEvaluationYear/{id}
  getiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!
  ): IucnRedListEvaluationYear2

  # Return a IUCN Red List Evaluation Informal Taxon Group.
  #
  # Equivalent to GET /iucnRedListTaxonGroup/{id}
  getiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!
  ): IucnRedListTaxonGroup2

  # Return a measurement.
  #
  # Equivalent to GET /measurement/{id}
  getmeasurement(
    # Id for the measurement
    id: String!
  ): Measurement

  # Return a 3D model.
  #
  # Equivalent to GET /model/{id}
  getmodel(
    # Id for the 3D model
    id: String!
  ): Model2

  # Return a multimedia.
  #
  # Equivalent to GET /multimedia/{id}
  getmultimedia(
    # Id for the multimedia
    id: String!
  ): Multimedia2

  # Return a namedPlace.
  #
  # Equivalent to GET /namedPlace/{id}
  getnamedPlace(
    # Id for the namedPlace
    id: String!
  ): NamedPlace2

  # Return a News.
  #
  # Equivalent to GET /news/{id}
  getnews(
    # Id for the News
    id: String!
  ): News2

  # Return a notification.
  #
  # Equivalent to GET /notification/{id}
  getnotification(
    # Id for the notification
    id: String!
  ): Notification2

  # Return a Occurrence.
  #
  # Equivalent to GET /occurrence/{id}
  getoccurrence(
    # Id for the Occurrence
    id: String!
  ): Occurrence2

  # Return a Organization.
  #
  # Equivalent to GET /organization/{id}
  getorganization(
    # Id for the Organization
    id: String!
  ): Organization2

  # Return a PDF.
  #
  # Equivalent to GET /pdf/{id}
  getpdf(
    # Id for the PDF
    id: String!
  ): Pdf2

  # Return a permit.
  #
  # Equivalent to GET /permit/{id}
  getpermit(
    # Id for the permit
    id: String!
  ): Permit2

  # Return a Person.
  #
  # Equivalent to GET /person/{id}
  getperson(
    # Id for the Person
    id: String!
  ): Person2

  # Return a preparation.
  #
  # Equivalent to GET /preparation/{id}
  getpreparation(
    # Id for the preparation
    id: String!
  ): Preparation2

  # Return a profile.
  #
  # Equivalent to GET /profile/{id}
  getprofile(
    # Id for the profile
    id: String!
  ): Profile2

  # Return a Publication.
  #
  # Equivalent to GET /publication/{id}
  getpublication(
    # Id for the Publication
    id: String!
  ): Publication3

  # Return a Instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to GET /regionalStatus/{id}
  getregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!
  ): RegionalStatus2

  # Return a reserve.
  #
  # Equivalent to GET /reserve/{id}
  getreserve(
    # Id for the reserve
    id: String!
  ): Reserve

  # Return a Specimen sample.
  #
  # Equivalent to GET /sample/{id}
  getsample(
    # Id for the Specimen sample
    id: String!
  ): Sample2

  # Return a Satellite Tracking Project.
  #
  # Equivalent to GET /satelliteTrackingProject/{id}
  getsatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!
  ): SatelliteTrackingProject2

  # Return a Transaction class.
  #
  # Equivalent to GET /specimenTransaction/{id}
  getspecimenTransaction(
    # Id for the Transaction class
    id: String!
  ): SpecimenTransaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /specimenTransactionEvent/{id}
  getspecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): SpecimenTransactionEvent

  # Return a subUnit.
  #
  # Equivalent to GET /subUnit/{id}
  getsubUnit(
    # Id for the subUnit
    id: String!
  ): SubUnit2

  # Return a tag.
  #
  # Equivalent to GET /tag/{id}
  gettag(
    # Id for the tag
    id: String!
  ): Tag2

  # Return a Taxon.
  #
  # Equivalent to GET /taxon/{id}
  gettaxon(
    # Id for the Taxon
    id: String!
  ): Taxon2

  # Return a Completeness of census.
  #
  # Equivalent to GET /taxonCensus/{id}
  gettaxonCensus(
    # Id for the Completeness of census
    id: String!
  ): TaxonCensus2

  # Return a Taxon concept.
  #
  # Equivalent to GET /taxonConcept/{id}
  gettaxonConcept(
    # Id for the Taxon concept
    id: String!
  ): TaxonConcept2

  # Return a IUCN Editors.
  #
  # Equivalent to GET /taxonGroupIucnEditors/{id}
  gettaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!
  ): TaxonGroupIucnEditors2

  # Return a Taxon interaction.
  #
  # Equivalent to GET /taxonInteraction/{id}
  gettaxonInteraction(
    # Id for the Taxon interaction
    id: String!
  ): TaxonInteraction2

  # Return a Instances of this class are a taxon sets.
  #
  # Equivalent to GET /taxonSet/{id}
  gettaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!
  ): TaxonSet2

  # Return a Trait.
  #
  # Equivalent to GET /trait/{id}
  gettrait(
    # Id for the Trait
    id: String!
  ): Trait2

  # Return a Trait enumeration.
  #
  # Equivalent to GET /traitEnumValue/{id}
  gettraitEnumValue(
    # Id for the Trait enumeration
    id: String!
  ): TraitEnumValue2

  # Return a Trait value.
  #
  # Equivalent to GET /traitGroup/{id}
  gettraitGroup(
    # Id for the Trait value
    id: String!
  ): TraitGroup2

  # Return a Transaction.
  #
  # Equivalent to GET /transaction/{id}
  gettransaction(
    # Id for the Transaction
    id: String!
  ): Transaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /transactionEvent/{id}
  gettransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): TransactionEvent2

  # Return a Transaction Item.
  #
  # Equivalent to GET /transactionItem/{id}
  gettransactionItem(
    # Id for the Transaction Item
    id: String!
  ): TransactionItem

  # Return a translation.
  #
  # Equivalent to GET /translation/{id}
  gettranslation(
    # Id for the translation
    id: String!
  ): Translation2

  # Return a Identification.
  #
  # Equivalent to GET /typeSpecimen/{id}
  gettypeSpecimen(
    # Id for the Identification
    id: String!
  ): TypeSpecimen

  # Return a Specimen.
  #
  # Equivalent to GET /unit/{id}
  getunit(
    # Id for the Specimen
    id: String!
  ): Unit

  # Return a Näytteen / havainnon faktat.
  #
  # Equivalent to GET /unitFact/{id}
  getunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!
  ): UnitFact

  # Return a Havainnon keruutiedot.
  #
  # Equivalent to GET /unitGathering/{id}
  getunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!
  ): UnitGathering

  # Return a Unit of measurement.
  #
  # Equivalent to GET /unitOfMeasurement/{id}
  getunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!
  ): UnitOfMeasurement2

  # Return a validator.
  #
  # Equivalent to GET /validator/{id}
  getvalidator(
    # Id for the validator
    id: String!
  ): Validator2

  # Return a Video.
  #
  # Equivalent to GET /video/{id}
  getvideo(
    # Id for the Video
    id: String!
  ): Video2

  # Return list of Bibliographic Resource objects.
  #
  # Equivalent to GET /BibliographicResource
  listBibliographicResource(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): BibliographicResource

  # Return list of Concept objects.
  #
  # Equivalent to GET /Concept
  listConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Concept

  # Return list of Instances of this describe one taxon description context (Pinkka eLearning enviroment) objects.
  #
  # Equivalent to GET /Pinkka
  listPinkka(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Pinkka

  # Return list of Administrative status objects.
  #
  # Equivalent to GET /administrativeStatus
  listadministrativeStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): AdministrativeStatus

  # Return list of agent objects.
  #
  # Equivalent to GET /agent
  listagent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Agent

  # Return list of annotation objects.
  #
  # Equivalent to GET /annotation
  listannotation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Annotation

  # Return list of annotationOccurrence objects.
  #
  # Equivalent to GET /annotationOccurrence
  listannotationOccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): AnnotationOccurrence2

  # Return list of Area objects.
  #
  # Equivalent to GET /area
  listarea(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Area

  # Return list of Audio recording objects.
  #
  # Equivalent to GET /audio
  listaudio(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Audio

  # Return list of Instances of this class are bird song recognition skill levels of a certain area objects.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel
  listbirdSongRecognitionSkillLevel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): BirdSongRecognitionSkillLevel

  # Return list of Branch objects.
  #
  # Equivalent to GET /branch
  listbranch(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Branch

  # Return list of Checklist objects.
  #
  # Equivalent to GET /checklist
  listchecklist(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Checklist

  # Return list of Checklist version objects.
  #
  # Equivalent to GET /checklistVersion
  listchecklistVersion(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): ChecklistVersion

  # Return list of Collection objects.
  #
  # Equivalent to GET /collection
  listcollection(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Collection

  # Return list of completeList objects.
  #
  # Equivalent to GET /completeList
  listcompleteList(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): CompleteList

  # Return list of Instances of this describe one taxon description context objects.
  #
  # Equivalent to GET /contentContextDescription
  listcontentContextDescription(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): ContentContextDescription

  # Return list of Data field objects.
  #
  # Equivalent to GET /dataField
  listdataField(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DataField

  # Return list of Tag objects.
  #
  # Equivalent to GET /dataset
  listdataset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Dataset

  # Return list of dateRange objects.
  #
  # Equivalent to GET /dateRange
  listdateRange(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DateRange

  # Return list of device objects.
  #
  # Equivalent to GET /device
  listdevice(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Device

  # Return list of deviceIndividual objects.
  #
  # Equivalent to GET /deviceIndividual
  listdeviceIndividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DeviceIndividual

  # Return list of Submissions objects.
  #
  # Equivalent to GET /document
  listdocument(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Document

  # Return list of Download request objects.
  #
  # Equivalent to GET /downloadRequest
  listdownloadRequest(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): DownloadRequest

  # Return list of Endagerment object objects.
  #
  # Equivalent to GET /endangerment
  listendangerment(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Endangerment

  # Return list of event objects.
  #
  # Equivalent to GET /event
  listevent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Event2

  # Return list of field objects.
  #
  # Equivalent to GET /field
  listfield(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Field

  # Return list of fieldset objects.
  #
  # Equivalent to GET /fieldset
  listfieldset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Fieldset

  # Return list of form objects.
  #
  # Equivalent to GET /form
  listform(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Form

  # Return list of formFooter objects.
  #
  # Equivalent to GET /formFooter
  listformFooter(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormFooter2

  # Return list of formInstructions objects.
  #
  # Equivalent to GET /formInstructions
  listformInstructions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormInstructions

  # Return list of formNamedPlaceOptions objects.
  #
  # Equivalent to GET /formNamedPlaceOptions
  listformNamedPlaceOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormNamedPlaceOptions2

  # Return list of formOptions objects.
  #
  # Equivalent to GET /formOptions
  listformOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormOptions2

  # Return list of formPermission objects.
  #
  # Equivalent to GET /formPermission
  listformPermission(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormPermission

  # Return list of formPermissionPerson objects.
  #
  # Equivalent to GET /formPermissionPerson
  listformPermissionPerson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormPermissionPerson

  # Return list of formPermissionSingle objects.
  #
  # Equivalent to GET /formPermissionSingle
  listformPermissionSingle(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormPermissionSingle

  # Return list of formSeason objects.
  #
  # Equivalent to GET /formSeason
  listformSeason(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): FormSeason2

  # Return list of Gathering event objects.
  #
  # Equivalent to GET /gathering
  listgathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Gathering2

  # Return list of Global gathering event objects.
  #
  # Equivalent to GET /gatheringEvent
  listgatheringEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): GatheringEvent2

  # Return list of Keruutapahtuman faktat objects.
  #
  # Equivalent to GET /gatheringFact
  listgatheringFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): GatheringFact2

  # Return list of IUCN Red List Evaluation Habitat objects.
  #
  # Equivalent to GET /habitat
  listhabitat(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Habitat2

  # Return list of Identification objects.
  #
  # Equivalent to GET /identification
  listidentification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Identification2

  # Return list of Image objects.
  #
  # Equivalent to GET /image
  listimage(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Image

  # Return list of individual objects.
  #
  # Equivalent to GET /individual
  listindividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Individual

  # Return list of Informal Taxon Group objects.
  #
  # Equivalent to GET /informalTaxonGroup
  listinformalTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): InformalTaxonGroup

  # Return list of Information System objects.
  #
  # Equivalent to GET /informationSystem
  listinformationSystem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): InformationSystem

  # Return list of IUCN Red List Evaluation objects.
  #
  # Equivalent to GET /iucnRedListEvaluation
  listiucnRedListEvaluation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): IucnRedListEvaluation

  # Return list of IUCN Evaluation Year objects.
  #
  # Equivalent to GET /iucnRedListEvaluationYear
  listiucnRedListEvaluationYear(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): IucnRedListEvaluationYear

  # Return list of IUCN Red List Evaluation Informal Taxon Group objects.
  #
  # Equivalent to GET /iucnRedListTaxonGroup
  listiucnRedListTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): IucnRedListTaxonGroup

  # Return list of measurement objects.
  #
  # Equivalent to GET /measurement
  listmeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Measurement2

  # Return list of 3D model objects.
  #
  # Equivalent to GET /model
  listmodel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Model

  # Return list of multimedia objects.
  #
  # Equivalent to GET /multimedia
  listmultimedia(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Multimedia

  # Return list of namedPlace objects.
  #
  # Equivalent to GET /namedPlace
  listnamedPlace(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): NamedPlace

  # Return list of News objects.
  #
  # Equivalent to GET /news
  listnews(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): News

  # Return list of notification objects.
  #
  # Equivalent to GET /notification
  listnotification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Notification

  # Return list of Occurrence objects.
  #
  # Equivalent to GET /occurrence
  listoccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Occurrence

  # Return list of Organization objects.
  #
  # Equivalent to GET /organization
  listorganization(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Organization

  # Return list of PDF objects.
  #
  # Equivalent to GET /pdf
  listpdf(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Pdf

  # Return list of permit objects.
  #
  # Equivalent to GET /permit
  listpermit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Permit

  # Return list of Person objects.
  #
  # Equivalent to GET /person
  listperson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Person

  # Return list of preparation objects.
  #
  # Equivalent to GET /preparation
  listpreparation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Preparation

  # Return list of profile objects.
  #
  # Equivalent to GET /profile
  listprofile(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Profile

  # Return list of Publication objects.
  #
  # Equivalent to GET /publication
  listpublication(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Publication2

  # Return list of Instances of this class tell endangerment of a certain area and notes about the area objects.
  #
  # Equivalent to GET /regionalStatus
  listregionalStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): RegionalStatus

  # Return list of reserve objects.
  #
  # Equivalent to GET /reserve
  listreserve(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Reserve2

  # Return list of Specimen sample objects.
  #
  # Equivalent to GET /sample
  listsample(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Sample

  # Return list of Satellite Tracking Project objects.
  #
  # Equivalent to GET /satelliteTrackingProject
  listsatelliteTrackingProject(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SatelliteTrackingProject

  # Return list of Transaction class objects.
  #
  # Equivalent to GET /specimenTransaction
  listspecimenTransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SpecimenTransaction

  # Return list of Transaction Event objects.
  #
  # Equivalent to GET /specimenTransactionEvent
  listspecimenTransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SpecimenTransactionEvent2

  # Return list of subUnit objects.
  #
  # Equivalent to GET /subUnit
  listsubUnit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): SubUnit

  # Return list of tag objects.
  #
  # Equivalent to GET /tag
  listtag(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Tag

  # Return list of Taxon objects.
  #
  # Equivalent to GET /taxon
  listtaxon(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Taxon

  # Return list of Completeness of census objects.
  #
  # Equivalent to GET /taxonCensus
  listtaxonCensus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonCensus3

  # Return list of Taxon concept objects.
  #
  # Equivalent to GET /taxonConcept
  listtaxonConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonConcept

  # Return list of IUCN Editors objects.
  #
  # Equivalent to GET /taxonGroupIucnEditors
  listtaxonGroupIucnEditors(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonGroupIucnEditors

  # Return list of Taxon interaction objects.
  #
  # Equivalent to GET /taxonInteraction
  listtaxonInteraction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonInteraction

  # Return list of Instances of this class are a taxon sets objects.
  #
  # Equivalent to GET /taxonSet
  listtaxonSet(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TaxonSet

  # Return list of Trait objects.
  #
  # Equivalent to GET /trait
  listtrait(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Trait

  # Return list of Trait enumeration objects.
  #
  # Equivalent to GET /traitEnumValue
  listtraitEnumValue(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TraitEnumValue

  # Return list of Trait value objects.
  #
  # Equivalent to GET /traitGroup
  listtraitGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TraitGroup

  # Return list of Transaction objects.
  #
  # Equivalent to GET /transaction
  listtransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Transaction

  # Return list of Transaction Event objects.
  #
  # Equivalent to GET /transactionEvent
  listtransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TransactionEvent

  # Return list of Transaction Item objects.
  #
  # Equivalent to GET /transactionItem
  listtransactionItem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TransactionItem2

  # Return list of translation objects.
  #
  # Equivalent to GET /translation
  listtranslation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Translation

  # Return list of Identification objects.
  #
  # Equivalent to GET /typeSpecimen
  listtypeSpecimen(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): TypeSpecimen2

  # Return list of Specimen objects.
  #
  # Equivalent to GET /unit
  listunit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Unit2

  # Return list of Näytteen / havainnon faktat objects.
  #
  # Equivalent to GET /unitFact
  listunitFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): UnitFact2

  # Return list of Havainnon keruutiedot objects.
  #
  # Equivalent to GET /unitGathering
  listunitGathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): UnitGathering2

  # Return list of Unit of measurement objects.
  #
  # Equivalent to GET /unitOfMeasurement
  listunitOfMeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): UnitOfMeasurement

  # Return list of validator objects.
  #
  # Equivalent to GET /validator
  listvalidator(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Validator

  # Return list of Video objects.
  #
  # Equivalent to GET /video
  listvideo(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Sort by
    sort: String
  ): Video

  # Return a Bibliographic Resource.
  #
  # Equivalent to GET /BibliographicResource/{id}/_ver/{number}
  versionBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!

    # Version number for the Bibliographic Resource
    number: Float!
  ): BibliographicResource2

  # Return a Concept.
  #
  # Equivalent to GET /Concept/{id}/_ver/{number}
  versionConcept(
    # Id for the Concept
    id: String!

    # Version number for the Concept
    number: Float!
  ): Concept2

  # Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).
  #
  # Equivalent to GET /Pinkka/{id}/_ver/{number}
  versionPinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!

    # Version number for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    number: Float!
  ): Pinkka2

  # Return a Administrative status.
  #
  # Equivalent to GET /administrativeStatus/{id}/_ver/{number}
  versionadministrativeStatus(
    # Id for the Administrative status
    id: String!

    # Version number for the Administrative status
    number: Float!
  ): AdministrativeStatus2

  # Return a agent.
  #
  # Equivalent to GET /agent/{id}/_ver/{number}
  versionagent(
    # Id for the agent
    id: String!

    # Version number for the agent
    number: Float!
  ): Agent2

  # Return a annotation.
  #
  # Equivalent to GET /annotation/{id}/_ver/{number}
  versionannotation(
    # Id for the annotation
    id: String!

    # Version number for the annotation
    number: Float!
  ): Annotation2

  # Return a annotationOccurrence.
  #
  # Equivalent to GET /annotationOccurrence/{id}/_ver/{number}
  versionannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!

    # Version number for the annotationOccurrence
    number: Float!
  ): AnnotationOccurrence

  # Return a Area.
  #
  # Equivalent to GET /area/{id}/_ver/{number}
  versionarea(
    # Id for the Area
    id: String!

    # Version number for the Area
    number: Float!
  ): Area2

  # Return a Audio recording.
  #
  # Equivalent to GET /audio/{id}/_ver/{number}
  versionaudio(
    # Id for the Audio recording
    id: String!

    # Version number for the Audio recording
    number: Float!
  ): Audio2

  # Return a Instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel/{id}/_ver/{number}
  versionbirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!

    # Version number for the Instances of this class are bird song recognition skill levels of a certain area
    number: Float!
  ): BirdSongRecognitionSkillLevel2

  # Return a Branch.
  #
  # Equivalent to GET /branch/{id}/_ver/{number}
  versionbranch(
    # Id for the Branch
    id: String!

    # Version number for the Branch
    number: Float!
  ): Branch2

  # Return a Checklist.
  #
  # Equivalent to GET /checklist/{id}/_ver/{number}
  versionchecklist(
    # Id for the Checklist
    id: String!

    # Version number for the Checklist
    number: Float!
  ): Checklist2

  # Return a Checklist version.
  #
  # Equivalent to GET /checklistVersion/{id}/_ver/{number}
  versionchecklistVersion(
    # Id for the Checklist version
    id: String!

    # Version number for the Checklist version
    number: Float!
  ): ChecklistVersion2

  # Return a Collection.
  #
  # Equivalent to GET /collection/{id}/_ver/{number}
  versioncollection(
    # Id for the Collection
    id: String!

    # Version number for the Collection
    number: Float!
  ): Collection2

  # Return a completeList.
  #
  # Equivalent to GET /completeList/{id}/_ver/{number}
  versioncompleteList(
    # Id for the completeList
    id: String!

    # Version number for the completeList
    number: Float!
  ): CompleteList2

  # Return a Instances of this describe one taxon description context.
  #
  # Equivalent to GET /contentContextDescription/{id}/_ver/{number}
  versioncontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!

    # Version number for the Instances of this describe one taxon description context
    number: Float!
  ): ContentContextDescription2

  # Return a Data field.
  #
  # Equivalent to GET /dataField/{id}/_ver/{number}
  versiondataField(
    # Id for the Data field
    id: String!

    # Version number for the Data field
    number: Float!
  ): DataField2

  # Return a Tag.
  #
  # Equivalent to GET /dataset/{id}/_ver/{number}
  versiondataset(
    # Id for the Tag
    id: String!

    # Version number for the Tag
    number: Float!
  ): Dataset2

  # Return a dateRange.
  #
  # Equivalent to GET /dateRange/{id}/_ver/{number}
  versiondateRange(
    # Id for the dateRange
    id: String!

    # Version number for the dateRange
    number: Float!
  ): DateRange2

  # Return a device.
  #
  # Equivalent to GET /device/{id}/_ver/{number}
  versiondevice(
    # Id for the device
    id: String!

    # Version number for the device
    number: Float!
  ): Device2

  # Return a deviceIndividual.
  #
  # Equivalent to GET /deviceIndividual/{id}/_ver/{number}
  versiondeviceIndividual(
    # Id for the deviceIndividual
    id: String!

    # Version number for the deviceIndividual
    number: Float!
  ): DeviceIndividual2

  # Return a Submissions.
  #
  # Equivalent to GET /document/{id}/_ver/{number}
  versiondocument(
    # Id for the Submissions
    id: String!

    # Version number for the Submissions
    number: Float!
  ): Document2

  # Return a Download request.
  #
  # Equivalent to GET /downloadRequest/{id}/_ver/{number}
  versiondownloadRequest(
    # Id for the Download request
    id: String!

    # Version number for the Download request
    number: Float!
  ): DownloadRequest2

  # Return a Endagerment object.
  #
  # Equivalent to GET /endangerment/{id}/_ver/{number}
  versionendangerment(
    # Id for the Endagerment object
    id: String!

    # Version number for the Endagerment object
    number: Float!
  ): Endangerment2

  # Return a event.
  #
  # Equivalent to GET /event/{id}/_ver/{number}
  versionevent(
    # Id for the event
    id: String!

    # Version number for the event
    number: Float!
  ): Event3

  # Return a field.
  #
  # Equivalent to GET /field/{id}/_ver/{number}
  versionfield(
    # Id for the field
    id: String!

    # Version number for the field
    number: Float!
  ): Field2

  # Return a fieldset.
  #
  # Equivalent to GET /fieldset/{id}/_ver/{number}
  versionfieldset(
    # Id for the fieldset
    id: String!

    # Version number for the fieldset
    number: Float!
  ): Fieldset2

  # Return a form.
  #
  # Equivalent to GET /form/{id}/_ver/{number}
  versionform(
    # Id for the form
    id: String!

    # Version number for the form
    number: Float!
  ): Form2

  # Return a formFooter.
  #
  # Equivalent to GET /formFooter/{id}/_ver/{number}
  versionformFooter(
    # Id for the formFooter
    id: String!

    # Version number for the formFooter
    number: Float!
  ): FormFooter

  # Return a formInstructions.
  #
  # Equivalent to GET /formInstructions/{id}/_ver/{number}
  versionformInstructions(
    # Id for the formInstructions
    id: String!

    # Version number for the formInstructions
    number: Float!
  ): FormInstructions2

  # Return a formNamedPlaceOptions.
  #
  # Equivalent to GET /formNamedPlaceOptions/{id}/_ver/{number}
  versionformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!

    # Version number for the formNamedPlaceOptions
    number: Float!
  ): FormNamedPlaceOptions

  # Return a formOptions.
  #
  # Equivalent to GET /formOptions/{id}/_ver/{number}
  versionformOptions(
    # Id for the formOptions
    id: String!

    # Version number for the formOptions
    number: Float!
  ): FormOptions

  # Return a formPermission.
  #
  # Equivalent to GET /formPermission/{id}/_ver/{number}
  versionformPermission(
    # Id for the formPermission
    id: String!

    # Version number for the formPermission
    number: Float!
  ): FormPermission2

  # Return a formPermissionPerson.
  #
  # Equivalent to GET /formPermissionPerson/{id}/_ver/{number}
  versionformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!

    # Version number for the formPermissionPerson
    number: Float!
  ): FormPermissionPerson2

  # Return a formPermissionSingle.
  #
  # Equivalent to GET /formPermissionSingle/{id}/_ver/{number}
  versionformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!

    # Version number for the formPermissionSingle
    number: Float!
  ): FormPermissionSingle2

  # Return a formSeason.
  #
  # Equivalent to GET /formSeason/{id}/_ver/{number}
  versionformSeason(
    # Id for the formSeason
    id: String!

    # Version number for the formSeason
    number: Float!
  ): FormSeason

  # Return a Gathering event.
  #
  # Equivalent to GET /gathering/{id}/_ver/{number}
  versiongathering(
    # Id for the Gathering event
    id: String!

    # Version number for the Gathering event
    number: Float!
  ): Gathering

  # Return a Global gathering event.
  #
  # Equivalent to GET /gatheringEvent/{id}/_ver/{number}
  versiongatheringEvent(
    # Id for the Global gathering event
    id: String!

    # Version number for the Global gathering event
    number: Float!
  ): GatheringEvent

  # Return a Keruutapahtuman faktat.
  #
  # Equivalent to GET /gatheringFact/{id}/_ver/{number}
  versiongatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!

    # Version number for the Keruutapahtuman faktat
    number: Float!
  ): GatheringFact

  # Return a IUCN Red List Evaluation Habitat.
  #
  # Equivalent to GET /habitat/{id}/_ver/{number}
  versionhabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!

    # Version number for the IUCN Red List Evaluation Habitat
    number: Float!
  ): Habitat3

  # Return a Identification.
  #
  # Equivalent to GET /identification/{id}/_ver/{number}
  versionidentification(
    # Id for the Identification
    id: String!

    # Version number for the Identification
    number: Float!
  ): Identification

  # Return a Image.
  #
  # Equivalent to GET /image/{id}/_ver/{number}
  versionimage(
    # Id for the Image
    id: String!

    # Version number for the Image
    number: Float!
  ): Image2

  # Return a individual.
  #
  # Equivalent to GET /individual/{id}/_ver/{number}
  versionindividual(
    # Id for the individual
    id: String!

    # Version number for the individual
    number: Float!
  ): Individual2

  # Return a Informal Taxon Group.
  #
  # Equivalent to GET /informalTaxonGroup/{id}/_ver/{number}
  versioninformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!

    # Version number for the Informal Taxon Group
    number: Float!
  ): InformalTaxonGroup2

  # Return a Information System.
  #
  # Equivalent to GET /informationSystem/{id}/_ver/{number}
  versioninformationSystem(
    # Id for the Information System
    id: String!

    # Version number for the Information System
    number: Float!
  ): InformationSystem2

  # Return a IUCN Red List Evaluation.
  #
  # Equivalent to GET /iucnRedListEvaluation/{id}/_ver/{number}
  versioniucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!

    # Version number for the IUCN Red List Evaluation
    number: Float!
  ): IucnRedListEvaluation2

  # Return a IUCN Evaluation Year.
  #
  # Equivalent to GET /iucnRedListEvaluationYear/{id}/_ver/{number}
  versioniucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!

    # Version number for the IUCN Evaluation Year
    number: Float!
  ): IucnRedListEvaluationYear2

  # Return a IUCN Red List Evaluation Informal Taxon Group.
  #
  # Equivalent to GET /iucnRedListTaxonGroup/{id}/_ver/{number}
  versioniucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!

    # Version number for the IUCN Red List Evaluation Informal Taxon Group
    number: Float!
  ): IucnRedListTaxonGroup2

  # Return a measurement.
  #
  # Equivalent to GET /measurement/{id}/_ver/{number}
  versionmeasurement(
    # Id for the measurement
    id: String!

    # Version number for the measurement
    number: Float!
  ): Measurement

  # Return a 3D model.
  #
  # Equivalent to GET /model/{id}/_ver/{number}
  versionmodel(
    # Id for the 3D model
    id: String!

    # Version number for the 3D model
    number: Float!
  ): Model2

  # Return a multimedia.
  #
  # Equivalent to GET /multimedia/{id}/_ver/{number}
  versionmultimedia(
    # Id for the multimedia
    id: String!

    # Version number for the multimedia
    number: Float!
  ): Multimedia2

  # Return a namedPlace.
  #
  # Equivalent to GET /namedPlace/{id}/_ver/{number}
  versionnamedPlace(
    # Id for the namedPlace
    id: String!

    # Version number for the namedPlace
    number: Float!
  ): NamedPlace2

  # Return a News.
  #
  # Equivalent to GET /news/{id}/_ver/{number}
  versionnews(
    # Id for the News
    id: String!

    # Version number for the News
    number: Float!
  ): News2

  # Return a notification.
  #
  # Equivalent to GET /notification/{id}/_ver/{number}
  versionnotification(
    # Id for the notification
    id: String!

    # Version number for the notification
    number: Float!
  ): Notification2

  # Return a Occurrence.
  #
  # Equivalent to GET /occurrence/{id}/_ver/{number}
  versionoccurrence(
    # Id for the Occurrence
    id: String!

    # Version number for the Occurrence
    number: Float!
  ): Occurrence2

  # Return a Organization.
  #
  # Equivalent to GET /organization/{id}/_ver/{number}
  versionorganization(
    # Id for the Organization
    id: String!

    # Version number for the Organization
    number: Float!
  ): Organization2

  # Return a PDF.
  #
  # Equivalent to GET /pdf/{id}/_ver/{number}
  versionpdf(
    # Id for the PDF
    id: String!

    # Version number for the PDF
    number: Float!
  ): Pdf2

  # Return a permit.
  #
  # Equivalent to GET /permit/{id}/_ver/{number}
  versionpermit(
    # Id for the permit
    id: String!

    # Version number for the permit
    number: Float!
  ): Permit2

  # Return a Person.
  #
  # Equivalent to GET /person/{id}/_ver/{number}
  versionperson(
    # Id for the Person
    id: String!

    # Version number for the Person
    number: Float!
  ): Person2

  # Return a preparation.
  #
  # Equivalent to GET /preparation/{id}/_ver/{number}
  versionpreparation(
    # Id for the preparation
    id: String!

    # Version number for the preparation
    number: Float!
  ): Preparation2

  # Return a profile.
  #
  # Equivalent to GET /profile/{id}/_ver/{number}
  versionprofile(
    # Id for the profile
    id: String!

    # Version number for the profile
    number: Float!
  ): Profile2

  # Return a Publication.
  #
  # Equivalent to GET /publication/{id}/_ver/{number}
  versionpublication(
    # Id for the Publication
    id: String!

    # Version number for the Publication
    number: Float!
  ): Publication3

  # Return a Instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to GET /regionalStatus/{id}/_ver/{number}
  versionregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!

    # Version number for the Instances of this class tell endangerment of a certain area and notes about the area
    number: Float!
  ): RegionalStatus2

  # Return a reserve.
  #
  # Equivalent to GET /reserve/{id}/_ver/{number}
  versionreserve(
    # Id for the reserve
    id: String!

    # Version number for the reserve
    number: Float!
  ): Reserve

  # Return a Bibliographic Resource.
  #
  # Equivalent to GET /BibliographicResource/{id}/_ver
  versionsOfBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [BibliographicResourceVerListItem]

  # Return a Concept.
  #
  # Equivalent to GET /Concept/{id}/_ver
  versionsOfConcept(
    # Id for the Concept
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ConceptVerListItem]

  # Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).
  #
  # Equivalent to GET /Pinkka/{id}/_ver
  versionsOfPinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PinkkaVerListItem]

  # Return a Administrative status.
  #
  # Equivalent to GET /administrativeStatus/{id}/_ver
  versionsOfadministrativeStatus(
    # Id for the Administrative status
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AdministrativeStatusVerListItem]

  # Return a agent.
  #
  # Equivalent to GET /agent/{id}/_ver
  versionsOfagent(
    # Id for the agent
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AgentVerListItem]

  # Return a annotation.
  #
  # Equivalent to GET /annotation/{id}/_ver
  versionsOfannotation(
    # Id for the annotation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AnnotationVerListItem]

  # Return a annotationOccurrence.
  #
  # Equivalent to GET /annotationOccurrence/{id}/_ver
  versionsOfannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AnnotationOccurrenceVerListItem]

  # Return a Area.
  #
  # Equivalent to GET /area/{id}/_ver
  versionsOfarea(
    # Id for the Area
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AreaVerListItem]

  # Return a Audio recording.
  #
  # Equivalent to GET /audio/{id}/_ver
  versionsOfaudio(
    # Id for the Audio recording
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [AudioVerListItem]

  # Return a Instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to GET /birdSongRecognitionSkillLevel/{id}/_ver
  versionsOfbirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [BirdSongRecognitionSkillLevelVerListItem]

  # Return a Branch.
  #
  # Equivalent to GET /branch/{id}/_ver
  versionsOfbranch(
    # Id for the Branch
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [BranchVerListItem]

  # Return a Checklist.
  #
  # Equivalent to GET /checklist/{id}/_ver
  versionsOfchecklist(
    # Id for the Checklist
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ChecklistVerListItem]

  # Return a Checklist version.
  #
  # Equivalent to GET /checklistVersion/{id}/_ver
  versionsOfchecklistVersion(
    # Id for the Checklist version
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ChecklistVersionVerListItem]

  # Return a Collection.
  #
  # Equivalent to GET /collection/{id}/_ver
  versionsOfcollection(
    # Id for the Collection
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [CollectionVerListItem]

  # Return a completeList.
  #
  # Equivalent to GET /completeList/{id}/_ver
  versionsOfcompleteList(
    # Id for the completeList
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [CompleteListVerListItem]

  # Return a Instances of this describe one taxon description context.
  #
  # Equivalent to GET /contentContextDescription/{id}/_ver
  versionsOfcontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ContentContextDescriptionVerListItem]

  # Return a Data field.
  #
  # Equivalent to GET /dataField/{id}/_ver
  versionsOfdataField(
    # Id for the Data field
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DataFieldVerListItem]

  # Return a Tag.
  #
  # Equivalent to GET /dataset/{id}/_ver
  versionsOfdataset(
    # Id for the Tag
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DatasetVerListItem]

  # Return a dateRange.
  #
  # Equivalent to GET /dateRange/{id}/_ver
  versionsOfdateRange(
    # Id for the dateRange
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DateRangeVerListItem]

  # Return a device.
  #
  # Equivalent to GET /device/{id}/_ver
  versionsOfdevice(
    # Id for the device
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DeviceVerListItem]

  # Return a deviceIndividual.
  #
  # Equivalent to GET /deviceIndividual/{id}/_ver
  versionsOfdeviceIndividual(
    # Id for the deviceIndividual
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DeviceIndividualVerListItem]

  # Return a Submissions.
  #
  # Equivalent to GET /document/{id}/_ver
  versionsOfdocument(
    # Id for the Submissions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DocumentVerListItem]

  # Return a Download request.
  #
  # Equivalent to GET /downloadRequest/{id}/_ver
  versionsOfdownloadRequest(
    # Id for the Download request
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [DownloadRequestVerListItem]

  # Return a Endagerment object.
  #
  # Equivalent to GET /endangerment/{id}/_ver
  versionsOfendangerment(
    # Id for the Endagerment object
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [EndangermentVerListItem]

  # Return a event.
  #
  # Equivalent to GET /event/{id}/_ver
  versionsOfevent(
    # Id for the event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [EventVerListItem]

  # Return a field.
  #
  # Equivalent to GET /field/{id}/_ver
  versionsOffield(
    # Id for the field
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FieldVerListItem]

  # Return a fieldset.
  #
  # Equivalent to GET /fieldset/{id}/_ver
  versionsOffieldset(
    # Id for the fieldset
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FieldsetVerListItem]

  # Return a form.
  #
  # Equivalent to GET /form/{id}/_ver
  versionsOfform(
    # Id for the form
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormVerListItem]

  # Return a formFooter.
  #
  # Equivalent to GET /formFooter/{id}/_ver
  versionsOfformFooter(
    # Id for the formFooter
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormFooterVerListItem]

  # Return a formInstructions.
  #
  # Equivalent to GET /formInstructions/{id}/_ver
  versionsOfformInstructions(
    # Id for the formInstructions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormInstructionVerListItem]

  # Return a formNamedPlaceOptions.
  #
  # Equivalent to GET /formNamedPlaceOptions/{id}/_ver
  versionsOfformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormNamedPlaceOptionVerListItem]

  # Return a formOptions.
  #
  # Equivalent to GET /formOptions/{id}/_ver
  versionsOfformOptions(
    # Id for the formOptions
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormOptionVerListItem]

  # Return a formPermission.
  #
  # Equivalent to GET /formPermission/{id}/_ver
  versionsOfformPermission(
    # Id for the formPermission
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormPermissionVerListItem]

  # Return a formPermissionPerson.
  #
  # Equivalent to GET /formPermissionPerson/{id}/_ver
  versionsOfformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormPermissionPersonVerListItem]

  # Return a formPermissionSingle.
  #
  # Equivalent to GET /formPermissionSingle/{id}/_ver
  versionsOfformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormPermissionSingleVerListItem]

  # Return a formSeason.
  #
  # Equivalent to GET /formSeason/{id}/_ver
  versionsOfformSeason(
    # Id for the formSeason
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [FormSeasonVerListItem]

  # Return a Gathering event.
  #
  # Equivalent to GET /gathering/{id}/_ver
  versionsOfgathering(
    # Id for the Gathering event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [GatheringVerListItem]

  # Return a Global gathering event.
  #
  # Equivalent to GET /gatheringEvent/{id}/_ver
  versionsOfgatheringEvent(
    # Id for the Global gathering event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [GatheringEventVerListItem]

  # Return a Keruutapahtuman faktat.
  #
  # Equivalent to GET /gatheringFact/{id}/_ver
  versionsOfgatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [GatheringFactVerListItem]

  # Return a IUCN Red List Evaluation Habitat.
  #
  # Equivalent to GET /habitat/{id}/_ver
  versionsOfhabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [HabitatVerListItem]

  # Return a Identification.
  #
  # Equivalent to GET /identification/{id}/_ver
  versionsOfidentification(
    # Id for the Identification
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IdentificationVerListItem]

  # Return a Image.
  #
  # Equivalent to GET /image/{id}/_ver
  versionsOfimage(
    # Id for the Image
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ImageVerListItem]

  # Return a individual.
  #
  # Equivalent to GET /individual/{id}/_ver
  versionsOfindividual(
    # Id for the individual
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IndividualVerListItem]

  # Return a Informal Taxon Group.
  #
  # Equivalent to GET /informalTaxonGroup/{id}/_ver
  versionsOfinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [InformalTaxonGroupVerListItem]

  # Return a Information System.
  #
  # Equivalent to GET /informationSystem/{id}/_ver
  versionsOfinformationSystem(
    # Id for the Information System
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [InformationSystemVerListItem]

  # Return a IUCN Red List Evaluation.
  #
  # Equivalent to GET /iucnRedListEvaluation/{id}/_ver
  versionsOfiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IucnRedListEvaluationVerListItem]

  # Return a IUCN Evaluation Year.
  #
  # Equivalent to GET /iucnRedListEvaluationYear/{id}/_ver
  versionsOfiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IucnRedListEvaluationYearVerListItem]

  # Return a IUCN Red List Evaluation Informal Taxon Group.
  #
  # Equivalent to GET /iucnRedListTaxonGroup/{id}/_ver
  versionsOfiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [IucnRedListTaxonGroupVerListItem]

  # Return a measurement.
  #
  # Equivalent to GET /measurement/{id}/_ver
  versionsOfmeasurement(
    # Id for the measurement
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [MeasurementVerListItem]

  # Return a 3D model.
  #
  # Equivalent to GET /model/{id}/_ver
  versionsOfmodel(
    # Id for the 3D model
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ModelVerListItem]

  # Return a multimedia.
  #
  # Equivalent to GET /multimedia/{id}/_ver
  versionsOfmultimedia(
    # Id for the multimedia
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [MultimediaVerListItem]

  # Return a namedPlace.
  #
  # Equivalent to GET /namedPlace/{id}/_ver
  versionsOfnamedPlace(
    # Id for the namedPlace
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [NamedPlaceVerListItem]

  # Return a News.
  #
  # Equivalent to GET /news/{id}/_ver
  versionsOfnews(
    # Id for the News
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [NewsVerListItem]

  # Return a notification.
  #
  # Equivalent to GET /notification/{id}/_ver
  versionsOfnotification(
    # Id for the notification
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [NotificationVerListItem]

  # Return a Occurrence.
  #
  # Equivalent to GET /occurrence/{id}/_ver
  versionsOfoccurrence(
    # Id for the Occurrence
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [OccurrenceVerListItem]

  # Return a Organization.
  #
  # Equivalent to GET /organization/{id}/_ver
  versionsOforganization(
    # Id for the Organization
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [OrganizationVerListItem]

  # Return a PDF.
  #
  # Equivalent to GET /pdf/{id}/_ver
  versionsOfpdf(
    # Id for the PDF
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PdfVerListItem]

  # Return a permit.
  #
  # Equivalent to GET /permit/{id}/_ver
  versionsOfpermit(
    # Id for the permit
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PermitVerListItem]

  # Return a Person.
  #
  # Equivalent to GET /person/{id}/_ver
  versionsOfperson(
    # Id for the Person
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PersonVerListItem]

  # Return a preparation.
  #
  # Equivalent to GET /preparation/{id}/_ver
  versionsOfpreparation(
    # Id for the preparation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PreparationVerListItem]

  # Return a profile.
  #
  # Equivalent to GET /profile/{id}/_ver
  versionsOfprofile(
    # Id for the profile
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ProfileVerListItem]

  # Return a Publication.
  #
  # Equivalent to GET /publication/{id}/_ver
  versionsOfpublication(
    # Id for the Publication
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [PublicationVerListItem]

  # Return a Instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to GET /regionalStatus/{id}/_ver
  versionsOfregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [RegionalStatusVerListItem]

  # Return a reserve.
  #
  # Equivalent to GET /reserve/{id}/_ver
  versionsOfreserve(
    # Id for the reserve
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ReserveVerListItem]

  # Return a Specimen sample.
  #
  # Equivalent to GET /sample/{id}/_ver
  versionsOfsample(
    # Id for the Specimen sample
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SampleVerListItem]

  # Return a Satellite Tracking Project.
  #
  # Equivalent to GET /satelliteTrackingProject/{id}/_ver
  versionsOfsatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SatelliteTrackingProjectVerListItem]

  # Return a Transaction class.
  #
  # Equivalent to GET /specimenTransaction/{id}/_ver
  versionsOfspecimenTransaction(
    # Id for the Transaction class
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SpecimenTransactionVerListItem]

  # Return a Transaction Event.
  #
  # Equivalent to GET /specimenTransactionEvent/{id}/_ver
  versionsOfspecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SpecimenTransactionEventVerListItem]

  # Return a subUnit.
  #
  # Equivalent to GET /subUnit/{id}/_ver
  versionsOfsubUnit(
    # Id for the subUnit
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [SubUnitVerListItem]

  # Return a tag.
  #
  # Equivalent to GET /tag/{id}/_ver
  versionsOftag(
    # Id for the tag
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TagVerListItem]

  # Return a Taxon.
  #
  # Equivalent to GET /taxon/{id}/_ver
  versionsOftaxon(
    # Id for the Taxon
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonVerListItem]

  # Return a Completeness of census.
  #
  # Equivalent to GET /taxonCensus/{id}/_ver
  versionsOftaxonCensus(
    # Id for the Completeness of census
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonCensusVerListItem]

  # Return a Taxon concept.
  #
  # Equivalent to GET /taxonConcept/{id}/_ver
  versionsOftaxonConcept(
    # Id for the Taxon concept
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonConceptVerListItem]

  # Return a IUCN Editors.
  #
  # Equivalent to GET /taxonGroupIucnEditors/{id}/_ver
  versionsOftaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonGroupIucnEditorVerListItem]

  # Return a Taxon interaction.
  #
  # Equivalent to GET /taxonInteraction/{id}/_ver
  versionsOftaxonInteraction(
    # Id for the Taxon interaction
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonInteractionVerListItem]

  # Return a Instances of this class are a taxon sets.
  #
  # Equivalent to GET /taxonSet/{id}/_ver
  versionsOftaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TaxonSetVerListItem]

  # Return a Trait.
  #
  # Equivalent to GET /trait/{id}/_ver
  versionsOftrait(
    # Id for the Trait
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TraitVerListItem]

  # Return a Trait enumeration.
  #
  # Equivalent to GET /traitEnumValue/{id}/_ver
  versionsOftraitEnumValue(
    # Id for the Trait enumeration
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TraitEnumValueVerListItem]

  # Return a Trait value.
  #
  # Equivalent to GET /traitGroup/{id}/_ver
  versionsOftraitGroup(
    # Id for the Trait value
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TraitGroupVerListItem]

  # Return a Transaction.
  #
  # Equivalent to GET /transaction/{id}/_ver
  versionsOftransaction(
    # Id for the Transaction
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TransactionVerListItem]

  # Return a Transaction Event.
  #
  # Equivalent to GET /transactionEvent/{id}/_ver
  versionsOftransactionEvent(
    # Id for the Transaction Event
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TransactionEventVerListItem]

  # Return a Transaction Item.
  #
  # Equivalent to GET /transactionItem/{id}/_ver
  versionsOftransactionItem(
    # Id for the Transaction Item
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TransactionItemVerListItem]

  # Return a translation.
  #
  # Equivalent to GET /translation/{id}/_ver
  versionsOftranslation(
    # Id for the translation
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TranslationVerListItem]

  # Return a Identification.
  #
  # Equivalent to GET /typeSpecimen/{id}/_ver
  versionsOftypeSpecimen(
    # Id for the Identification
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [TypeSpecimanVerListItem]

  # Return a Specimen.
  #
  # Equivalent to GET /unit/{id}/_ver
  versionsOfunit(
    # Id for the Specimen
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitVerListItem]

  # Return a Näytteen / havainnon faktat.
  #
  # Equivalent to GET /unitFact/{id}/_ver
  versionsOfunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitFactVerListItem]

  # Return a Havainnon keruutiedot.
  #
  # Equivalent to GET /unitGathering/{id}/_ver
  versionsOfunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitGatheringVerListItem]

  # Return a Unit of measurement.
  #
  # Equivalent to GET /unitOfMeasurement/{id}/_ver
  versionsOfunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [UnitOfMeasurementVerListItem]

  # Return a validator.
  #
  # Equivalent to GET /validator/{id}/_ver
  versionsOfvalidator(
    # Id for the validator
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [ValidatorVerListItem]

  # Return a Video.
  #
  # Equivalent to GET /video/{id}/_ver
  versionsOfvideo(
    # Id for the Video
    id: String!

    # If this is true then the response will include json-patch that was generated by comparing the previous version.
    includeDiff: Boolean
  ): [VideoVerListItem]

  # Return a Specimen sample.
  #
  # Equivalent to GET /sample/{id}/_ver/{number}
  versionsample(
    # Id for the Specimen sample
    id: String!

    # Version number for the Specimen sample
    number: Float!
  ): Sample2

  # Return a Satellite Tracking Project.
  #
  # Equivalent to GET /satelliteTrackingProject/{id}/_ver/{number}
  versionsatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!

    # Version number for the Satellite Tracking Project
    number: Float!
  ): SatelliteTrackingProject2

  # Return a Transaction class.
  #
  # Equivalent to GET /specimenTransaction/{id}/_ver/{number}
  versionspecimenTransaction(
    # Id for the Transaction class
    id: String!

    # Version number for the Transaction class
    number: Float!
  ): SpecimenTransaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /specimenTransactionEvent/{id}/_ver/{number}
  versionspecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!

    # Version number for the Transaction Event
    number: Float!
  ): SpecimenTransactionEvent

  # Return a subUnit.
  #
  # Equivalent to GET /subUnit/{id}/_ver/{number}
  versionsubUnit(
    # Id for the subUnit
    id: String!

    # Version number for the subUnit
    number: Float!
  ): SubUnit2

  # Return a tag.
  #
  # Equivalent to GET /tag/{id}/_ver/{number}
  versiontag(
    # Id for the tag
    id: String!

    # Version number for the tag
    number: Float!
  ): Tag2

  # Return a Taxon.
  #
  # Equivalent to GET /taxon/{id}/_ver/{number}
  versiontaxon(
    # Id for the Taxon
    id: String!

    # Version number for the Taxon
    number: Float!
  ): Taxon2

  # Return a Completeness of census.
  #
  # Equivalent to GET /taxonCensus/{id}/_ver/{number}
  versiontaxonCensus(
    # Id for the Completeness of census
    id: String!

    # Version number for the Completeness of census
    number: Float!
  ): TaxonCensus2

  # Return a Taxon concept.
  #
  # Equivalent to GET /taxonConcept/{id}/_ver/{number}
  versiontaxonConcept(
    # Id for the Taxon concept
    id: String!

    # Version number for the Taxon concept
    number: Float!
  ): TaxonConcept2

  # Return a IUCN Editors.
  #
  # Equivalent to GET /taxonGroupIucnEditors/{id}/_ver/{number}
  versiontaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!

    # Version number for the IUCN Editors
    number: Float!
  ): TaxonGroupIucnEditors2

  # Return a Taxon interaction.
  #
  # Equivalent to GET /taxonInteraction/{id}/_ver/{number}
  versiontaxonInteraction(
    # Id for the Taxon interaction
    id: String!

    # Version number for the Taxon interaction
    number: Float!
  ): TaxonInteraction2

  # Return a Instances of this class are a taxon sets.
  #
  # Equivalent to GET /taxonSet/{id}/_ver/{number}
  versiontaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!

    # Version number for the Instances of this class are a taxon sets
    number: Float!
  ): TaxonSet2

  # Return a Trait.
  #
  # Equivalent to GET /trait/{id}/_ver/{number}
  versiontrait(
    # Id for the Trait
    id: String!

    # Version number for the Trait
    number: Float!
  ): Trait2

  # Return a Trait enumeration.
  #
  # Equivalent to GET /traitEnumValue/{id}/_ver/{number}
  versiontraitEnumValue(
    # Id for the Trait enumeration
    id: String!

    # Version number for the Trait enumeration
    number: Float!
  ): TraitEnumValue2

  # Return a Trait value.
  #
  # Equivalent to GET /traitGroup/{id}/_ver/{number}
  versiontraitGroup(
    # Id for the Trait value
    id: String!

    # Version number for the Trait value
    number: Float!
  ): TraitGroup2

  # Return a Transaction.
  #
  # Equivalent to GET /transaction/{id}/_ver/{number}
  versiontransaction(
    # Id for the Transaction
    id: String!

    # Version number for the Transaction
    number: Float!
  ): Transaction2

  # Return a Transaction Event.
  #
  # Equivalent to GET /transactionEvent/{id}/_ver/{number}
  versiontransactionEvent(
    # Id for the Transaction Event
    id: String!

    # Version number for the Transaction Event
    number: Float!
  ): TransactionEvent2

  # Return a Transaction Item.
  #
  # Equivalent to GET /transactionItem/{id}/_ver/{number}
  versiontransactionItem(
    # Id for the Transaction Item
    id: String!

    # Version number for the Transaction Item
    number: Float!
  ): TransactionItem

  # Return a translation.
  #
  # Equivalent to GET /translation/{id}/_ver/{number}
  versiontranslation(
    # Id for the translation
    id: String!

    # Version number for the translation
    number: Float!
  ): Translation2

  # Return a Identification.
  #
  # Equivalent to GET /typeSpecimen/{id}/_ver/{number}
  versiontypeSpecimen(
    # Id for the Identification
    id: String!

    # Version number for the Identification
    number: Float!
  ): TypeSpecimen

  # Return a Specimen.
  #
  # Equivalent to GET /unit/{id}/_ver/{number}
  versionunit(
    # Id for the Specimen
    id: String!

    # Version number for the Specimen
    number: Float!
  ): Unit

  # Return a Näytteen / havainnon faktat.
  #
  # Equivalent to GET /unitFact/{id}/_ver/{number}
  versionunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!

    # Version number for the Näytteen / havainnon faktat
    number: Float!
  ): UnitFact

  # Return a Havainnon keruutiedot.
  #
  # Equivalent to GET /unitGathering/{id}/_ver/{number}
  versionunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!

    # Version number for the Havainnon keruutiedot
    number: Float!
  ): UnitGathering

  # Return a Unit of measurement.
  #
  # Equivalent to GET /unitOfMeasurement/{id}/_ver/{number}
  versionunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!

    # Version number for the Unit of measurement
    number: Float!
  ): UnitOfMeasurement2

  # Return a validator.
  #
  # Equivalent to GET /validator/{id}/_ver/{number}
  versionvalidator(
    # Id for the validator
    id: String!

    # Version number for the validator
    number: Float!
  ): Validator2

  # Return a Video.
  #
  # Equivalent to GET /video/{id}/_ver/{number}
  versionvideo(
    # Id for the Video
    id: String!

    # Version number for the Video
    number: Float!
  ): Video2
}

# Basic auth credentials for security protocol 'basic'
input BasicInput {
  password: String
  username: String
}

type Mutation {
  # A viewer that wraps all operations authenticated via security scheme 'basic', which is of type 'http' 'basic'
  mutationViewerBasicAuth(username: String!, password: String!): MutationViewerBasicAuth

  # A viewer that wraps operations for all available authentication mechanisms
  mutationViewerAnyAuth(basic: BasicInput): MutationViewerAnyAuth
}

# A viewer for security scheme 'basic'
type MutationViewerBasicAuth {
  # Bulk insert objects.
  #
  # Equivalent to POST /_bulk
  bulk(requestBody: BulkInput): Bulk

  # Delete Bibliographic Resource
  #
  # Equivalent to DELETE /BibliographicResource/{id}
  deleteBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!
  ): BibliographicResource3

  # Delete Concept
  #
  # Equivalent to DELETE /Concept/{id}
  deleteConcept(
    # Id for the Concept
    id: String!
  ): Concept3

  # Delete Instances of this describe one taxon description context (Pinkka eLearning enviroment)
  #
  # Equivalent to DELETE /Pinkka/{id}
  deletePinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!
  ): Pinkka3

  # Delete Administrative status
  #
  # Equivalent to DELETE /administrativeStatus/{id}
  deleteadministrativeStatus(
    # Id for the Administrative status
    id: String!
  ): AdministrativeStatus3

  # Delete agent
  #
  # Equivalent to DELETE /agent/{id}
  deleteagent(
    # Id for the agent
    id: String!
  ): Agent3

  # Delete annotation
  #
  # Equivalent to DELETE /annotation/{id}
  deleteannotation(
    # Id for the annotation
    id: String!
  ): Annotation3

  # Delete annotationOccurrence
  #
  # Equivalent to DELETE /annotationOccurrence/{id}
  deleteannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!
  ): AnnotationOccurrence3

  # Delete Area
  #
  # Equivalent to DELETE /area/{id}
  deletearea(
    # Id for the Area
    id: String!
  ): Area3

  # Delete Audio recording
  #
  # Equivalent to DELETE /audio/{id}
  deleteaudio(
    # Id for the Audio recording
    id: String!
  ): Audio3

  # Delete Instances of this class are bird song recognition skill levels of a certain area
  #
  # Equivalent to DELETE /birdSongRecognitionSkillLevel/{id}
  deletebirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!
  ): BirdSongRecognitionSkillLevel3

  # Delete Branch
  #
  # Equivalent to DELETE /branch/{id}
  deletebranch(
    # Id for the Branch
    id: String!
  ): Branch3

  # Delete Checklist
  #
  # Equivalent to DELETE /checklist/{id}
  deletechecklist(
    # Id for the Checklist
    id: String!
  ): Checklist3

  # Delete Checklist version
  #
  # Equivalent to DELETE /checklistVersion/{id}
  deletechecklistVersion(
    # Id for the Checklist version
    id: String!
  ): ChecklistVersion3

  # Delete Collection
  #
  # Equivalent to DELETE /collection/{id}
  deletecollection(
    # Id for the Collection
    id: String!
  ): Collection3

  # Delete completeList
  #
  # Equivalent to DELETE /completeList/{id}
  deletecompleteList(
    # Id for the completeList
    id: String!
  ): CompleteList3

  # Delete Instances of this describe one taxon description context
  #
  # Equivalent to DELETE /contentContextDescription/{id}
  deletecontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!
  ): ContentContextDescription3

  # Delete Data field
  #
  # Equivalent to DELETE /dataField/{id}
  deletedataField(
    # Id for the Data field
    id: String!
  ): DataField3

  # Delete Tag
  #
  # Equivalent to DELETE /dataset/{id}
  deletedataset(
    # Id for the Tag
    id: String!
  ): Dataset3

  # Delete dateRange
  #
  # Equivalent to DELETE /dateRange/{id}
  deletedateRange(
    # Id for the dateRange
    id: String!
  ): DateRange3

  # Delete device
  #
  # Equivalent to DELETE /device/{id}
  deletedevice(
    # Id for the device
    id: String!
  ): Device3

  # Delete deviceIndividual
  #
  # Equivalent to DELETE /deviceIndividual/{id}
  deletedeviceIndividual(
    # Id for the deviceIndividual
    id: String!
  ): DeviceIndividual3

  # Delete Submissions
  #
  # Equivalent to DELETE /document/{id}
  deletedocument(
    # Id for the Submissions
    id: String!
  ): Document3

  # Delete Download request
  #
  # Equivalent to DELETE /downloadRequest/{id}
  deletedownloadRequest(
    # Id for the Download request
    id: String!
  ): DownloadRequest3

  # Delete Endagerment object
  #
  # Equivalent to DELETE /endangerment/{id}
  deleteendangerment(
    # Id for the Endagerment object
    id: String!
  ): Endangerment4

  # Delete event
  #
  # Equivalent to DELETE /event/{id}
  deleteevent(
    # Id for the event
    id: String!
  ): Event4

  # Delete field
  #
  # Equivalent to DELETE /field/{id}
  deletefield(
    # Id for the field
    id: String!
  ): Field3

  # Delete fieldset
  #
  # Equivalent to DELETE /fieldset/{id}
  deletefieldset(
    # Id for the fieldset
    id: String!
  ): Fieldset3

  # Delete form
  #
  # Equivalent to DELETE /form/{id}
  deleteform(
    # Id for the form
    id: String!
  ): Form3

  # Delete formFooter
  #
  # Equivalent to DELETE /formFooter/{id}
  deleteformFooter(
    # Id for the formFooter
    id: String!
  ): FormFooter3

  # Delete formInstructions
  #
  # Equivalent to DELETE /formInstructions/{id}
  deleteformInstructions(
    # Id for the formInstructions
    id: String!
  ): FormInstruction

  # Delete formNamedPlaceOptions
  #
  # Equivalent to DELETE /formNamedPlaceOptions/{id}
  deleteformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!
  ): FormNamedPlaceOption

  # Delete formOptions
  #
  # Equivalent to DELETE /formOptions/{id}
  deleteformOptions(
    # Id for the formOptions
    id: String!
  ): FormOption

  # Delete formPermission
  #
  # Equivalent to DELETE /formPermission/{id}
  deleteformPermission(
    # Id for the formPermission
    id: String!
  ): FormPermission3

  # Delete formPermissionPerson
  #
  # Equivalent to DELETE /formPermissionPerson/{id}
  deleteformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!
  ): FormPermissionPerson3

  # Delete formPermissionSingle
  #
  # Equivalent to DELETE /formPermissionSingle/{id}
  deleteformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!
  ): FormPermissionSingle3

  # Delete formSeason
  #
  # Equivalent to DELETE /formSeason/{id}
  deleteformSeason(
    # Id for the formSeason
    id: String!
  ): FormSeason3

  # Delete Gathering event
  #
  # Equivalent to DELETE /gathering/{id}
  deletegathering(
    # Id for the Gathering event
    id: String!
  ): Gathering3

  # Delete Global gathering event
  #
  # Equivalent to DELETE /gatheringEvent/{id}
  deletegatheringEvent(
    # Id for the Global gathering event
    id: String!
  ): GatheringEvent3

  # Delete Keruutapahtuman faktat
  #
  # Equivalent to DELETE /gatheringFact/{id}
  deletegatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!
  ): GatheringFact3

  # Delete IUCN Red List Evaluation Habitat
  #
  # Equivalent to DELETE /habitat/{id}
  deletehabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!
  ): Habitat4

  # Delete Identification
  #
  # Equivalent to DELETE /identification/{id}
  deleteidentification(
    # Id for the Identification
    id: String!
  ): Identification3

  # Delete Image
  #
  # Equivalent to DELETE /image/{id}
  deleteimage(
    # Id for the Image
    id: String!
  ): Image3

  # Delete individual
  #
  # Equivalent to DELETE /individual/{id}
  deleteindividual(
    # Id for the individual
    id: String!
  ): Individual3

  # Delete Informal Taxon Group
  #
  # Equivalent to DELETE /informalTaxonGroup/{id}
  deleteinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!
  ): InformalTaxonGroup3

  # Delete Information System
  #
  # Equivalent to DELETE /informationSystem/{id}
  deleteinformationSystem(
    # Id for the Information System
    id: String!
  ): InformationSystem3

  # Delete IUCN Red List Evaluation
  #
  # Equivalent to DELETE /iucnRedListEvaluation/{id}
  deleteiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!
  ): IucnRedListEvaluation3

  # Delete IUCN Evaluation Year
  #
  # Equivalent to DELETE /iucnRedListEvaluationYear/{id}
  deleteiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!
  ): IucnRedListEvaluationYear3

  # Delete IUCN Red List Evaluation Informal Taxon Group
  #
  # Equivalent to DELETE /iucnRedListTaxonGroup/{id}
  deleteiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!
  ): IucnRedListTaxonGroup3

  # Delete measurement
  #
  # Equivalent to DELETE /measurement/{id}
  deletemeasurement(
    # Id for the measurement
    id: String!
  ): Measurement3

  # Delete 3D model
  #
  # Equivalent to DELETE /model/{id}
  deletemodel(
    # Id for the 3D model
    id: String!
  ): Model3

  # Delete multimedia
  #
  # Equivalent to DELETE /multimedia/{id}
  deletemultimedia(
    # Id for the multimedia
    id: String!
  ): Multimedia3

  # Delete namedPlace
  #
  # Equivalent to DELETE /namedPlace/{id}
  deletenamedPlace(
    # Id for the namedPlace
    id: String!
  ): NamedPlace3

  # Delete News
  #
  # Equivalent to DELETE /news/{id}
  deletenews(
    # Id for the News
    id: String!
  ): News3

  # Delete notification
  #
  # Equivalent to DELETE /notification/{id}
  deletenotification(
    # Id for the notification
    id: String!
  ): Notification3

  # Delete Occurrence
  #
  # Equivalent to DELETE /occurrence/{id}
  deleteoccurrence(
    # Id for the Occurrence
    id: String!
  ): Occurrence3

  # Delete Organization
  #
  # Equivalent to DELETE /organization/{id}
  deleteorganization(
    # Id for the Organization
    id: String!
  ): Organization3

  # Delete PDF
  #
  # Equivalent to DELETE /pdf/{id}
  deletepdf(
    # Id for the PDF
    id: String!
  ): Pdf3

  # Delete permit
  #
  # Equivalent to DELETE /permit/{id}
  deletepermit(
    # Id for the permit
    id: String!
  ): Permit3

  # Delete Person
  #
  # Equivalent to DELETE /person/{id}
  deleteperson(
    # Id for the Person
    id: String!
  ): Person3

  # Delete preparation
  #
  # Equivalent to DELETE /preparation/{id}
  deletepreparation(
    # Id for the preparation
    id: String!
  ): Preparation3

  # Delete profile
  #
  # Equivalent to DELETE /profile/{id}
  deleteprofile(
    # Id for the profile
    id: String!
  ): Profile3

  # Delete Publication
  #
  # Equivalent to DELETE /publication/{id}
  deletepublication(
    # Id for the Publication
    id: String!
  ): Publication4

  # Delete Instances of this class tell endangerment of a certain area and notes about the area
  #
  # Equivalent to DELETE /regionalStatus/{id}
  deleteregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!
  ): RegionalStatus3

  # Delete reserve
  #
  # Equivalent to DELETE /reserve/{id}
  deletereserve(
    # Id for the reserve
    id: String!
  ): Reserve3

  # Delete Specimen sample
  #
  # Equivalent to DELETE /sample/{id}
  deletesample(
    # Id for the Specimen sample
    id: String!
  ): Sample3

  # Delete Satellite Tracking Project
  #
  # Equivalent to DELETE /satelliteTrackingProject/{id}
  deletesatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!
  ): SatelliteTrackingProject3

  # Delete Transaction class
  #
  # Equivalent to DELETE /specimenTransaction/{id}
  deletespecimenTransaction(
    # Id for the Transaction class
    id: String!
  ): SpecimenTransaction3

  # Delete Transaction Event
  #
  # Equivalent to DELETE /specimenTransactionEvent/{id}
  deletespecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): SpecimenTransactionEvent3

  # Delete subUnit
  #
  # Equivalent to DELETE /subUnit/{id}
  deletesubUnit(
    # Id for the subUnit
    id: String!
  ): SubUnit3

  # Delete tag
  #
  # Equivalent to DELETE /tag/{id}
  deletetag(
    # Id for the tag
    id: String!
  ): Tag3

  # Delete Taxon
  #
  # Equivalent to DELETE /taxon/{id}
  deletetaxon(
    # Id for the Taxon
    id: String!
  ): Taxon3

  # Delete Completeness of census
  #
  # Equivalent to DELETE /taxonCensus/{id}
  deletetaxonCensus(
    # Id for the Completeness of census
    id: String!
  ): TaxonCensus4

  # Delete Taxon concept
  #
  # Equivalent to DELETE /taxonConcept/{id}
  deletetaxonConcept(
    # Id for the Taxon concept
    id: String!
  ): TaxonConcept3

  # Delete IUCN Editors
  #
  # Equivalent to DELETE /taxonGroupIucnEditors/{id}
  deletetaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!
  ): TaxonGroupIucnEditor

  # Delete Taxon interaction
  #
  # Equivalent to DELETE /taxonInteraction/{id}
  deletetaxonInteraction(
    # Id for the Taxon interaction
    id: String!
  ): TaxonInteraction3

  # Delete Instances of this class are a taxon sets
  #
  # Equivalent to DELETE /taxonSet/{id}
  deletetaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!
  ): TaxonSet3

  # Delete Trait
  #
  # Equivalent to DELETE /trait/{id}
  deletetrait(
    # Id for the Trait
    id: String!
  ): Trait3

  # Delete Trait enumeration
  #
  # Equivalent to DELETE /traitEnumValue/{id}
  deletetraitEnumValue(
    # Id for the Trait enumeration
    id: String!
  ): TraitEnumValue3

  # Delete Trait value
  #
  # Equivalent to DELETE /traitGroup/{id}
  deletetraitGroup(
    # Id for the Trait value
    id: String!
  ): TraitGroup3

  # Delete Transaction
  #
  # Equivalent to DELETE /transaction/{id}
  deletetransaction(
    # Id for the Transaction
    id: String!
  ): Transaction3

  # Delete Transaction Event
  #
  # Equivalent to DELETE /transactionEvent/{id}
  deletetransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): TransactionEvent3

  # Delete Transaction Item
  #
  # Equivalent to DELETE /transactionItem/{id}
  deletetransactionItem(
    # Id for the Transaction Item
    id: String!
  ): TransactionItem3

  # Delete translation
  #
  # Equivalent to DELETE /translation/{id}
  deletetranslation(
    # Id for the translation
    id: String!
  ): Translation3

  # Delete Identification
  #
  # Equivalent to DELETE /typeSpecimen/{id}
  deletetypeSpecimen(
    # Id for the Identification
    id: String!
  ): TypeSpeciman

  # Delete Specimen
  #
  # Equivalent to DELETE /unit/{id}
  deleteunit(
    # Id for the Specimen
    id: String!
  ): Unit3

  # Delete Näytteen / havainnon faktat
  #
  # Equivalent to DELETE /unitFact/{id}
  deleteunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!
  ): UnitFact3

  # Delete Havainnon keruutiedot
  #
  # Equivalent to DELETE /unitGathering/{id}
  deleteunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!
  ): UnitGathering3

  # Delete Unit of measurement
  #
  # Equivalent to DELETE /unitOfMeasurement/{id}
  deleteunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!
  ): UnitOfMeasurement3

  # Delete validator
  #
  # Equivalent to DELETE /validator/{id}
  deletevalidator(
    # Id for the validator
    id: String!
  ): Validator3

  # Delete Video
  #
  # Equivalent to DELETE /video/{id}
  deletevideo(
    # Id for the Video
    id: String!
  ): Video3

  # Patch bibliographic resource (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching bibliographic resource.
  #
  # Equivalent to PATCH /BibliographicResource
  patchBibliographicResource(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch concept (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching concept.
  #
  # Equivalent to PATCH /Concept
  patchConcept(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this describe one taxon description context (pinkka elearning enviroment) (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this describe one taxon description context (pinkka elearning enviroment).
  #
  # Equivalent to PATCH /Pinkka
  patchPinkka(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch administrative status (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching administrative status.
  #
  # Equivalent to PATCH /administrativeStatus
  patchadministrativeStatus(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch agent (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching agent.
  #
  # Equivalent to PATCH /agent
  patchagent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch annotation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching annotation.
  #
  # Equivalent to PATCH /annotation
  patchannotation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch annotationoccurrence (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching annotationoccurrence.
  #
  # Equivalent to PATCH /annotationOccurrence
  patchannotationOccurrence(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch area (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching area.
  #
  # Equivalent to PATCH /area
  patcharea(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch audio recording (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching audio recording.
  #
  # Equivalent to PATCH /audio
  patchaudio(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this class are bird song recognition skill levels of a certain area (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to PATCH /birdSongRecognitionSkillLevel
  patchbirdSongRecognitionSkillLevel(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch branch (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching branch.
  #
  # Equivalent to PATCH /branch
  patchbranch(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch checklist (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching checklist.
  #
  # Equivalent to PATCH /checklist
  patchchecklist(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch checklist version (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching checklist version.
  #
  # Equivalent to PATCH /checklistVersion
  patchchecklistVersion(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch collection (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching collection.
  #
  # Equivalent to PATCH /collection
  patchcollection(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch completelist (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching completelist.
  #
  # Equivalent to PATCH /completeList
  patchcompleteList(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this describe one taxon description context (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this describe one taxon description context.
  #
  # Equivalent to PATCH /contentContextDescription
  patchcontentContextDescription(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch data field (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching data field.
  #
  # Equivalent to PATCH /dataField
  patchdataField(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch tag (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching tag.
  #
  # Equivalent to PATCH /dataset
  patchdataset(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch daterange (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching daterange.
  #
  # Equivalent to PATCH /dateRange
  patchdateRange(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch device (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching device.
  #
  # Equivalent to PATCH /device
  patchdevice(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch deviceindividual (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching deviceindividual.
  #
  # Equivalent to PATCH /deviceIndividual
  patchdeviceIndividual(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch submissions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching submissions.
  #
  # Equivalent to PATCH /document
  patchdocument(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch download request (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching download request.
  #
  # Equivalent to PATCH /downloadRequest
  patchdownloadRequest(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch endagerment object (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching endagerment object.
  #
  # Equivalent to PATCH /endangerment
  patchendangerment(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching event.
  #
  # Equivalent to PATCH /event
  patchevent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch field (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching field.
  #
  # Equivalent to PATCH /field
  patchfield(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch fieldset (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching fieldset.
  #
  # Equivalent to PATCH /fieldset
  patchfieldset(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch form (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching form.
  #
  # Equivalent to PATCH /form
  patchform(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formfooter (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formfooter.
  #
  # Equivalent to PATCH /formFooter
  patchformFooter(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch forminstructions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching forminstructions.
  #
  # Equivalent to PATCH /formInstructions
  patchformInstructions(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formnamedplaceoptions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formnamedplaceoptions.
  #
  # Equivalent to PATCH /formNamedPlaceOptions
  patchformNamedPlaceOptions(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formoptions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formoptions.
  #
  # Equivalent to PATCH /formOptions
  patchformOptions(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formpermission (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formpermission.
  #
  # Equivalent to PATCH /formPermission
  patchformPermission(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formpermissionperson (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formpermissionperson.
  #
  # Equivalent to PATCH /formPermissionPerson
  patchformPermissionPerson(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formpermissionsingle (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formpermissionsingle.
  #
  # Equivalent to PATCH /formPermissionSingle
  patchformPermissionSingle(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formseason (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formseason.
  #
  # Equivalent to PATCH /formSeason
  patchformSeason(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch gathering event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching gathering event.
  #
  # Equivalent to PATCH /gathering
  patchgathering(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch global gathering event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching global gathering event.
  #
  # Equivalent to PATCH /gatheringEvent
  patchgatheringEvent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch keruutapahtuman faktat (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching keruutapahtuman faktat.
  #
  # Equivalent to PATCH /gatheringFact
  patchgatheringFact(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn red list evaluation habitat (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn red list evaluation habitat.
  #
  # Equivalent to PATCH /habitat
  patchhabitat(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch identification (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching identification.
  #
  # Equivalent to PATCH /identification
  patchidentification(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch image (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching image.
  #
  # Equivalent to PATCH /image
  patchimage(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch individual (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching individual.
  #
  # Equivalent to PATCH /individual
  patchindividual(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch informal taxon group (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching informal taxon group.
  #
  # Equivalent to PATCH /informalTaxonGroup
  patchinformalTaxonGroup(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch information system (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching information system.
  #
  # Equivalent to PATCH /informationSystem
  patchinformationSystem(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn red list evaluation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn red list evaluation.
  #
  # Equivalent to PATCH /iucnRedListEvaluation
  patchiucnRedListEvaluation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn evaluation year (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn evaluation year.
  #
  # Equivalent to PATCH /iucnRedListEvaluationYear
  patchiucnRedListEvaluationYear(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn red list evaluation informal taxon group (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn red list evaluation informal taxon group.
  #
  # Equivalent to PATCH /iucnRedListTaxonGroup
  patchiucnRedListTaxonGroup(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch measurement (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching measurement.
  #
  # Equivalent to PATCH /measurement
  patchmeasurement(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch 3d model (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching 3d model.
  #
  # Equivalent to PATCH /model
  patchmodel(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch multimedia (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching multimedia.
  #
  # Equivalent to PATCH /multimedia
  patchmultimedia(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch namedplace (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching namedplace.
  #
  # Equivalent to PATCH /namedPlace
  patchnamedPlace(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch news (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching news.
  #
  # Equivalent to PATCH /news
  patchnews(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch notification (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching notification.
  #
  # Equivalent to PATCH /notification
  patchnotification(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch occurrence (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching occurrence.
  #
  # Equivalent to PATCH /occurrence
  patchoccurrence(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch organization (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching organization.
  #
  # Equivalent to PATCH /organization
  patchorganization(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch pdf (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching pdf.
  #
  # Equivalent to PATCH /pdf
  patchpdf(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch permit (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching permit.
  #
  # Equivalent to PATCH /permit
  patchpermit(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch person (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching person.
  #
  # Equivalent to PATCH /person
  patchperson(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch preparation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching preparation.
  #
  # Equivalent to PATCH /preparation
  patchpreparation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch profile (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching profile.
  #
  # Equivalent to PATCH /profile
  patchprofile(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch publication (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching publication.
  #
  # Equivalent to PATCH /publication
  patchpublication(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this class tell endangerment of a certain area and notes about the area (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to PATCH /regionalStatus
  patchregionalStatus(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch reserve (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching reserve.
  #
  # Equivalent to PATCH /reserve
  patchreserve(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch specimen sample (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching specimen sample.
  #
  # Equivalent to PATCH /sample
  patchsample(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch satellite tracking project (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching satellite tracking project.
  #
  # Equivalent to PATCH /satelliteTrackingProject
  patchsatelliteTrackingProject(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction class (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction class.
  #
  # Equivalent to PATCH /specimenTransaction
  patchspecimenTransaction(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction event.
  #
  # Equivalent to PATCH /specimenTransactionEvent
  patchspecimenTransactionEvent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch subunit (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching subunit.
  #
  # Equivalent to PATCH /subUnit
  patchsubUnit(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch tag (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching tag.
  #
  # Equivalent to PATCH /tag
  patchtag(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch taxon (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching taxon.
  #
  # Equivalent to PATCH /taxon
  patchtaxon(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch completeness of census (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching completeness of census.
  #
  # Equivalent to PATCH /taxonCensus
  patchtaxonCensus(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch taxon concept (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching taxon concept.
  #
  # Equivalent to PATCH /taxonConcept
  patchtaxonConcept(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn editors (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn editors.
  #
  # Equivalent to PATCH /taxonGroupIucnEditors
  patchtaxonGroupIucnEditors(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch taxon interaction (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching taxon interaction.
  #
  # Equivalent to PATCH /taxonInteraction
  patchtaxonInteraction(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this class are a taxon sets (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this class are a taxon sets.
  #
  # Equivalent to PATCH /taxonSet
  patchtaxonSet(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch trait (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching trait.
  #
  # Equivalent to PATCH /trait
  patchtrait(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch trait enumeration (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching trait enumeration.
  #
  # Equivalent to PATCH /traitEnumValue
  patchtraitEnumValue(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch trait value (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching trait value.
  #
  # Equivalent to PATCH /traitGroup
  patchtraitGroup(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction.
  #
  # Equivalent to PATCH /transaction
  patchtransaction(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction event.
  #
  # Equivalent to PATCH /transactionEvent
  patchtransactionEvent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction item (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction item.
  #
  # Equivalent to PATCH /transactionItem
  patchtransactionItem(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch translation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching translation.
  #
  # Equivalent to PATCH /translation
  patchtranslation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch identification (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching identification.
  #
  # Equivalent to PATCH /typeSpecimen
  patchtypeSpecimen(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch specimen (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching specimen.
  #
  # Equivalent to PATCH /unit
  patchunit(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch näytteen / havainnon faktat (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching näytteen / havainnon faktat.
  #
  # Equivalent to PATCH /unitFact
  patchunitFact(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch havainnon keruutiedot (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching havainnon keruutiedot.
  #
  # Equivalent to PATCH /unitGathering
  patchunitGathering(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch unit of measurement (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching unit of measurement.
  #
  # Equivalent to PATCH /unitOfMeasurement
  patchunitOfMeasurement(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch validator (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching validator.
  #
  # Equivalent to PATCH /validator
  patchvalidator(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch video (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching video.
  #
  # Equivalent to PATCH /video
  patchvideo(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Return list of Bibliographic Resource objects.
  #
  # Equivalent to POST /BibliographicResource/_search
  searchBibliographicResource(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): BibliographicResourceSearch2

  # Return list of Concept objects.
  #
  # Equivalent to POST /Concept/_search
  searchConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ConceptSearch2

  # Return list of Instances of this describe one taxon description context (Pinkka eLearning enviroment) objects.
  #
  # Equivalent to POST /Pinkka/_search
  searchPinkka(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PinkkaSearch2

  # Return list of Administrative status objects.
  #
  # Equivalent to POST /administrativeStatus/_search
  searchadministrativeStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AdministrativeStatusSearch2

  # Return list of agent objects.
  #
  # Equivalent to POST /agent/_search
  searchagent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AgentSearch2

  # Return list of annotation objects.
  #
  # Equivalent to POST /annotation/_search
  searchannotation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AnnotationSearch2

  # Return list of annotationOccurrence objects.
  #
  # Equivalent to POST /annotationOccurrence/_search
  searchannotationOccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AnnotationOccurrenceSearch2

  # Return list of Area objects.
  #
  # Equivalent to POST /area/_search
  searcharea(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AreaSearch2

  # Return list of Audio recording objects.
  #
  # Equivalent to POST /audio/_search
  searchaudio(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AudioSearch2

  # Return list of Instances of this class are bird song recognition skill levels of a certain area objects.
  #
  # Equivalent to POST /birdSongRecognitionSkillLevel/_search
  searchbirdSongRecognitionSkillLevel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): BirdSongRecognitionSkillLevelSearch2

  # Return list of Branch objects.
  #
  # Equivalent to POST /branch/_search
  searchbranch(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): BranchSearch2

  # Return list of Checklist objects.
  #
  # Equivalent to POST /checklist/_search
  searchchecklist(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ChecklistSearch2

  # Return list of Checklist version objects.
  #
  # Equivalent to POST /checklistVersion/_search
  searchchecklistVersion(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ChecklistVersionSearch2

  # Return list of Collection objects.
  #
  # Equivalent to POST /collection/_search
  searchcollection(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): CollectionSearch2

  # Return list of completeList objects.
  #
  # Equivalent to POST /completeList/_search
  searchcompleteList(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): CompleteListSearch2

  # Return list of Instances of this describe one taxon description context objects.
  #
  # Equivalent to POST /contentContextDescription/_search
  searchcontentContextDescription(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ContentContextDescriptionSearch2

  # Return list of Data field objects.
  #
  # Equivalent to POST /dataField/_search
  searchdataField(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DataFieldSearch2

  # Return list of Tag objects.
  #
  # Equivalent to POST /dataset/_search
  searchdataset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DatasetSearch2

  # Return list of dateRange objects.
  #
  # Equivalent to POST /dateRange/_search
  searchdateRange(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DateRangeSearch2

  # Return list of device objects.
  #
  # Equivalent to POST /device/_search
  searchdevice(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DeviceSearch2

  # Return list of deviceIndividual objects.
  #
  # Equivalent to POST /deviceIndividual/_search
  searchdeviceIndividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DeviceIndividualSearch2

  # Return list of Submissions objects.
  #
  # Equivalent to POST /document/_search
  searchdocument(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DocumentSearch2

  # Return list of Download request objects.
  #
  # Equivalent to POST /downloadRequest/_search
  searchdownloadRequest(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DownloadRequestSearch2

  # Return list of Endagerment object objects.
  #
  # Equivalent to POST /endangerment/_search
  searchendangerment(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): EndangermentSearch2

  # Return list of event objects.
  #
  # Equivalent to POST /event/_search
  searchevent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): EventSearch2

  # Return list of field objects.
  #
  # Equivalent to POST /field/_search
  searchfield(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FieldSearch2

  # Return list of fieldset objects.
  #
  # Equivalent to POST /fieldset/_search
  searchfieldset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FieldsetSearch2

  # Return list of form objects.
  #
  # Equivalent to POST /form/_search
  searchform(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormSearch2

  # Return list of formFooter objects.
  #
  # Equivalent to POST /formFooter/_search
  searchformFooter(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormFooterSearch2

  # Return list of formInstructions objects.
  #
  # Equivalent to POST /formInstructions/_search
  searchformInstructions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormInstructionsSearch2

  # Return list of formNamedPlaceOptions objects.
  #
  # Equivalent to POST /formNamedPlaceOptions/_search
  searchformNamedPlaceOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormNamedPlaceOptionsSearch2

  # Return list of formOptions objects.
  #
  # Equivalent to POST /formOptions/_search
  searchformOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormOptionsSearch2

  # Return list of formPermission objects.
  #
  # Equivalent to POST /formPermission/_search
  searchformPermission(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormPermissionSearch2

  # Return list of formPermissionPerson objects.
  #
  # Equivalent to POST /formPermissionPerson/_search
  searchformPermissionPerson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormPermissionPersonSearch2

  # Return list of formPermissionSingle objects.
  #
  # Equivalent to POST /formPermissionSingle/_search
  searchformPermissionSingle(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormPermissionSingleSearch2

  # Return list of formSeason objects.
  #
  # Equivalent to POST /formSeason/_search
  searchformSeason(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormSeasonSearch2

  # Return list of Gathering event objects.
  #
  # Equivalent to POST /gathering/_search
  searchgathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): GatheringSearch2

  # Return list of Global gathering event objects.
  #
  # Equivalent to POST /gatheringEvent/_search
  searchgatheringEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): GatheringEventSearch2

  # Return list of Keruutapahtuman faktat objects.
  #
  # Equivalent to POST /gatheringFact/_search
  searchgatheringFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): GatheringFactSearch2

  # Return list of IUCN Red List Evaluation Habitat objects.
  #
  # Equivalent to POST /habitat/_search
  searchhabitat(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): HabitatSearch2

  # Return list of Identification objects.
  #
  # Equivalent to POST /identification/_search
  searchidentification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IdentificationSearch2

  # Return list of Image objects.
  #
  # Equivalent to POST /image/_search
  searchimage(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ImageSearch2

  # Return list of individual objects.
  #
  # Equivalent to POST /individual/_search
  searchindividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IndividualSearch2

  # Return list of Informal Taxon Group objects.
  #
  # Equivalent to POST /informalTaxonGroup/_search
  searchinformalTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): InformalTaxonGroupSearch2

  # Return list of Information System objects.
  #
  # Equivalent to POST /informationSystem/_search
  searchinformationSystem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): InformationSystemSearch2

  # Return list of IUCN Red List Evaluation objects.
  #
  # Equivalent to POST /iucnRedListEvaluation/_search
  searchiucnRedListEvaluation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IucnRedListEvaluationSearch2

  # Return list of IUCN Evaluation Year objects.
  #
  # Equivalent to POST /iucnRedListEvaluationYear/_search
  searchiucnRedListEvaluationYear(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IucnRedListEvaluationYearSearch2

  # Return list of IUCN Red List Evaluation Informal Taxon Group objects.
  #
  # Equivalent to POST /iucnRedListTaxonGroup/_search
  searchiucnRedListTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IucnRedListTaxonGroupSearch2

  # Return list of measurement objects.
  #
  # Equivalent to POST /measurement/_search
  searchmeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): MeasurementSearch2

  # Return list of 3D model objects.
  #
  # Equivalent to POST /model/_search
  searchmodel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ModelSearch2

  # Return list of multimedia objects.
  #
  # Equivalent to POST /multimedia/_search
  searchmultimedia(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): MultimediaSearch2

  # Return list of namedPlace objects.
  #
  # Equivalent to POST /namedPlace/_search
  searchnamedPlace(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): NamedPlaceSearch2

  # Return list of News objects.
  #
  # Equivalent to POST /news/_search
  searchnews(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): NewsSearch2

  # Return list of notification objects.
  #
  # Equivalent to POST /notification/_search
  searchnotification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): NotificationSearch2

  # Return list of Occurrence objects.
  #
  # Equivalent to POST /occurrence/_search
  searchoccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): OccurrenceSearch2

  # Return list of Organization objects.
  #
  # Equivalent to POST /organization/_search
  searchorganization(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): OrganizationSearch2

  # Return list of PDF objects.
  #
  # Equivalent to POST /pdf/_search
  searchpdf(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PdfSearch2

  # Return list of permit objects.
  #
  # Equivalent to POST /permit/_search
  searchpermit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PermitSearch2

  # Return list of Person objects.
  #
  # Equivalent to POST /person/_search
  searchperson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PersonSearch2

  # Return list of preparation objects.
  #
  # Equivalent to POST /preparation/_search
  searchpreparation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PreparationSearch2

  # Return list of profile objects.
  #
  # Equivalent to POST /profile/_search
  searchprofile(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ProfileSearch2

  # Return list of Publication objects.
  #
  # Equivalent to POST /publication/_search
  searchpublication(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PublicationSearch2

  # Return list of Instances of this class tell endangerment of a certain area and notes about the area objects.
  #
  # Equivalent to POST /regionalStatus/_search
  searchregionalStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): RegionalStatusSearch2

  # Return list of reserve objects.
  #
  # Equivalent to POST /reserve/_search
  searchreserve(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ReserveSearch2

  # Return list of Specimen sample objects.
  #
  # Equivalent to POST /sample/_search
  searchsample(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SampleSearch2

  # Return list of Satellite Tracking Project objects.
  #
  # Equivalent to POST /satelliteTrackingProject/_search
  searchsatelliteTrackingProject(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SatelliteTrackingProjectSearch2

  # Return list of Transaction class objects.
  #
  # Equivalent to POST /specimenTransaction/_search
  searchspecimenTransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SpecimenTransactionSearch2

  # Return list of Transaction Event objects.
  #
  # Equivalent to POST /specimenTransactionEvent/_search
  searchspecimenTransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SpecimenTransactionEventSearch2

  # Return list of subUnit objects.
  #
  # Equivalent to POST /subUnit/_search
  searchsubUnit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SubUnitSearch2

  # Return list of tag objects.
  #
  # Equivalent to POST /tag/_search
  searchtag(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TagSearch2

  # Return list of Taxon objects.
  #
  # Equivalent to POST /taxon/_search
  searchtaxon(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonSearch2

  # Return list of Completeness of census objects.
  #
  # Equivalent to POST /taxonCensus/_search
  searchtaxonCensus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonCensusSearch2

  # Return list of Taxon concept objects.
  #
  # Equivalent to POST /taxonConcept/_search
  searchtaxonConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonConceptSearch2

  # Return list of IUCN Editors objects.
  #
  # Equivalent to POST /taxonGroupIucnEditors/_search
  searchtaxonGroupIucnEditors(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonGroupIucnEditorsSearch2

  # Return list of Taxon interaction objects.
  #
  # Equivalent to POST /taxonInteraction/_search
  searchtaxonInteraction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonInteractionSearch2

  # Return list of Instances of this class are a taxon sets objects.
  #
  # Equivalent to POST /taxonSet/_search
  searchtaxonSet(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonSetSearch2

  # Return list of Trait objects.
  #
  # Equivalent to POST /trait/_search
  searchtrait(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TraitSearch2

  # Return list of Trait enumeration objects.
  #
  # Equivalent to POST /traitEnumValue/_search
  searchtraitEnumValue(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TraitEnumValueSearch2

  # Return list of Trait value objects.
  #
  # Equivalent to POST /traitGroup/_search
  searchtraitGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TraitGroupSearch2

  # Return list of Transaction objects.
  #
  # Equivalent to POST /transaction/_search
  searchtransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TransactionSearch2

  # Return list of Transaction Event objects.
  #
  # Equivalent to POST /transactionEvent/_search
  searchtransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TransactionEventSearch2

  # Return list of Transaction Item objects.
  #
  # Equivalent to POST /transactionItem/_search
  searchtransactionItem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TransactionItemSearch2

  # Return list of translation objects.
  #
  # Equivalent to POST /translation/_search
  searchtranslation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TranslationSearch2

  # Return list of Identification objects.
  #
  # Equivalent to POST /typeSpecimen/_search
  searchtypeSpecimen(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TypeSpecimenSearch2

  # Return list of Specimen objects.
  #
  # Equivalent to POST /unit/_search
  searchunit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitSearch2

  # Return list of Näytteen / havainnon faktat objects.
  #
  # Equivalent to POST /unitFact/_search
  searchunitFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitFactSearch2

  # Return list of Havainnon keruutiedot objects.
  #
  # Equivalent to POST /unitGathering/_search
  searchunitGathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitGatheringSearch2

  # Return list of Unit of measurement objects.
  #
  # Equivalent to POST /unitOfMeasurement/_search
  searchunitOfMeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitOfMeasurementSearch2

  # Return list of validator objects.
  #
  # Equivalent to POST /validator/_search
  searchvalidator(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ValidatorSearch2

  # Return list of Video objects.
  #
  # Equivalent to POST /video/_search
  searchvideo(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): VideoSearch2

  # Store Bibliographic Resource object(s)
  #
  # Equivalent to POST /BibliographicResource
  storeBibliographicResource(requestBody: BibliographicResource2Input): BibliographicResource2

  # Store Concept object(s)
  #
  # Equivalent to POST /Concept
  storeConcept(requestBody: Concept2Input): Concept2

  # Store Instances of this describe one taxon description context (Pinkka eLearning enviroment) object(s)
  #
  # Equivalent to POST /Pinkka
  storePinkka(requestBody: Pinkka2Input): Pinkka2

  # Store Administrative status object(s)
  #
  # Equivalent to POST /administrativeStatus
  storeadministrativeStatus(requestBody: AdministrativeStatus2Input): AdministrativeStatus2

  # Store agent object(s)
  #
  # Equivalent to POST /agent
  storeagent(requestBody: Agent2Input): Agent2

  # Store annotation object(s)
  #
  # Equivalent to POST /annotation
  storeannotation(requestBody: Annotation2Input): Annotation2

  # Store annotationOccurrence object(s)
  #
  # Equivalent to POST /annotationOccurrence
  storeannotationOccurrence(requestBody: AnnotationOccurrenceInput): AnnotationOccurrence

  # Store Area object(s)
  #
  # Equivalent to POST /area
  storearea(requestBody: Area2Input): Area2

  # Store Audio recording object(s)
  #
  # Equivalent to POST /audio
  storeaudio(requestBody: Audio2Input): Audio2

  # Store Instances of this class are bird song recognition skill levels of a certain area object(s)
  #
  # Equivalent to POST /birdSongRecognitionSkillLevel
  storebirdSongRecognitionSkillLevel(requestBody: BirdSongRecognitionSkillLevel2Input): BirdSongRecognitionSkillLevel2

  # Store Branch object(s)
  #
  # Equivalent to POST /branch
  storebranch(requestBody: Branch2Input): Branch2

  # Store Checklist object(s)
  #
  # Equivalent to POST /checklist
  storechecklist(requestBody: Checklist2Input): Checklist2

  # Store Checklist version object(s)
  #
  # Equivalent to POST /checklistVersion
  storechecklistVersion(requestBody: ChecklistVersion2Input): ChecklistVersion2

  # Store Collection object(s)
  #
  # Equivalent to POST /collection
  storecollection(requestBody: Collection2Input): Collection2

  # Store completeList object(s)
  #
  # Equivalent to POST /completeList
  storecompleteList(requestBody: CompleteList2Input): CompleteList2

  # Store Instances of this describe one taxon description context object(s)
  #
  # Equivalent to POST /contentContextDescription
  storecontentContextDescription(requestBody: ContentContextDescription2Input): ContentContextDescription2

  # Store Data field object(s)
  #
  # Equivalent to POST /dataField
  storedataField(requestBody: DataField2Input): DataField2

  # Store Tag object(s)
  #
  # Equivalent to POST /dataset
  storedataset(requestBody: Dataset2Input): Dataset2

  # Store dateRange object(s)
  #
  # Equivalent to POST /dateRange
  storedateRange(requestBody: DateRange2Input): DateRange2

  # Store device object(s)
  #
  # Equivalent to POST /device
  storedevice(requestBody: Device2Input): Device2

  # Store deviceIndividual object(s)
  #
  # Equivalent to POST /deviceIndividual
  storedeviceIndividual(requestBody: DeviceIndividual2Input): DeviceIndividual2

  # Store Submissions object(s)
  #
  # Equivalent to POST /document
  storedocument(requestBody: Document2Input): Document2

  # Store Download request object(s)
  #
  # Equivalent to POST /downloadRequest
  storedownloadRequest(requestBody: DownloadRequest2Input): DownloadRequest2

  # Store Endagerment object object(s)
  #
  # Equivalent to POST /endangerment
  storeendangerment(requestBody: Endangerment2Input): Endangerment2

  # Store event object(s)
  #
  # Equivalent to POST /event
  storeevent(requestBody: Event3Input): Event3

  # Store field object(s)
  #
  # Equivalent to POST /field
  storefield(requestBody: Field2Input): Field2

  # Store fieldset object(s)
  #
  # Equivalent to POST /fieldset
  storefieldset(requestBody: Fieldset2Input): Fieldset2

  # Store form object(s)
  #
  # Equivalent to POST /form
  storeform(requestBody: Form2Input): Form2

  # Store formFooter object(s)
  #
  # Equivalent to POST /formFooter
  storeformFooter(requestBody: FormFooterInput): FormFooter

  # Store formInstructions object(s)
  #
  # Equivalent to POST /formInstructions
  storeformInstructions(requestBody: FormInstructions2Input): FormInstructions2

  # Store formNamedPlaceOptions object(s)
  #
  # Equivalent to POST /formNamedPlaceOptions
  storeformNamedPlaceOptions(requestBody: FormNamedPlaceOptionsInput): FormNamedPlaceOptions

  # Store formOptions object(s)
  #
  # Equivalent to POST /formOptions
  storeformOptions(requestBody: FormOptionsInput): FormOptions

  # Store formPermission object(s)
  #
  # Equivalent to POST /formPermission
  storeformPermission(requestBody: FormPermission2Input): FormPermission2

  # Store formPermissionPerson object(s)
  #
  # Equivalent to POST /formPermissionPerson
  storeformPermissionPerson(requestBody: FormPermissionPerson2Input): FormPermissionPerson2

  # Store formPermissionSingle object(s)
  #
  # Equivalent to POST /formPermissionSingle
  storeformPermissionSingle(requestBody: FormPermissionSingle2Input): FormPermissionSingle2

  # Store formSeason object(s)
  #
  # Equivalent to POST /formSeason
  storeformSeason(requestBody: FormSeasonInput): FormSeason

  # Store Gathering event object(s)
  #
  # Equivalent to POST /gathering
  storegathering(requestBody: GatheringInput): Gathering

  # Store Global gathering event object(s)
  #
  # Equivalent to POST /gatheringEvent
  storegatheringEvent(requestBody: GatheringEventInput): GatheringEvent

  # Store Keruutapahtuman faktat object(s)
  #
  # Equivalent to POST /gatheringFact
  storegatheringFact(requestBody: GatheringFactInput): GatheringFact

  # Store IUCN Red List Evaluation Habitat object(s)
  #
  # Equivalent to POST /habitat
  storehabitat(requestBody: Habitat3Input): Habitat3

  # Store Identification object(s)
  #
  # Equivalent to POST /identification
  storeidentification(requestBody: IdentificationInput): Identification

  # Store Image object(s)
  #
  # Equivalent to POST /image
  storeimage(requestBody: Image2Input): Image2

  # Store individual object(s)
  #
  # Equivalent to POST /individual
  storeindividual(requestBody: Individual2Input): Individual2

  # Store Informal Taxon Group object(s)
  #
  # Equivalent to POST /informalTaxonGroup
  storeinformalTaxonGroup(requestBody: InformalTaxonGroup2Input): InformalTaxonGroup2

  # Store Information System object(s)
  #
  # Equivalent to POST /informationSystem
  storeinformationSystem(requestBody: InformationSystem2Input): InformationSystem2

  # Store IUCN Red List Evaluation object(s)
  #
  # Equivalent to POST /iucnRedListEvaluation
  storeiucnRedListEvaluation(requestBody: IucnRedListEvaluation2Input): IucnRedListEvaluation2

  # Store IUCN Evaluation Year object(s)
  #
  # Equivalent to POST /iucnRedListEvaluationYear
  storeiucnRedListEvaluationYear(requestBody: IucnRedListEvaluationYear2Input): IucnRedListEvaluationYear2

  # Store IUCN Red List Evaluation Informal Taxon Group object(s)
  #
  # Equivalent to POST /iucnRedListTaxonGroup
  storeiucnRedListTaxonGroup(requestBody: IucnRedListTaxonGroup2Input): IucnRedListTaxonGroup2

  # Store measurement object(s)
  #
  # Equivalent to POST /measurement
  storemeasurement(requestBody: MeasurementInput): Measurement

  # Store 3D model object(s)
  #
  # Equivalent to POST /model
  storemodel(requestBody: Model2Input): Model2

  # Store multimedia object(s)
  #
  # Equivalent to POST /multimedia
  storemultimedia(requestBody: Multimedia2Input): Multimedia2

  # Store namedPlace object(s)
  #
  # Equivalent to POST /namedPlace
  storenamedPlace(requestBody: NamedPlace2Input): NamedPlace2

  # Store News object(s)
  #
  # Equivalent to POST /news
  storenews(requestBody: News2Input): News2

  # Store notification object(s)
  #
  # Equivalent to POST /notification
  storenotification(requestBody: Notification2Input): Notification2

  # Store Occurrence object(s)
  #
  # Equivalent to POST /occurrence
  storeoccurrence(requestBody: Occurrence2Input): Occurrence2

  # Store Organization object(s)
  #
  # Equivalent to POST /organization
  storeorganization(requestBody: Organization2Input): Organization2

  # Store PDF object(s)
  #
  # Equivalent to POST /pdf
  storepdf(requestBody: Pdf2Input): Pdf2

  # Store permit object(s)
  #
  # Equivalent to POST /permit
  storepermit(requestBody: Permit2Input): Permit2

  # Store Person object(s)
  #
  # Equivalent to POST /person
  storeperson(requestBody: Person2Input): Person2

  # Store preparation object(s)
  #
  # Equivalent to POST /preparation
  storepreparation(requestBody: Preparation2Input): Preparation2

  # Store profile object(s)
  #
  # Equivalent to POST /profile
  storeprofile(requestBody: Profile2Input): Profile2

  # Store Publication object(s)
  #
  # Equivalent to POST /publication
  storepublication(requestBody: Publication3Input): Publication3

  # Store Instances of this class tell endangerment of a certain area and notes about the area object(s)
  #
  # Equivalent to POST /regionalStatus
  storeregionalStatus(requestBody: RegionalStatus2Input): RegionalStatus2

  # Store reserve object(s)
  #
  # Equivalent to POST /reserve
  storereserve(requestBody: ReserveInput): Reserve

  # Store Specimen sample object(s)
  #
  # Equivalent to POST /sample
  storesample(requestBody: Sample2Input): Sample2

  # Store Satellite Tracking Project object(s)
  #
  # Equivalent to POST /satelliteTrackingProject
  storesatelliteTrackingProject(requestBody: SatelliteTrackingProject2Input): SatelliteTrackingProject2

  # Store Transaction class object(s)
  #
  # Equivalent to POST /specimenTransaction
  storespecimenTransaction(requestBody: SpecimenTransaction2Input): SpecimenTransaction2

  # Store Transaction Event object(s)
  #
  # Equivalent to POST /specimenTransactionEvent
  storespecimenTransactionEvent(requestBody: SpecimenTransactionEventInput): SpecimenTransactionEvent

  # Store subUnit object(s)
  #
  # Equivalent to POST /subUnit
  storesubUnit(requestBody: SubUnit2Input): SubUnit2

  # Store tag object(s)
  #
  # Equivalent to POST /tag
  storetag(requestBody: Tag2Input): Tag2

  # Store Taxon object(s)
  #
  # Equivalent to POST /taxon
  storetaxon(requestBody: Taxon2Input): Taxon2

  # Store Completeness of census object(s)
  #
  # Equivalent to POST /taxonCensus
  storetaxonCensus(requestBody: TaxonCensus2Input): TaxonCensus2

  # Store Taxon concept object(s)
  #
  # Equivalent to POST /taxonConcept
  storetaxonConcept(requestBody: TaxonConcept2Input): TaxonConcept2

  # Store IUCN Editors object(s)
  #
  # Equivalent to POST /taxonGroupIucnEditors
  storetaxonGroupIucnEditors(requestBody: TaxonGroupIucnEditors2Input): TaxonGroupIucnEditors2

  # Store Taxon interaction object(s)
  #
  # Equivalent to POST /taxonInteraction
  storetaxonInteraction(requestBody: TaxonInteraction2Input): TaxonInteraction2

  # Store Instances of this class are a taxon sets object(s)
  #
  # Equivalent to POST /taxonSet
  storetaxonSet(requestBody: TaxonSet2Input): TaxonSet2

  # Store Trait object(s)
  #
  # Equivalent to POST /trait
  storetrait(requestBody: Trait2Input): Trait2

  # Store Trait enumeration object(s)
  #
  # Equivalent to POST /traitEnumValue
  storetraitEnumValue(requestBody: TraitEnumValue2Input): TraitEnumValue2

  # Store Trait value object(s)
  #
  # Equivalent to POST /traitGroup
  storetraitGroup(requestBody: TraitGroup2Input): TraitGroup2

  # Store Transaction object(s)
  #
  # Equivalent to POST /transaction
  storetransaction(requestBody: Transaction2Input): Transaction2

  # Store Transaction Event object(s)
  #
  # Equivalent to POST /transactionEvent
  storetransactionEvent(requestBody: TransactionEvent2Input): TransactionEvent2

  # Store Transaction Item object(s)
  #
  # Equivalent to POST /transactionItem
  storetransactionItem(requestBody: TransactionItemInput): TransactionItem

  # Store translation object(s)
  #
  # Equivalent to POST /translation
  storetranslation(requestBody: Translation2Input): Translation2

  # Store Identification object(s)
  #
  # Equivalent to POST /typeSpecimen
  storetypeSpecimen(requestBody: TypeSpecimenInput): TypeSpecimen

  # Store Specimen object(s)
  #
  # Equivalent to POST /unit
  storeunit(requestBody: UnitInput): Unit

  # Store Näytteen / havainnon faktat object(s)
  #
  # Equivalent to POST /unitFact
  storeunitFact(requestBody: UnitFactInput): UnitFact

  # Store Havainnon keruutiedot object(s)
  #
  # Equivalent to POST /unitGathering
  storeunitGathering(requestBody: UnitGatheringInput): UnitGathering

  # Store Unit of measurement object(s)
  #
  # Equivalent to POST /unitOfMeasurement
  storeunitOfMeasurement(requestBody: UnitOfMeasurement2Input): UnitOfMeasurement2

  # Store validator object(s)
  #
  # Equivalent to POST /validator
  storevalidator(requestBody: Validator2Input): Validator2

  # Store Video object(s)
  #
  # Equivalent to POST /video
  storevideo(requestBody: Video2Input): Video2

  # Store Bibliographic Resource
  #
  # Equivalent to PUT /BibliographicResource/{id}
  updateBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!
    requestBody: BibliographicResource2Input
  ): BibliographicResource2

  # Store Concept
  #
  # Equivalent to PUT /Concept/{id}
  updateConcept(
    # Id for the Concept
    id: String!
    requestBody: Concept2Input
  ): Concept2

  # Store Instances of this describe one taxon description context (Pinkka eLearning enviroment)
  #
  # Equivalent to PUT /Pinkka/{id}
  updatePinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!
    requestBody: Pinkka2Input
  ): Pinkka2

  # Store Administrative status
  #
  # Equivalent to PUT /administrativeStatus/{id}
  updateadministrativeStatus(
    # Id for the Administrative status
    id: String!
    requestBody: AdministrativeStatus2Input
  ): AdministrativeStatus2

  # Store agent
  #
  # Equivalent to PUT /agent/{id}
  updateagent(
    # Id for the agent
    id: String!
    requestBody: Agent2Input
  ): Agent2

  # Store annotation
  #
  # Equivalent to PUT /annotation/{id}
  updateannotation(
    # Id for the annotation
    id: String!
    requestBody: Annotation2Input
  ): Annotation2

  # Store annotationOccurrence
  #
  # Equivalent to PUT /annotationOccurrence/{id}
  updateannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!
    requestBody: AnnotationOccurrenceInput
  ): AnnotationOccurrence

  # Store Area
  #
  # Equivalent to PUT /area/{id}
  updatearea(
    # Id for the Area
    id: String!
    requestBody: Area2Input
  ): Area2

  # Store Audio recording
  #
  # Equivalent to PUT /audio/{id}
  updateaudio(
    # Id for the Audio recording
    id: String!
    requestBody: Audio2Input
  ): Audio2

  # Store Instances of this class are bird song recognition skill levels of a certain area
  #
  # Equivalent to PUT /birdSongRecognitionSkillLevel/{id}
  updatebirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!
    requestBody: BirdSongRecognitionSkillLevel2Input
  ): BirdSongRecognitionSkillLevel2

  # Store Branch
  #
  # Equivalent to PUT /branch/{id}
  updatebranch(
    # Id for the Branch
    id: String!
    requestBody: Branch2Input
  ): Branch2

  # Store Checklist
  #
  # Equivalent to PUT /checklist/{id}
  updatechecklist(
    # Id for the Checklist
    id: String!
    requestBody: Checklist2Input
  ): Checklist2

  # Store Checklist version
  #
  # Equivalent to PUT /checklistVersion/{id}
  updatechecklistVersion(
    # Id for the Checklist version
    id: String!
    requestBody: ChecklistVersion2Input
  ): ChecklistVersion2

  # Store Collection
  #
  # Equivalent to PUT /collection/{id}
  updatecollection(
    # Id for the Collection
    id: String!
    requestBody: Collection2Input
  ): Collection2

  # Store completeList
  #
  # Equivalent to PUT /completeList/{id}
  updatecompleteList(
    # Id for the completeList
    id: String!
    requestBody: CompleteList2Input
  ): CompleteList2

  # Store Instances of this describe one taxon description context
  #
  # Equivalent to PUT /contentContextDescription/{id}
  updatecontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!
    requestBody: ContentContextDescription2Input
  ): ContentContextDescription2

  # Store Data field
  #
  # Equivalent to PUT /dataField/{id}
  updatedataField(
    # Id for the Data field
    id: String!
    requestBody: DataField2Input
  ): DataField2

  # Store Tag
  #
  # Equivalent to PUT /dataset/{id}
  updatedataset(
    # Id for the Tag
    id: String!
    requestBody: Dataset2Input
  ): Dataset2

  # Store dateRange
  #
  # Equivalent to PUT /dateRange/{id}
  updatedateRange(
    # Id for the dateRange
    id: String!
    requestBody: DateRange2Input
  ): DateRange2

  # Store device
  #
  # Equivalent to PUT /device/{id}
  updatedevice(
    # Id for the device
    id: String!
    requestBody: Device2Input
  ): Device2

  # Store deviceIndividual
  #
  # Equivalent to PUT /deviceIndividual/{id}
  updatedeviceIndividual(
    # Id for the deviceIndividual
    id: String!
    requestBody: DeviceIndividual2Input
  ): DeviceIndividual2

  # Store Submissions
  #
  # Equivalent to PUT /document/{id}
  updatedocument(
    # Id for the Submissions
    id: String!
    requestBody: Document2Input
  ): Document2

  # Store Download request
  #
  # Equivalent to PUT /downloadRequest/{id}
  updatedownloadRequest(
    # Id for the Download request
    id: String!
    requestBody: DownloadRequest2Input
  ): DownloadRequest2

  # Store Endagerment object
  #
  # Equivalent to PUT /endangerment/{id}
  updateendangerment(
    # Id for the Endagerment object
    id: String!
    requestBody: Endangerment2Input
  ): Endangerment2

  # Store event
  #
  # Equivalent to PUT /event/{id}
  updateevent(
    # Id for the event
    id: String!
    requestBody: Event3Input
  ): Event3

  # Store field
  #
  # Equivalent to PUT /field/{id}
  updatefield(
    # Id for the field
    id: String!
    requestBody: Field2Input
  ): Field2

  # Store fieldset
  #
  # Equivalent to PUT /fieldset/{id}
  updatefieldset(
    # Id for the fieldset
    id: String!
    requestBody: Fieldset2Input
  ): Fieldset2

  # Store form
  #
  # Equivalent to PUT /form/{id}
  updateform(
    # Id for the form
    id: String!
    requestBody: Form2Input
  ): Form2

  # Store formFooter
  #
  # Equivalent to PUT /formFooter/{id}
  updateformFooter(
    # Id for the formFooter
    id: String!
    requestBody: FormFooterInput
  ): FormFooter

  # Store formInstructions
  #
  # Equivalent to PUT /formInstructions/{id}
  updateformInstructions(
    # Id for the formInstructions
    id: String!
    requestBody: FormInstructions2Input
  ): FormInstructions2

  # Store formNamedPlaceOptions
  #
  # Equivalent to PUT /formNamedPlaceOptions/{id}
  updateformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!
    requestBody: FormNamedPlaceOptionsInput
  ): FormNamedPlaceOptions

  # Store formOptions
  #
  # Equivalent to PUT /formOptions/{id}
  updateformOptions(
    # Id for the formOptions
    id: String!
    requestBody: FormOptionsInput
  ): FormOptions

  # Store formPermission
  #
  # Equivalent to PUT /formPermission/{id}
  updateformPermission(
    # Id for the formPermission
    id: String!
    requestBody: FormPermission2Input
  ): FormPermission2

  # Store formPermissionPerson
  #
  # Equivalent to PUT /formPermissionPerson/{id}
  updateformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!
    requestBody: FormPermissionPerson2Input
  ): FormPermissionPerson2

  # Store formPermissionSingle
  #
  # Equivalent to PUT /formPermissionSingle/{id}
  updateformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!
    requestBody: FormPermissionSingle2Input
  ): FormPermissionSingle2

  # Store formSeason
  #
  # Equivalent to PUT /formSeason/{id}
  updateformSeason(
    # Id for the formSeason
    id: String!
    requestBody: FormSeasonInput
  ): FormSeason

  # Store Gathering event
  #
  # Equivalent to PUT /gathering/{id}
  updategathering(
    # Id for the Gathering event
    id: String!
    requestBody: GatheringInput
  ): Gathering

  # Store Global gathering event
  #
  # Equivalent to PUT /gatheringEvent/{id}
  updategatheringEvent(
    # Id for the Global gathering event
    id: String!
    requestBody: GatheringEventInput
  ): GatheringEvent

  # Store Keruutapahtuman faktat
  #
  # Equivalent to PUT /gatheringFact/{id}
  updategatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!
    requestBody: GatheringFactInput
  ): GatheringFact

  # Store IUCN Red List Evaluation Habitat
  #
  # Equivalent to PUT /habitat/{id}
  updatehabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!
    requestBody: Habitat3Input
  ): Habitat3

  # Store Identification
  #
  # Equivalent to PUT /identification/{id}
  updateidentification(
    # Id for the Identification
    id: String!
    requestBody: IdentificationInput
  ): Identification

  # Store Image
  #
  # Equivalent to PUT /image/{id}
  updateimage(
    # Id for the Image
    id: String!
    requestBody: Image2Input
  ): Image2

  # Store individual
  #
  # Equivalent to PUT /individual/{id}
  updateindividual(
    # Id for the individual
    id: String!
    requestBody: Individual2Input
  ): Individual2

  # Store Informal Taxon Group
  #
  # Equivalent to PUT /informalTaxonGroup/{id}
  updateinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!
    requestBody: InformalTaxonGroup2Input
  ): InformalTaxonGroup2

  # Store Information System
  #
  # Equivalent to PUT /informationSystem/{id}
  updateinformationSystem(
    # Id for the Information System
    id: String!
    requestBody: InformationSystem2Input
  ): InformationSystem2

  # Store IUCN Red List Evaluation
  #
  # Equivalent to PUT /iucnRedListEvaluation/{id}
  updateiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!
    requestBody: IucnRedListEvaluation2Input
  ): IucnRedListEvaluation2

  # Store IUCN Evaluation Year
  #
  # Equivalent to PUT /iucnRedListEvaluationYear/{id}
  updateiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!
    requestBody: IucnRedListEvaluationYear2Input
  ): IucnRedListEvaluationYear2

  # Store IUCN Red List Evaluation Informal Taxon Group
  #
  # Equivalent to PUT /iucnRedListTaxonGroup/{id}
  updateiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!
    requestBody: IucnRedListTaxonGroup2Input
  ): IucnRedListTaxonGroup2

  # Store measurement
  #
  # Equivalent to PUT /measurement/{id}
  updatemeasurement(
    # Id for the measurement
    id: String!
    requestBody: MeasurementInput
  ): Measurement

  # Store 3D model
  #
  # Equivalent to PUT /model/{id}
  updatemodel(
    # Id for the 3D model
    id: String!
    requestBody: Model2Input
  ): Model2

  # Store multimedia
  #
  # Equivalent to PUT /multimedia/{id}
  updatemultimedia(
    # Id for the multimedia
    id: String!
    requestBody: Multimedia2Input
  ): Multimedia2

  # Store namedPlace
  #
  # Equivalent to PUT /namedPlace/{id}
  updatenamedPlace(
    # Id for the namedPlace
    id: String!
    requestBody: NamedPlace2Input
  ): NamedPlace2

  # Store News
  #
  # Equivalent to PUT /news/{id}
  updatenews(
    # Id for the News
    id: String!
    requestBody: News2Input
  ): News2

  # Store notification
  #
  # Equivalent to PUT /notification/{id}
  updatenotification(
    # Id for the notification
    id: String!
    requestBody: Notification2Input
  ): Notification2

  # Store Occurrence
  #
  # Equivalent to PUT /occurrence/{id}
  updateoccurrence(
    # Id for the Occurrence
    id: String!
    requestBody: Occurrence2Input
  ): Occurrence2

  # Store Organization
  #
  # Equivalent to PUT /organization/{id}
  updateorganization(
    # Id for the Organization
    id: String!
    requestBody: Organization2Input
  ): Organization2

  # Store PDF
  #
  # Equivalent to PUT /pdf/{id}
  updatepdf(
    # Id for the PDF
    id: String!
    requestBody: Pdf2Input
  ): Pdf2

  # Store permit
  #
  # Equivalent to PUT /permit/{id}
  updatepermit(
    # Id for the permit
    id: String!
    requestBody: Permit2Input
  ): Permit2

  # Store Person
  #
  # Equivalent to PUT /person/{id}
  updateperson(
    # Id for the Person
    id: String!
    requestBody: Person2Input
  ): Person2

  # Store preparation
  #
  # Equivalent to PUT /preparation/{id}
  updatepreparation(
    # Id for the preparation
    id: String!
    requestBody: Preparation2Input
  ): Preparation2

  # Store profile
  #
  # Equivalent to PUT /profile/{id}
  updateprofile(
    # Id for the profile
    id: String!
    requestBody: Profile2Input
  ): Profile2

  # Store Publication
  #
  # Equivalent to PUT /publication/{id}
  updatepublication(
    # Id for the Publication
    id: String!
    requestBody: Publication3Input
  ): Publication3

  # Store Instances of this class tell endangerment of a certain area and notes about the area
  #
  # Equivalent to PUT /regionalStatus/{id}
  updateregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!
    requestBody: RegionalStatus2Input
  ): RegionalStatus2

  # Store reserve
  #
  # Equivalent to PUT /reserve/{id}
  updatereserve(
    # Id for the reserve
    id: String!
    requestBody: ReserveInput
  ): Reserve

  # Store Specimen sample
  #
  # Equivalent to PUT /sample/{id}
  updatesample(
    # Id for the Specimen sample
    id: String!
    requestBody: Sample2Input
  ): Sample2

  # Store Satellite Tracking Project
  #
  # Equivalent to PUT /satelliteTrackingProject/{id}
  updatesatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!
    requestBody: SatelliteTrackingProject2Input
  ): SatelliteTrackingProject2

  # Store Transaction class
  #
  # Equivalent to PUT /specimenTransaction/{id}
  updatespecimenTransaction(
    # Id for the Transaction class
    id: String!
    requestBody: SpecimenTransaction2Input
  ): SpecimenTransaction2

  # Store Transaction Event
  #
  # Equivalent to PUT /specimenTransactionEvent/{id}
  updatespecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!
    requestBody: SpecimenTransactionEventInput
  ): SpecimenTransactionEvent

  # Store subUnit
  #
  # Equivalent to PUT /subUnit/{id}
  updatesubUnit(
    # Id for the subUnit
    id: String!
    requestBody: SubUnit2Input
  ): SubUnit2

  # Store tag
  #
  # Equivalent to PUT /tag/{id}
  updatetag(
    # Id for the tag
    id: String!
    requestBody: Tag2Input
  ): Tag2

  # Store Taxon
  #
  # Equivalent to PUT /taxon/{id}
  updatetaxon(
    # Id for the Taxon
    id: String!
    requestBody: Taxon2Input
  ): Taxon2

  # Store Completeness of census
  #
  # Equivalent to PUT /taxonCensus/{id}
  updatetaxonCensus(
    # Id for the Completeness of census
    id: String!
    requestBody: TaxonCensus2Input
  ): TaxonCensus2

  # Store Taxon concept
  #
  # Equivalent to PUT /taxonConcept/{id}
  updatetaxonConcept(
    # Id for the Taxon concept
    id: String!
    requestBody: TaxonConcept2Input
  ): TaxonConcept2

  # Store IUCN Editors
  #
  # Equivalent to PUT /taxonGroupIucnEditors/{id}
  updatetaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!
    requestBody: TaxonGroupIucnEditors2Input
  ): TaxonGroupIucnEditors2

  # Store Taxon interaction
  #
  # Equivalent to PUT /taxonInteraction/{id}
  updatetaxonInteraction(
    # Id for the Taxon interaction
    id: String!
    requestBody: TaxonInteraction2Input
  ): TaxonInteraction2

  # Store Instances of this class are a taxon sets
  #
  # Equivalent to PUT /taxonSet/{id}
  updatetaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!
    requestBody: TaxonSet2Input
  ): TaxonSet2

  # Store Trait
  #
  # Equivalent to PUT /trait/{id}
  updatetrait(
    # Id for the Trait
    id: String!
    requestBody: Trait2Input
  ): Trait2

  # Store Trait enumeration
  #
  # Equivalent to PUT /traitEnumValue/{id}
  updatetraitEnumValue(
    # Id for the Trait enumeration
    id: String!
    requestBody: TraitEnumValue2Input
  ): TraitEnumValue2

  # Store Trait value
  #
  # Equivalent to PUT /traitGroup/{id}
  updatetraitGroup(
    # Id for the Trait value
    id: String!
    requestBody: TraitGroup2Input
  ): TraitGroup2

  # Store Transaction
  #
  # Equivalent to PUT /transaction/{id}
  updatetransaction(
    # Id for the Transaction
    id: String!
    requestBody: Transaction2Input
  ): Transaction2

  # Store Transaction Event
  #
  # Equivalent to PUT /transactionEvent/{id}
  updatetransactionEvent(
    # Id for the Transaction Event
    id: String!
    requestBody: TransactionEvent2Input
  ): TransactionEvent2

  # Store Transaction Item
  #
  # Equivalent to PUT /transactionItem/{id}
  updatetransactionItem(
    # Id for the Transaction Item
    id: String!
    requestBody: TransactionItemInput
  ): TransactionItem

  # Store translation
  #
  # Equivalent to PUT /translation/{id}
  updatetranslation(
    # Id for the translation
    id: String!
    requestBody: Translation2Input
  ): Translation2

  # Store Identification
  #
  # Equivalent to PUT /typeSpecimen/{id}
  updatetypeSpecimen(
    # Id for the Identification
    id: String!
    requestBody: TypeSpecimenInput
  ): TypeSpecimen

  # Store Specimen
  #
  # Equivalent to PUT /unit/{id}
  updateunit(
    # Id for the Specimen
    id: String!
    requestBody: UnitInput
  ): Unit

  # Store Näytteen / havainnon faktat
  #
  # Equivalent to PUT /unitFact/{id}
  updateunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!
    requestBody: UnitFactInput
  ): UnitFact

  # Store Havainnon keruutiedot
  #
  # Equivalent to PUT /unitGathering/{id}
  updateunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!
    requestBody: UnitGatheringInput
  ): UnitGathering

  # Store Unit of measurement
  #
  # Equivalent to PUT /unitOfMeasurement/{id}
  updateunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!
    requestBody: UnitOfMeasurement2Input
  ): UnitOfMeasurement2

  # Store validator
  #
  # Equivalent to PUT /validator/{id}
  updatevalidator(
    # Id for the validator
    id: String!
    requestBody: Validator2Input
  ): Validator2

  # Store Video
  #
  # Equivalent to PUT /video/{id}
  updatevideo(
    # Id for the Video
    id: String!
    requestBody: Video2Input
  ): Video2
}

type Bulk {
  administrativeStatus: [AdministrativeStatus2]
  agent: [Agent2]
  annotation: [Annotation2]
  annotationOccurrence: [AnnotationOccurrence]
  area: [Area2]
  audio: [Audio2]
  bibliographicResource: [BibliographicResource2]
  birdSongRecognitionSkillLevel: [BirdSongRecognitionSkillLevel2]
  branch: [Branch2]
  checklist: [Checklist2]
  checklistVersion: [ChecklistVersion2]
  collection: [Collection2]
  completeList: [CompleteList2]
  concept: [Concept2]
  contentContextDescription: [ContentContextDescription2]
  dataField: [DataField2]
  dataset: [Dataset2]
  dateRange: [DateRange2]
  device: [Device2]
  deviceIndividual: [DeviceIndividual2]
  document: [Document2]
  downloadRequest: [DownloadRequest2]
  endangerment: [Endangerment2]
  event: [Event3]
  field: [Field2]
  fieldset: [Fieldset2]
  form: [Form2]
  formFooter: [FormFooter]
  formInstructions: [FormInstructions2]
  formNamedPlaceOptions: [FormNamedPlaceOptions]
  formOptions: [FormOptions]
  formPermission: [FormPermission2]
  formPermissionPerson: [FormPermissionPerson2]
  formPermissionSingle: [FormPermissionSingle2]
  formSeason: [FormSeason]
  gathering: [Gathering]
  gatheringEvent: [GatheringEvent]
  gatheringFact: [GatheringFact]
  habitat: [Habitat3]
  identification: [Identification]
  image: [Image2]
  individual: [Individual2]
  informalTaxonGroup: [InformalTaxonGroup2]
  informationSystem: [InformationSystem2]
  iucnRedListEvaluation: [IucnRedListEvaluation2]
  iucnRedListEvaluationYear: [IucnRedListEvaluationYear2]
  iucnRedListTaxonGroup: [IucnRedListTaxonGroup2]
  measurement: [Measurement]
  model: [Model2]
  multimedia: [Multimedia2]
  namedPlace: [NamedPlace2]
  news: [News2]
  notification: [Notification2]
  occurrence: [Occurrence2]
  organization: [Organization2]
  pdf: [Pdf2]
  permit: [Permit2]
  person: [Person2]
  pinkka: [Pinkka2]
  preparation: [Preparation2]
  profile: [Profile2]
  publication: [Publication3]
  regionalStatus: [RegionalStatus2]
  reserve: [Reserve]
  sample: [Sample2]
  satelliteTrackingProject: [SatelliteTrackingProject2]
  specimenTransaction: [SpecimenTransaction2]
  specimenTransactionEvent: [SpecimenTransactionEvent]
  subUnit: [SubUnit2]
  tag: [Tag2]
  taxon: [Taxon2]
  taxonCensus: [TaxonCensus2]
  taxonConcept: [TaxonConcept2]
  taxonGroupIucnEditors: [TaxonGroupIucnEditors2]
  taxonInteraction: [TaxonInteraction2]
  taxonSet: [TaxonSet2]
  trait: [Trait2]
  traitEnumValue: [TraitEnumValue2]
  traitGroup: [TraitGroup2]
  transaction: [Transaction2]
  transactionEvent: [TransactionEvent2]
  transactionItem: [TransactionItem]
  translation: [Translation2]
  typeSpecimen: [TypeSpecimen]
  unit: [Unit]
  unitFact: [UnitFact]
  unitGathering: [UnitGathering]
  unitOfMeasurement: [UnitOfMeasurement2]
  validator: [Validator2]
  video: [Video2]
}

input BulkInput {
  administrativeStatus: [AdministrativeStatus2Input]
  agent: [Agent2Input]
  annotation: [Annotation2Input]
  annotationOccurrence: [AnnotationOccurrenceInput]
  area: [Area2Input]
  audio: [Audio2Input]
  bibliographicResource: [BibliographicResource2Input]
  birdSongRecognitionSkillLevel: [BirdSongRecognitionSkillLevel2Input]
  branch: [Branch2Input]
  checklist: [Checklist2Input]
  checklistVersion: [ChecklistVersion2Input]
  collection: [Collection2Input]
  completeList: [CompleteList2Input]
  concept: [Concept2Input]
  contentContextDescription: [ContentContextDescription2Input]
  dataField: [DataField2Input]
  dataset: [Dataset2Input]
  dateRange: [DateRange2Input]
  device: [Device2Input]
  deviceIndividual: [DeviceIndividual2Input]
  document: [Document2Input]
  downloadRequest: [DownloadRequest2Input]
  endangerment: [Endangerment2Input]
  event: [Event3Input]
  field: [Field2Input]
  fieldset: [Fieldset2Input]
  form: [Form2Input]
  formFooter: [FormFooterInput]
  formInstructions: [FormInstructions2Input]
  formNamedPlaceOptions: [FormNamedPlaceOptionsInput]
  formOptions: [FormOptionsInput]
  formPermission: [FormPermission2Input]
  formPermissionPerson: [FormPermissionPerson2Input]
  formPermissionSingle: [FormPermissionSingle2Input]
  formSeason: [FormSeasonInput]
  gathering: [GatheringInput]
  gatheringEvent: [GatheringEventInput]
  gatheringFact: [GatheringFactInput]
  habitat: [Habitat3Input]
  identification: [IdentificationInput]
  image: [Image2Input]
  individual: [Individual2Input]
  informalTaxonGroup: [InformalTaxonGroup2Input]
  informationSystem: [InformationSystem2Input]
  iucnRedListEvaluation: [IucnRedListEvaluation2Input]
  iucnRedListEvaluationYear: [IucnRedListEvaluationYear2Input]
  iucnRedListTaxonGroup: [IucnRedListTaxonGroup2Input]
  measurement: [MeasurementInput]
  model: [Model2Input]
  multimedia: [Multimedia2Input]
  namedPlace: [NamedPlace2Input]
  news: [News2Input]
  notification: [Notification2Input]
  occurrence: [Occurrence2Input]
  organization: [Organization2Input]
  pdf: [Pdf2Input]
  permit: [Permit2Input]
  person: [Person2Input]
  pinkka: [Pinkka2Input]
  preparation: [Preparation2Input]
  profile: [Profile2Input]
  publication: [Publication3Input]
  regionalStatus: [RegionalStatus2Input]
  reserve: [ReserveInput]
  sample: [Sample2Input]
  satelliteTrackingProject: [SatelliteTrackingProject2Input]
  specimenTransaction: [SpecimenTransaction2Input]
  specimenTransactionEvent: [SpecimenTransactionEventInput]
  subUnit: [SubUnit2Input]
  tag: [Tag2Input]
  taxon: [Taxon2Input]
  taxonCensus: [TaxonCensus2Input]
  taxonConcept: [TaxonConcept2Input]
  taxonGroupIucnEditors: [TaxonGroupIucnEditors2Input]
  taxonInteraction: [TaxonInteraction2Input]
  taxonSet: [TaxonSet2Input]
  trait: [Trait2Input]
  traitEnumValue: [TraitEnumValue2Input]
  traitGroup: [TraitGroup2Input]
  transaction: [Transaction2Input]
  transactionEvent: [TransactionEvent2Input]
  transactionItem: [TransactionItemInput]
  translation: [Translation2Input]
  typeSpecimen: [TypeSpecimenInput]
  unit: [UnitInput]
  unitFact: [UnitFactInput]
  unitGathering: [UnitGatheringInput]
  unitOfMeasurement: [UnitOfMeasurement2Input]
  validator: [Validator2Input]
  video: [Video2Input]
}

input AdministrativeStatus2Input {
  administrativeStatusDescription: AdministrativeStatusDescriptionInput
  administrativeStatusLink: AdministrativeStatusLinkInput
  context: String
  id: String
  type: String
}

input AdministrativeStatusDescriptionInput {
  en: [String]
  fi: [String]
  sv: [String]
}

input AdministrativeStatusLinkInput {
  en: [String]
  fi: [String]
  sv: [String]
}

input Agent2Input {
  context: String
  id: String
  type: String
}

input Annotation2Input {
  addedTags: [String]
  annotationByPerson: String
  annotationBySystem: String
  annotationClass: AnnotationClass
  byRole: ByRole
  censusAnnotation: [CensusAnnotationListItem]
  context: String
  created: String
  createdBySystem: String
  createdTimestamp: Int
  deleted: Boolean
  deletedByPerson: String
  deletedDateTime: String
  deletedTimestamp: Int
  id: String
  identification: IdentificationInput
  invasiveControlEffectiveness: InvasiveControlEffectiveness
  lineTransectAnnotation: [LineTransectAnnotationListItem]
  notes: String
  occurrenceAtTimeOfAnnotation: AnnotationOccurrenceInput
  opinion: String
  removedTags: [String]
  rootID: String
  targetID: String
  type: Type
}

input IdentificationInput {
  # Write associated observation taxa names here, separated by a semicolon (;). E.g.: "Betula pendula; Betula pubescens; Poaceae". These will form their own units of the type observation.
  associatedObservationTaxa: String

  # Author for the taxon
  author: String
  context: String

  # Name of the identifier (person) preferably in format "lastname, firstname"
  det: String

  # Date or year when the identification was done, preferably in format "d.m.Y" or "Y"
  detDate: String
  detMethod: DetMethod

  # Name of the identifier and date of identification in original format (e.g. from the label), errors and all
  detVerbatim: String

  # Additional qualifier or specifier at genus level (e.g. aff., cf.)
  genusQualifier: String
  herboSortOrder: Int
  id: String
  identificationBasis: [IdentificationBasisListItem]

  # Additional information on the identification, basis or such
  identificationNotes: String

  # Author for the taxon below species level/infra epithet
  infraAuthor: String

  # Taxon name for the epithet below species level
  infraEpithet: String

  # Taxonomic level of the epithet below species level
  infraRank: InfraRank

  # Pathovars, serovars and other infrasubspecific subdivisions of microbes.
  infrasubspecificSubdivision: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  isTaxonGroup: Boolean

  # This can be used to select one of the identifications as 'recommended', which is the used as default when displaying information about the specimen.
  preferredIdentification: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Publication reference for the taxon concept, that was used in identification
  sec: String
  sortOrder: Int

  # Additional qualifier at species level (e.g. aff., cf., sp. n., coll.)
  speciesQualifier: String

  # Taxon name
  taxon: String

  # ID for the taxon if has some other than an MX code
  taxonID: String

  # Taxonomic level for the identification
  taxonRank: TaxonRank
  taxonSpecifier: String
  taxonURI: String

  # Taxon name in original format (e.g. from the label), errors and all
  taxonVerbatim: String
  type: String
}

input AnnotationOccurrenceInput {
  context: String
  countryVerbatim: String
  dateBegin: String
  dateEnd: String
  id: String
  locality: String
  municipalityVerbatim: String
  taxonId: String
  taxonVerbatim: String
  type: String
  wgs84centerPointLat: Float
  wgs84centerPointLon: Float
}

input Area2Input {
  # Aluetyyppi
  areaType: AreaType!
  context: String

  # Country code ISO alpha 2
  countryCodeISOalpha2: String

  # country code ISO alpha 3
  countryCodeISOalpha3: String
  id: String
  isPartOf: String
  isPartOfBirdAssociationArea: String
  isPartOfEnvironmentalELY: String
  isPartOfProvince: String
  name: MultiLangInput!
  previouslyOfficialName: [String]
  provinceCodeAlpha: MultiLangInput
  provinceCodeNumeric: String
  ringingDepartmentBirdAssociationAreaCode: String
  ringingDepartmentMunicipalityCode: String
  type: String
}

input MultiLangInput {
  en: String
  fi: String
  sv: String
}

input Audio2Input {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  fullURL: String!
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  mp3URL: String!
  originalFilename: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  taxonDescriptionCaption: MultiLangInput
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
  wavURL: String
}

input BibliographicResource2Input {
  context: String
  id: String
  isPublic: Boolean!
  owner: String!
  type: String
}

input BirdSongRecognitionSkillLevel2Input {
  birdSongRecognitionArea: String!
  birdSongRecognitionSkillLevel: SkillLevel!
  context: String
  id: String
  type: String
}

input Branch2Input {
  accessionID: String!

  # Garden area
  collectionID: String!
  context: String

  # Is the branch alive or not?
  exists: Boolean
  gardenLocationNotes: String
  id: String

  # Sublocation within the garden area, free-text
  location: String
  notes: String
  type: String
  wgs84Latitude: String
  wgs84Longitude: String
}

input Checklist2Input {
  context: String
  dcBibliographicCitation: MultiLangInput
  id: String
  isPublic: Boolean!
  owner: String!
  rdfsComment: String
  rootTaxon: String!
  type: String
}

input ChecklistVersion2Input {
  context: String
  id: String
  type: String
  versionChecklist: String
  versionDate: String
  versionDescription: MultiLangInput
  versionName: MultiLangInput
}

input Collection2Input {
  # Unofficial abbreviation (or acronym) for this collection
  abbreviation: String
  additionalIdentifier: [String]

  # Admin field. Is it allowed to use collection with data warehouse /statistic endpoints.
  allowedForDwStatistics: Boolean
  boundingBoxLatMax: String
  boundingBoxLatMin: String
  boundingBoxLonMax: String
  boundingBoxLonMin: String

  # Example how to cite this collection in a scientific article, if using organization, name and abbreviation is not enough.
  citation: String

  # Collection code for natural history specimen collection, such as H-BR
  collectionCode: String
  collectionLocation: MultiLangInput
  collectionName: MultiLangInput!

  # Quality classification for the collection.
  collectionQuality: CollectionQuality!

  # How many specimens, records or such does the collection contain? Fill in approximate number, describe more in notes if necessary.
  collectionSize: String

  # Type of the collection (specimen, monitoring etc).
  collectionType: CollectionType!
  concealmentBasis: MultiLangInput

  # Personal or general (e.g. group of people in the organisation) email address to reach the person(s) responsible.
  contactEmail: String!
  context: String
  coverageBasis: MultiLangInput
  creator: String
  dataLocation: MultiLangInput

  # Diary-like notes about the data, with date/time. For example "2020-08-19: Changed country names Fönland to Finland", or "Specimens collected during 2019 are missing coordinates due to malfunctioning GPS"
  dataNotes: String

  # Quality estimation for the data in this collection
  dataQuality: DataQuality
  dataQualityDescription: MultiLangInput

  # Embargo period in years after which data is opened
  dataQuarantinePeriod: Int
  dataUseTerms: MultiLangInput
  dateCreated: String
  dateEdited: String
  description: MultiLangInput!

  # How many percent of the collection is in digital form, e.g. in a database or Excel file? Fill in approximate number, describe more in notes if necessary.
  digitizedSize: String
  doi: String

  # Admin field. The identifier of the person responsible for handling requests for restricted data for this set (typically same person who's responsible for the collection)
  downloadRequestHandler: [String]

  # Reason for this edit or notes about it.
  editNotes: String
  editor: String

  # Admin field. DOI received from GBIF after the collection has been published.
  gbifDoi: String
  geographicCoverage: MultiLangInput
  id: String

  # Institution code for natural history specimen collection holding institution, such as H, MHZ or TUR
  institutionCode: String
  intellectualDescription: MultiLangInput

  # Name of the institution or organisation publishing the data.
  intellectualOwner: String

  # License which is used when publishing data that belongs to this collection.
  intellectualRights: LicenseForUse!

  # Is the data to be used only within Kotka?
  internalUseOnly: Boolean

  # Which parent or larger collection this is part of.
  isPartOf: String

  # Language the data is (mainly) written in, if applicable.
  language: String
  longName: MultiLangInput
  metadataCreator: String

  # Indication of how comprehensive the information on this form is.
  metadataStatus: MetadataStatus
  methods: MultiLangInput

  # Additional information to the data in each section.
  notes: String
  onlineUrl: MultiLangInput

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Person(s) responsible for the collection (Lastname, Firstname; Lastname, Firstname).
  personResponsible: String!

  # Used for botanic garden collections. Is the collection/garden area accessible to public or not.
  publicAccess: Boolean
  publicationDescription: MultiLangInput

  # How can Luomus publish the data, if it is owned by third party?
  publicationTerms: PublicationTerms

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions
  publisherShortname: MultiLangInput

  # Secure level (salaus-/karkeistustaso) for the data
  secureLevel: SecureLevel
  shareToFEO: String

  # Admin field. Can the data be shared to GBIF or not: Given collection ID means data is shared under that collection.
  shareToGbif: String
  taxonomicCoverage: MultiLangInput
  temporalCoverage: MultiLangInput
  type: String

  # How many TYPE specimens does the collection contain?  Fill in approximate number, describe more in notes if necessary.
  typesSize: String
}

input CompleteList2Input {
  completeListTaxonID: String
  completeListType: CompleteListType
  context: String
  id: String
  type: String
}

input Concept2Input {
  context: String
  id: String
  skosBroader: String!
  skosDefinition: String!
  skosExample: String!
  skosInScheme: String!
  skosNarrower: String!
  skosNote: String!
  type: String
}

input ContentContextDescription2Input {
  context: String
  id: String
  type: String
}

input DataField2Input {
  apiName: String
  context: String

  # Information for data users about the contents/source/etc of the field
  description: String
  example: String
  id: String
  includeFull: Boolean
  includeSecurePortalUI: Boolean
  includeUI: Boolean
  name: String!
  rPackageName: String

  # Short name for shapefiles
  shortName: String!
  sortOrder: Int

  # Internal notes for us developers
  techicalNotes: String

  # Short dwc or other term for the field (for example "collectionID"); usually the same as subjectname (without the "DDF.")
  technicalName: String!
  type: String
}

input Dataset2Input {
  # What monetary or non-monetary benefits arised from the project and how they were shared. (Related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  benefitsDerivedAndShared: String
  context: String
  creator: String
  datasetName: MultiLangInput!

  # Type of the tag. Usually basic, project type is generally used only to give information on project Nagoya compliance.
  datasetType: DatasetType!
  dateCreated: String
  dateEdited: String
  description: MultiLangInput!
  editor: String
  id: String

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Person(s) responsible for the tag.
  personsResponsible: String!

  # Institutions or persons collaborating in the project.
  researchCollaborator: String

  # Duration of the project funding (dates from and to). (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  researchFundingDuration: String

  # Which person or institution received the project funding (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  researchFundingRecipient: String

  # Who funded the project (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).
  researchFundingSource: String
  type: String
}

input DateRange2Input {
  context: String
  end: String
  id: String
  start: String
  type: String
}

input Device2Input {
  context: String
  creator: String
  dateCreated: String
  dateEdited: String
  deviceManufacturer: String
  deviceManufacturerID: String!
  deviceType: String
  editor: String
  id: String
  ownerPerson: [String]
  type: String
}

input DeviceIndividual2Input {
  # Date time when attached to the individual
  attached: String!
  context: String

  # Id for the device
  deviceID: String!
  id: String

  # Id for the individual
  individualID: String!

  # Date time when removed from to the individua
  removed: String
  type: String
}

input Document2Input {
  acknowledgedWarnings: [JSON]

  # From who/where the specimen was acquired (if not recorded as a transaction)
  acquiredFrom: String

  # Organization where the accession was acquired from. If the organization is not on the list, add it first.
  acquiredFromOrganization: String

  # Date (d.m.yyyy) or year (yyyy) on which the specimen was acquired to the collection. Empty means an old specimen acquired on an unknown date.
  acquisitionDate: String

  # Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)
  additionalIDs: [String]

  # BOLD identifier, usually BOLD Sample ID. You can include additonal comment by separating them with colon, e.g. "AY123456:comments here"
  bold: [String]
  caption: String

  # Clad book id number or such
  cladBookID: String

  # Clad specimen id: usually color description and a number
  cladSpecimenID: String

  # Verbatim specimen data from clad book
  cladVerbatim: String

  # The collection which this specimen belongs to
  collectionID: String

  # Notes on the defects of the specimen (missing parts or such). Empty value means same as "good" or "hyvä" - that there is nothing special to mention about the condition.
  condition: String
  context: String
  creator: String

  # Annuality/perenniality or other specialities about cultivation in our conditions.
  cultivationInformation: String

  # Leave empty if no sample taken, or if the sample is recorded separately
  dNASampleLocation: String
  dataOrigin: [DataOriginListItem]

  # Where the data about this specimen or observation is from, in addition to labels. Eg. reference to a publication, field notes or an expedition.
  dataSource: String

  # The tags this specimen has
  datasetID: [String]
  datatype: String
  dateCreated: String
  dateEdited: String
  deviceID: String

  # Location of the specimen so that museum personnel can find it. E.g. taxon under which it is stored (if not clear from the identification), or shelf number
  documentLocation: String

  # Description where duplicates (specimens of the same individual) are located or have been sent to and by which ID's.
  duplicatesIn: String

  # Reason for this edit or notes about it.
  editNotes: String
  editor: String
  editors: [String]

  # Date the data was first transcribed into electronic format or paper registry
  entered: String

  # Free-text diary-style information about what has been done to the specimen and when.
  event: [String]

  # Name of the exsiccatum this specimen belongs to and possible exsiccatum number.
  exsiccatum: String

  # Id of the form that was used for the document
  formID: String
  gatheringEvent: GatheringEventInput
  gatherings: [GatheringInput]!

  # Genbank identifier. You can include additonal comment by separating them with colon, e.g. "AY123456:comments here"
  genbank: [String]
  hasGathering: [String]

  # IPEN Number for the accession
  iPEN: String
  id: String
  images: [String]
  isTemplate: Boolean
  keywords: [String]

  # All text from labels word-for-word, including spelling errors. Separate each label on its own row, starting from topmost label.
  labelsVerbatim: String

  # Language the data is (mainly) written in, if applicable.
  language: String

  # Collecting number (field identifier, keruunumero) for the specimen
  legID: String
  locked: Boolean
  namedPlaceID: String

  # Additional information to the data in each section.
  notes: String

  # Original catalogue number or other  original identifier of the specimen. E.g. H9000000
  originalSpecimenID: String

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Garden area where this accession is planned to be located.
  plannedLocation: String

  # Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.
  preservation: [PreservationListItem]

  # Location of the primary data if not Kotka.
  primaryDataLocation: String

  # Notes shown within the system for users signed in but not shown publicly anywhere. Use only for notes that absolutely need to be hidden from public view.
  privateNotes: String

  # Publication references or doi's that refer to this specimen
  publication: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Relationship to another taxon OR specimen. Choose relationship type as prefix and give taxon name or specimen identifier thereafter, e.g. "parasite: Parasiticus specius" OR "host:http://tun.fi/JAA.123"
  relationship: [String]

  # The history of the specimen, for example how it was acquired or in which museums it has been before.
  sampleHistory: String
  scheduledForDeletion: Boolean

  # Secure level (salaus-/karkeistustaso) for the data
  secureLevel: SecureLevel

  # ID of the specimen from which this has been separated
  separatedFrom: String

  # ID's of those new specimens that have been separated from this specimen
  separatedTo: [String]
  serialNumber: String
  sourceID: String

  # Empty value means same as "ok" - that there is not anything special about the status of the specimen.
  status: Status3
  temp: Boolean
  templateDescription: String
  templateName: String

  # Additional information regarding the data entry or transcription process, e.g. unclarities, explanations for interpretations,
  transcriberNotes: String

  # Common name of agreement concerning the transfer, if any.
  transferAgreement: String
  type: String

  # URL where more information is available about the specimen
  uRL: String

  # List of those fields that contain unreliable data. The list is created automatically.
  unreliableFields: String

  # Information about the quality of the specimen data. Possible to select several.
  verificationStatus: [VerificationStatusListItem]

  # Identifier of the herbarium voucher specimen or information about it if the identifier is unknown.
  voucherSpecimenID: String
}

input GatheringEventInput {
  acknowledgeNoUnitsInCensus: Boolean
  artificialLight: ArtificialLight
  breaksDuringCensusInMinutes: Int
  censusHinderedByEnviromentalFactors: Boolean
  censusHinderedByFog: Boolean
  censusHinderedByRain: Boolean
  censusHinderedByWind: Boolean
  censusPrematurelyAborted: Boolean
  cloudCover: CloudCover
  cloudCoverEnd: CloudCoverEnd
  cloudCoverStart: CloudCoverStart
  completeList: CompleteList2Input
  context: String
  dateBegin: String
  dateEnd: String
  gatheringFact: GatheringFactInput
  geometry: JSON
  gpsUsed: Boolean
  id: String

  # Name of the collector(s), in format 'Lastname, Firstname; Lastname Firstname'
  leg: [String]
  legPublic: Boolean

  # Alkuperäislähteen käyttäjätunnus
  legUserID: [String]
  namedPlaceNotes: String
  nextMonitoringYear: Int

  # Additional information to the data in each section.
  notes: String
  rainIntensity: RainIntensity
  routeDirectionAdhered: Boolean
  spottingScopeUsed: Boolean
  startDistanceFromNECorner: String
  startPointDeviation: Int
  taxonCensus: [TaxonCensus2Input]
  temperature: Int
  temperatureEnd: Float
  temperatureStart: Float
  timeEnd: String
  timeStart: String
  type: String
}

input GatheringFactInput {
  aCAFLAonAlder: Int
  aCAFLAonBirch: Int
  aCAFLAonGround: Int
  aCAFLAonPine: Int
  aCAFLAonSpruce: Int
  abundanceBOMGAR: AbundanceBOMGAR
  abundancePINENU: AbundancePINENU
  abundanceTURPIL: AbundanceTURPIL
  batCollector: BatCollector
  binocularsUsed: Boolean
  birdFeederCount: Int
  birdFeederCountBiotopeA: Int
  birdFeederCountBiotopeB: Int
  birdFeederCountBiotopeC: Int
  birdFeederCountBiotopeD: Int
  birdFeederCountBiotopeE: Int
  birdFeederCountBiotopeF: Int
  birdFeederCountBiotopeG: Int
  birdFeederCountBiotopeH: Int
  cARSPIonAlder: Int
  cARSPIonBirch: Int
  cARSPIonGround: Int
  cARSPIonPine: Int
  cARSPIonSpruce: Int
  censusAreaHectares: Int
  cloudAndRain: CloudAndRain
  context: String
  descriptionBiotopeF: String
  feedingStationCount: Int
  feedingStationCountBiotopeA: Int
  feedingStationCountBiotopeB: Int
  feedingStationCountBiotopeC: Int
  feedingStationCountBiotopeD: Int
  feedingStationCountBiotopeE: Int
  feedingStationCountBiotopeF: Int
  feedingStationCountBiotopeG: Int
  feedingStationCountBiotopeH: Int
  iceCover: IceCover
  id: String
  invasiveControlOtherExpensesInEuros: Int
  invasiveControlWorkHours: Int
  lOXIAonAlder: Int
  lOXIAonBirch: Int
  lOXIAonGround: Int
  lOXIAonPine: Int
  lOXIAonSpruce: Int
  lineTransectSegmentCounted: Boolean
  lineTransectSegmentMetersEnd: Int
  lineTransectSegmentMetersStart: Int
  lolifeSiteClassification: LolifeSiteClassification
  lolifeSiteClassificationComments: String
  meanTemperature: Int
  observedAreaHectares: Int
  observerCount: Int
  observerID: Int
  pineConesAtCensus: PineConesAtCensus
  pointCountHabitat: PointCountHabitat
  routeID: Int
  routeLength: Int
  routeLengthBiotopeA: Int
  routeLengthBiotopeB: Int
  routeLengthBiotopeC: Int
  routeLengthBiotopeD: Int
  routeLengthBiotopeE: Int
  routeLengthBiotopeF: Int
  routeLengthBiotopeG: Int
  routeLengthBiotopeH: Int
  routeLengthChange: Int
  routeLengthChangeBiotopeA: Int
  routeLengthChangeBiotopeB: Int
  routeLengthChangeBiotopeC: Int
  routeLengthChangeBiotopeD: Int
  routeLengthChangeBiotopeE: Int
  routeLengthChangeBiotopeF: Int
  routeLengthChangeBiotopeG: Int
  routeLengthChangeBiotopeH: Int
  shorelineLengthMeters: Int
  snowAndIceOnTrees: SnowAndIceOnTrees
  snowCover: SnowCover
  sorbusBerriesAtCensus: SorbusBerriesAtCensus
  sorbusBerriesEarlyFall: SorbusBerriesEarlyFall
  spottingScopeUsed: Boolean
  spruceConesAtCensus: SpruceConesAtCensus
  sunniness: Int
  sykeButterFlyCensusWind: SykeButterFlyCensusWind
  sykeButterFlyCensusWindEnd: SykeButterFlyCensusWindEnd
  sykeButterFlyCensusWindStart: SykeButterFlyCensusWindStart
  type: String
  typeOfSnowCover: TypeOfSnowCover
  visibility: Visibility
  waterbirdCensusPeriod: WaterbirdCensusPeriod
  waterbirdHabitat: WaterbirdHabitat
  waterbodies: Waterbodies
  wayOfTravel: WayOfTravel
  wayOfTravelNotes: String
  wind: Wind
  ykjSquareNumber: String
}

input TaxonCensus2Input {
  censusTaxonID: String
  censusTaxonSetID: CensusTaxonSetID
  context: String
  id: String
  taxonCensusType: TaxonCensusType!
  type: String
}

input GatheringInput {
  # AFE grid name
  aFEQuadrat: String
  acknowledgeNoUnitsInCensus: Boolean

  # Regions, rayons, provinces and other administrative areas. Separate multiple names with commas, from generic to specific. (E.g. Etelä-Suomen lääni, Uusimaa)
  administrativeProvince: String

  # Altitude form sea level in meters, single value or range (E.g. 90, or 80-100). No GPS altitude here.
  alt: String
  areaDetail: String

  # Write associated observation taxa names here, separated by a semicolon (;). E.g.: "Betula pendula; Betula pubescens; Poaceae". These will form their own units of the type observation.
  associatedObservationTaxa: String

  # Write associated specimen taxa names here, separated by a semicolon (;). E.g.: "Betula pendula; Betula pubescens; Poaceae". These will form their own units of the type Preserved specimen.
  associatedSpecimenTaxa: String

  # Bat habitat
  batHabitat: [BatHabitatListItem]
  binocularsUsed: Boolean

  # Formal abbreviation. For Finnish eliömaakunnat, use Finnish abbreviation.
  biologicalProvince: String
  censusHinderedByEnviromentalFactors: Boolean
  censusHinderedByFog: Boolean
  censusHinderedByRain: Boolean
  censusHinderedByWind: Boolean

  # Name of an expedition or such.
  collectingEventName: String
  context: String
  controlActivitiesNotes: String

  # Free-text notes about the coordinates.
  coordinateNotes: String

  # Maximum error of coordinates in meters
  coordinateRadius: String

  # Use for NEW SPECIMENS: Where the coordinates have been acquired
  coordinateSource: CoordinateSource

  # More information about the coordinate systems: https://wiki.helsinki.fi/display/digit/Entering+specimen+data
  coordinateSystem: CoordinateSystem
  coordinatesGridYKJ: String

  # Coordinates, possible coordinate system and error radius word-to-word as they appear on the label or other original source, errors and all.
  coordinatesVerbatim: String

  # Country name in English, or 2-letter country code, or name from label
  country: String

  # County (piirikunta, kreivikunta etc.)
  county: String
  dateBegin: String
  dateEnd: String

  # Date just as it appears on the label or other original source, no interpretation, errors and all
  dateVerbatim: String

  # Depth in meters, single value or range (E.g. 0.9, or 0.8-1.0)
  depth: String
  dynamicProperties: String
  eventDate: String

  # Finnish forest vegetation zone
  forestVegetationZone: ForestVegetationZone
  gatheringFact: GatheringFactInput
  gatheringType: GatheringType
  geometry: JSON

  # Use for OLD SPECIMENS: What source was used to get coordinates based on locality names
  georeferenceSource: GeoreferenceSource
  habitat: [HabitatListItem]
  habitatAttributes: [HabitatAttributesListItem]

  # Formal habitat name or abbreviation. If several, separate with semicolons (E.g. 'OMT; OMaT').
  habitatClassification: String

  # Informal description of the habitat.
  habitatDescription: String
  hasUnit: [String]

  # If country is not known or not applicable, for example continent, ocean or large island
  higherGeography: String
  id: String
  images: [String]
  invasiveControlAreaKnown: Boolean
  invasiveControlDangerous: Boolean
  invasiveControlDangerousDescription: String
  invasiveControlEffectiveness: ControlLevel
  invasiveControlEffectivenessNotes: String
  invasiveControlMethods: [InvasiveControlMethodsListItem]
  invasiveControlMethodsDescription: String
  invasiveControlOpen: Boolean
  invasiveControlOpenDescription: String
  invasiveControlOtherExpensesInEuros: Int
  invasiveControlTaxon: [String]

  # Which parent or larger collection this is part of.
  isPartOf: String
  keywords: [String]

  # Latitude. For southern latitudes, use negative value.
  latitude: String

  # Name of the collector(s), in format 'Lastname, Firstname; Lastname Firstname'
  leg: [String]

  # Alkuperäislähteen käyttäjätunnus
  legUserID: [String]

  # Leg just as it appears in the label or other original source, no interpretation, errors and all.
  legVerbatim: String

  # Official name of the locality in basic form. Separate multiple names with commas, from generic to specific. No informal description here.
  locality: String

  # Informal description of the exact locality, e.g. '5 km NE of city X, under stone bridge'
  localityDescription: String

  # An unique identifier or code for the locality, if the locality has one (e.g. from SAPO-ontology).
  localityID: String

  # Locality word-to-word as it appears on the label or other original source, errors and all
  localityVerbatim: String

  # Longitude. For western longitudes, use negative value.
  longitude: String

  # Municipality, commune, town, city or civil parish
  municipality: String
  namedPlaceID: String

  # Additional information to the data in each section.
  notes: String

  # For garden accessions/seed bank, number of individuals from which seeds were collected
  numberOfSampledIndividuals: String
  observationDays: Int
  observationMinutes: Int

  # For garden accessions/seed bank, what proportion of the population sampled was giving seeds
  percentageGivingSeeds: Int
  predominantTree: PredominantTree
  projectTitle: String
  province: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Relative humidity %
  relativeHumidity: Int

  # For garden accessions/seed bank, estimated size of the area sampled, in square meters
  samplingAreaSizeInSquareMeters: Float

  # Main method for (usually intentional) sampling
  samplingMethod: SamplingMethod
  samplingMethodNotes: String
  section: Int
  skipped: Boolean
  spottingScopeUsed: Boolean

  # Type of substrate or name of substrate species.
  substrate: String
  taxonCensus: [TaxonCensus2Input]
  temperature: Int
  timeEnd: String
  timeStart: String
  trapCount: Int
  type: String

  # UTM grid name
  uTMQuadrat: String
  units: [UnitInput]
  weather: String
  wgs84Latitude: String
  wgs84Longitude: String
}

input UnitInput {
  abundanceString: String
  abundanceUnit: AbundanceUnit

  # Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)
  additionalIDs: [String]
  adultIndividualCount: Int

  # Estimated or known age in calendar years, years, days or other relevant unit.
  age: String

  # E.g. how age was determined, by whom and when.
  ageNotes: String
  alive: Boolean
  ankleInMillimeters: [String]
  areaInSquareMeters: Int
  atlasCode: AtlasCode
  audio: [String]
  batBehavior: BatBehavior
  beakInMillimeters: [String]
  birdAge: BirdAge
  birdBehavior: [String]
  birdPlumage: BirdPlumage
  breeding: Boolean
  broodSize: Int

  # Cause of death, if not intentionally trapped on sampled
  causeOfDeath: String
  checklistID: String

  # Results of chemical reaction tests etc.
  chemistry: String
  context: String

  # Numeric or other description on the amount of individuals (or sprouts, fruiting bodies or such) in the specimen. Sexes and juveniles can be specified like so: 1m2f3j (=1 male, 2 females, 3 juveniles)
  count: String

  # Diameter at breast height, in centimeters
  dBH: String

  # Leave empty if no sample taken, or if the sample is recorded separately
  dNASampleLocation: String

  # Estimation of decay stage (lahoaste in Finnish) on the scale of 1 to 5 and/or description
  decayStage: String
  distance: Distance

  # For palaeontological specimens, earliest possible geochronologic epoch or lowest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected
  earliestEpochOrLowestSeries: EarliestEpochOrLowestSeries
  femaleIndividualCount: Int

  # Fruit type of the collected fruits, used for botanical garden accessions/seed bank.
  fruitType: FruitType

  # Genotype of the microbial strain
  genotype: String
  gonadInMillimeters: [String]

  # Microbial culture growth medium name, usually from a standard
  growthMediumName: String

  # Other growth conditions for the microbial culture, light etc.
  growthOtherConditions: String

  # Microbial culture growth temperature
  growthTemperature: String
  hasIdentification: [String]
  hasSubUnit: [String]
  hostID: String
  hostInformalNameString: String
  id: String
  identifications: [IdentificationInput]
  images: [String]
  indirectObservationType: IndirectObservationType
  individualCount: Int

  # Description of the infestation status of the collected seeds, used for botanical garden accessions/seed bank.
  infestation: String
  informalNameString: String
  informalTaxonGroup: String

  # Valitut eliöryhmät
  informalTaxonGroups: [String]

  # Pathovars, serovars and other infrasubspecific subdivisions of microbes.
  infrasubspecificSubdivision: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  juvenileIndividualCount: Int
  keywords: [String]
  larvaIndividualCount: Int

  # For palaeontological specimens, latest possible geochronologic epoch or highest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected.
  latestEpochOrHighestSeries: LatestEpochOrHighestSeries
  lengthInMillimeters: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage

  # Free-text notes or addtional information about the life stage. If multiple values present, describe them here.
  lifeStageDescription: String
  likelyMigrant: Boolean

  # Macroscopic features and measurements, if not recorded separately into measurement fields.
  macroscopy: String
  maleIndividualCount: Int
  measurement: MeasurementInput

  # According to German TRBA August 2015, which is more comprehensive than the EU or Finnish list for bacterial risk groups
  microbiologicalRiskGroup: MicrobiologicalRiskGroup

  # Microscopic features and measurements, if not recorded separately into measurement fields.
  microscopy: String
  movingDirection: MovingDirection
  movingStatus: [String]

  # Information on mutant microbial strain.
  mutant: String
  nativeStatus: NativeStatus
  nestCount: Int
  nestNotes: String
  nestTreeDiameterInCentimeters: Int
  nestType: NestType

  # Additional information to the data in each section.
  notes: String
  pairCount: Int
  pairCountOpinion: Int
  plantLifeStage: PlantLifeStage

  # Status code for the plant (wild, alien etc.)
  plantStatusCode: PlantStatusCode

  # Abundance of the taxon in the field
  populationAbundance: String

  # Preparations/preparates made from the specimen, if not recorded as separate Preparations/samples in the designated section
  preparations: String

  # Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.
  preservation: [PreservationListItem]

  # Can be used to highlight one unit as primary specimen/observation if there are many in one document. Only one unit per document can be marked as primary.
  primarySpecimen: Boolean

  # Origin or source of the garden accession
  provenance: Provenance

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Type of record, most commonly preserved specimen for museum specimens and observation for associated observations ("seuralaislajihavainto").
  recordBasis: RecordBasis

  # What parts of the record are / have been in storage.
  recordParts: [RecordPartsListItem]

  # Bird or bat ring number, code, colour code or such
  ring: String

  # Main method for (usually intentional) sampling
  samplingMethod: SamplingMethod
  samplingMethodNotes: String

  # Maturity of the collected seeds, used for botanical garden accessions/seed bank.
  seedMaturity: SeedMaturity

  # Seed morphology of the collected seeds, used for botanical garden accessions/seed bank.
  seedMorphology: SeedMorphology

  # Sex of the individual(s)
  sex: Sex

  # E.g. how sex was determined, by whom and when.
  sexNotes: String
  shortHandText: String
  smell: Smell
  smellNotes: String
  stratigraphyVerbatim: String
  substrateClassification: SubstrateClassification
  substrateDecayStage: SubstrateDecayStage
  substrateNotes: String
  substrateSpecies: String
  substrateSpeciesID: String
  substrateSpeciesInformalNameString: String
  substrateTreeClassification: [SubstrateTreeClassificationListItem]
  tailInMillimeters: [String]
  taste: Taste
  tasteNotes: String
  taxonConfidence: TaxonConfidence
  twitched: Boolean
  type: String
  typeSpecimens: [TypeSpecimenInput]
  unitFact: UnitFactInput
  unitGathering: UnitGatheringInput
  unitType: [String]
  weightInGrams: [String]
  wild: Wild
  wingInMillimeters: [String]
}

input MeasurementInput {
  beakMillimeters: [Float]
  bodyCentimeters: [Float]
  bodyMillimeters: [Float]
  context: String
  dNAConcentrationNgPerMicroliter: [Float]
  dNARatioOfAbsorbance260And280: [Float]
  dNAVolumeMicroliters: [Float]
  earLengthMillimeters: [Float]
  embryoCount: [Float]
  follicleDiameterMillimeters: [Float]
  footLengthMillimeters: [Float]
  forearmMillimeters: [Float]
  gonadMillimeters: [Float]
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  tailCentimeters: [Float]
  tailMillimeters: [Float]
  tarsusLengthMillimeters: [Float]
  totalLengthCentimeters: [Float]
  totalLengthMillimeters: [Float]
  type: String
  uterineScarCount: [Float]
  weightGrams: [Float]
  weightKilograms: [Float]
  wingMaxMillimeters: [Float]
  wingMillimeters: [Float]
  wingMinMillimeters: [Float]
}

input TypeSpecimenInput {
  context: String
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions
  type: String

  # Author of the type species
  typeAuthor: String

  # Publication reference for original description or basionyme
  typeBasionymePubl: String

  # Additional information on the type
  typeNotes: String

  # Publication reference for type publication
  typePubl: String

  # ID for the type series, if part of one
  typeSeriesID: String

  # Name of the type species
  typeSpecies: String

  # Is this holotype, paratype, syntype etc...
  typeStatus: TypeStatus

  # Name of the type subspecies
  typeSubspecies: String

  # Author of the type subspecies
  typeSubspeciesAuthor: String

  # Verification whether this really is a type?
  typeVerification: TypeVerification

  # Name of the person who chose the type, preferably in the format "Lastname, firstname"
  typif: String

  # Date when the specimen was chosen as a type
  typifDate: String
}

input UnitFactInput {
  adultIndividualCount: Int
  autocompleteSelectedTaxonID: String
  context: String
  glowWormMicrohabitat: GlowWormMicrohabitat
  id: String
  individualCountBiotopeA: Int
  individualCountBiotopeB: Int
  individualCountBiotopeC: Int
  individualCountBiotopeD: Int
  individualCountBiotopeE: Int
  individualCountBiotopeF: Int
  individualCountBiotopeG: Int
  individualCountBiotopeH: Int
  individualCountFlock: Int
  individualCountInner: Int
  individualCountOuter: Int
  juvenileIndividualCount: Int
  lineTransectObsType: LineTransectObsType
  lineTransectRouteFieldType: LineTransectRouteFieldType
  lolifeDroppingsCount: LolifeDroppingsCount
  lolifeDroppingsQuality: LolifeDroppingsQuality
  lolifeDroppingsType: LolifeDroppingsType
  lolifeNestTree: LolifeNestTree
  pairCountInner: Int
  pairCountOuter: Int
  pointCountFlock: String
  runningWaterInVicinity: Boolean
  type: String
  waterbirdFemale: WaterbirdFemale
  waterbirdJuvenileAgeClass: WaterbirdJuvenileAgeClass
  waterbirdJuvenileCountAccurate: Boolean
  waterbirdObserverOpinionSelectedCensus: Boolean
  waterbirdPairCountOpinionReasoning: WaterbirdPairCountOpinionReasoning
}

input UnitGatheringInput {
  context: String
  dateBegin: String
  dateEnd: String
  geometry: JSON

  # Informal description of the habitat.
  habitatDescription: String
  habitatIUCN: String
  id: String

  # Type of substrate or name of substrate species.
  substrate: String
  type: String
}

input DownloadRequest2Input {
  apiKeyExpires: String
  approximateResultSize: Int!
  collectionId: [String]
  completed: Boolean!
  context: String
  created: String
  createdFile: String
  createdFileSize: String
  dataUsePurpose: String
  downloadFormat: String
  downloadInclude: [String]
  downloadType: String!
  downloaded: [String]
  email: String
  failed: Boolean
  failureReason: String
  filter: [String]!
  id: String
  locale: String
  person: String
  requested: String!
  source: String!
  type: String
  warehouse: String!
}

input Endangerment2Input {
  context: String
  endangerment: Endangerment3!
  herboSortOrder: Int
  id: String
  sortOrder: Int
  type: String
}

input Event3Input {
  agent: String

  # Enter the amount in the branch as n, addition to the previously given amount as +n or reduction as -n
  amount: String
  amountEstimationUnit: String

  # ID for the accossiated branch
  branchID: String!
  context: String
  date: String
  eRH: String
  estimatedSeedQuantity: Int
  eventType: EventType!
  germinationConditions: String
  germinationPercentage: Int
  germinationRate: Float
  id: String
  lifeStage: LifeStage2
  notes: String
  numberOfSeedsEmpty: Int
  numberOfSeedsFull: Int
  numberOfSeedsInfested: Int
  numberOfSeedsMouldy: Int
  numberOfSeedsPartFull: Int
  numberOfSeedsTested: Int
  percentageSeedsFull: Int
  seedsExchangedInstitution: String
  testPassed: Boolean
  type: String
  viabilityPercentage: Int
}

input Field2Input {
  context: String
  fields: [Field2Input]
  filters: JSON
  id: String
  label: String
  name: String
  notices: JSON
  options: JSON
  required: Boolean
  type: String
  ui: JSON
  validators: JSON
  value: String
  warnings: JSON
}

input Fieldset2Input {
  context: String
  id: String
  type: String
}

input Form2Input {
  baseFormID: String
  category: Category

  # Id for the collection to where observation useing this form are connected
  collectionID: String

  # The schema context of the form (e.g. MY.document, MNP.namedPlace...)
  context: String
  description: String
  fields: [Field2Input]

  # Use fields, uiSchema and translations from the form
  fieldsFormID: String
  id: String
  language: Language
  logo: String
  name: String
  options: FormOptionsInput
  patch: [JSON]
  shortDescription: String

  # Shown at sidebar and & as browser title
  shortTitle: String
  supportedLanguage: [SupportedLanguageListItem]
  title: String
  translations: JSON
  type: String
  uiSchema: JSON
}

input FormOptionsInput {
  about: MultiLangInput

  # Form admin can lock documents. Locked documents can't be edited
  adminLockable: Boolean

  # Allows usage in spreadsheet upload component
  allowExcel: Boolean

  # Allows creating templates from documents
  allowTemplate: Boolean

  # Label for the cancel button at the form footer
  cancelLabel: String
  context: String

  # Has dataset about page
  dataset: Boolean

  # Theme form introduction page doesn't show description for the form permission request button
  disableRequestDescription: Boolean

  # Prevent sending documents & named places
  disabled: Boolean

  # Only if has named places. All documents for admin
  displayOwnSubmissions: Boolean

  # The users can see all the documents with the form's collection ID instead of just their own
  documentsViewableForAll: Boolean

  # Label for the draft button at the form footer
  draftLabel: String
  editLabel: String

  # Units without count aren't considered in laji.fi viewer (including document viewers and datatables)
  emptyOnNoCount: Boolean

  # Excludes from the Vihko excel tools
  excludeFromGlobalExcel: Boolean
  footer: FormFooterInput

  # Label for the own submissions list at the header of document form
  formOwnSubmissionsLabel: String

  # Shown at form permission intro page. Allows HTML
  formPermissionDescription: String
  forms: [String]

  # The form has administrators. Administrators can handle user access permissions and admin roles for all forms with the collectionID of the form.
  hasAdmins: Boolean

  # Hides the cancel button at form footer
  hideCancelButton: Boolean
  hideDraftButton: Boolean

  # Hides the save/edit button at form footer
  hideSaveButton: Boolean

  # Terms of Service is hidden at the header of observation form
  hideTES: Boolean

  # Hides the draft button at form footer
  hideTempButton: Boolean
  id: String
  instructions: MultiLangInput

  # Form UI has a greeting page for convenient mobile usage
  mobile: Boolean
  namedPlaceOptions: FormNamedPlaceOptionsInput

  # The title label for theme form sidebar
  navigationTitle: String

  # Available actions for own submissions (only on the own submissions page). Defaults to ['edit', 'view', 'download', 'stats', 'delete']
  ownSubmissionsActions: [String]

  # Shown at sidebar link and title of all submissions page
  ownSubmissionsAdminTitle: String

  # Columns for own submissions (only on the own submissions page). Defaults to ['dateEdited', 'dateObserved', 'taxon', 'namedPlaceName', 'observer', 'id']
  ownSubmissionsColumns: [String]

  # Shown at sidebar link and title of all submissions page
  ownSubmissionsTitle: String

  # Periods that the "NoExistingGatheringsInNamedPlace" validation uses
  periods: [String]
  prepopulateWithInformalTaxonGroups: [String]
  prepopulateWithTaxonSets: String
  prepopulatedDocument: Document2Input
  printType: PrintType

  # Users need to have permission to access the form
  restrictAccess: RestrictAccess
  resultServiceType: ResultServiceType

  # Message shown when document save failed
  saveErrorMessage: String

  # Label for the save button at the form footer
  saveLabel: String

  # Message shown when document was successfully saved
  saveSuccessMessage: String

  # Message shown when document draft was successfully saved
  saveTempSuccessMessage: String
  season: FormSeasonInput

  # Makes the documents reported with the form secondary
  secondaryCopy: Boolean

  # Overrides MHL.shortTitle usage
  shortTitleFromCollectionName: Boolean

  # Sub forms are shown only if they have this property
  sidebarFormLabel: String

  # Has only a form page, no sidebar
  simple: Boolean

  # Documents can't have data not defined in form fields. Defaults to true.
  strict: Boolean

  # Label for the draft button at the form footer
  tempLabel: String
  type: String

  # Makes the form use named places
  useNamedPlaces: Boolean

  # Uses schema comments as form help texts
  useSchemaCommentsAsHelpTexts: Boolean
  viewerType: ViewerType
  warnEditingOldDocument: Boolean

  # Duration in ISO 8601 duration format. Defaults to P1W (one week)
  warnEditingOldDocumentDuration: Boolean
}

input FormFooterInput {
  context: String

  # Text to show for footer
  footerDescription: String

  # Key is an image URI, value is the URI of the page clicking the image opens
  footerLogos: JSON
  id: String
  type: String
}

input FormNamedPlaceOptionsInput {
  # Named place viewer shows button to copy the URL for the named place viewer
  adminShowCopyLink: Boolean

  # Form users can create new named places for the form
  allowAddingPublic: Boolean

  # Help text for bird association filter
  birdAssociationAreaHelp: String

  # Description shown at named place choose page. Allows HTML.
  chooseDescription: String
  context: String

  # The latest document is copied to named place's prepopulatedDocument. if documents date is same or after the current prepopulated document's date, or if prepopulated document doesn't have date. Date is checked from gatheringEvent or from gatherings
  copyLatestDocumentToNamedPlace: Boolean

  # Description shown above named place form when creating new named place. Allows HTML.
  createDescription: String

  # Label for new named place creation button at named place choose page
  createNewButtonLabel: String

  # Label for text before new named place creation button at named place choose page
  createNewButtonPrependingTextLabel: String

  # Theme own submissions page uses local document viewer (that shows more accurate data)
  documentListUseLocalDocumentViewer: Boolean

  # Forces local document viewer to show these fields
  documentViewerForcedFields: [String]

  # The path of geometry that document viewer should show
  documentViewerGatheringGeometryJSONPath: [String]

  # Document viewer zooms to data instead of locked zoom level
  documentViewerZoomToData: Boolean

  # Admin label for named place viewer's document list
  earlierLabel: String

  # Description shown at top of page when editing named place
  editDescription: String

  # The named place UI allows filtering by bird association area
  filterByBirdAssociationArea: Boolean

  # The named place UI allows filtering by municipality
  filterByMunicipality: Boolean

  # The named place UI allows filtering by tags
  filterByTags: Boolean

  # When recording a document for a named place, the named place's data of these fields will be shown at the top of the page (defaults to ["alternativeIDs", "name", "municipality"]
  headerFields: [String]

  # On named place chooser view, map tab is hidden
  hideMapTab: Boolean
  id: String

  # Named places will be fetched with units included (hard coded to work only for HR.2049)
  includeUnits: Boolean

  # Fields that named place viewer shows (if not defined will be digged from uiSchema["ui:options"].fieldsScopes[form collectionID])
  infoFields: [String]

  # Label for named place viewer last census
  lastCensusLabel: String

  # Overrides labels for named place list column headers
  listColumnNameMapping: JSON

  # List of columns visible in the list view
  listColumns: [String]
  listColumnsMultisort: Boolean

  # Label for named place chooser list tab
  listLabel: String
  mapCluster: Boolean

  # Overlays that named place chooser map should show
  mapOverlayNames: [String]

  # Tilelayer name that named place chooser map should show
  mapTileLayerName: String

  # User label for named place viewer's document list
  myEarlierLabel: String

  # Form ID of named place form (defaults to MHL.36)
  namedPlaceFormID: String

  # Fields that named places list shows.
  namedPlaceList: [String]

  # When a new named place is created, the prepopulatedDocument will be populated according to this.
  prepopulatedDocumentFields: JSON

  # Label for print button of named place viewer
  printLabel: String
  releaseLabel: String
  reservableLabel: String

  # Places are reservable if defined. Value defines when the reservation should expire in ISO-8601. Example: ${year}-10-12
  reservationUntil: String
  reservedLabel: String

  # Named place list shows legend for the row colors
  showLegendList: Boolean

  # Named place chooser view starts with map tab instead of list
  startWithMap: Boolean
  type: String

  # Instead of populating observation form with prepopulatedDocument, it is populated with acceptedDocument. Admin can change the acceptedDocument from observation list
  useAcceptedDocument: Boolean

  # Named place viewer label for button for recording new observation
  useLabel: String

  # Named place chooser map is initialized with data fitted in view.
  zoomToData: Boolean
}

input FormSeasonInput {
  context: String

  # End of season
  end: String
  id: String

  # Start of season
  start: String
  type: String
}

input FormInstructions2Input {
  context: String
  id: String
  type: String
}

input FormPermission2Input {
  admins: [String]
  collectionID: String!
  context: String
  editors: [String]
  id: String
  permissionRequests: [String]
  type: String
}

input FormPermissionPerson2Input {
  admins: [String]
  context: String
  editors: [String]
  id: String
  permissionRequests: [String]
  personID: String!
  type: String
}

input FormPermissionSingle2Input {
  collectionID: String!
  context: String
  id: String
  type: TypeOfThePermission
  userID: String
}

input Habitat3Input {
  context: String
  habitat: ElinympRist!
  habitatSpecificType: [HabitatSpecificTypeListItem]
  herboSortOrder: Int
  id: String
  sortOrder: Int
  type: String
}

input Image2Input {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  fullURL: String!
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]
  largeURL: String!

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  originalFilename: String
  originalURL: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  squareThumbnailURL: String!
  taxonDescriptionCaption: MultiLangInput
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
}

input Individual2Input {
  context: String
  dcBibliographicCitation: MultiLangInput
  deleted: Boolean
  description: MultiLangInput
  descriptionURL: MultiLangInput
  hasPublicLocations: Boolean
  id: String
  images: [String]
  intellectualRights: IntellectualRights!
  nickname: String
  ownerPerson: [String]
  ringID: String
  taxon: String
  type: String
}

input InformalTaxonGroup2Input {
  context: String

  # If this is true, the group is considered a root even if it has parents. For example Fishes is part of Water animals but still is wanted to be a root by itself.
  explicitlyDefinedRoot: Boolean
  hasSubGroup: [String]
  id: String
  name: MultiLangInput!
  type: String
}

input InformationSystem2Input {
  allowedDatawarehouseOverridingSourceId: [String]
  context: String
  description: MultiLangInput!
  documentation: String!
  id: String
  isAllowedToQueryPrivateWarehouse: Boolean
  isWarehouseSource: Boolean
  lajiAuthLoginRedirectURI: String
  maintainingOrganization: String!
  name: MultiLangInput!
  personResponsible: String!
  publicity: Publicity!
  state: State!
  transactionApiURL: String!
  type: Type2!
  uRI: String!
}

input IucnRedListEvaluation2Input {
  actionNotes: String
  borderGain: Boolean
  borderGainNotes: String
  context: String
  countOfOccurrencesMax: String
  countOfOccurrencesMin: String
  countOfOccurrencesNotes: String

  # <p> <b>A1</b>	Havaittu, arvioitu, päätelty tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 90 %:lla, erittäin uhanalaisilla vähintään 70 %:lla ja vaarantuneilla vähintään 50 %:lla viimeisten kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso) tilanteessa, jossa pienenemisen syyt ovat selvästi peruttavissa JA tunnettuja JA loppuneita, perustuen johonkin seuraavista vaihtoehdoista: </p> <ul><li><b>(a)</b> suora havainto</li> <li><b>(b)</b> taksonille käyttökelpoinen runsausindeksi</li> <li><b>(c)</b> esiintymisalueen tai levinneisyysalueen pieneneminen ja/tai elinympäristön laadun huonontuminen</li> <li><b>(d)</b> todellinen tai mahdollinen hyödyntäminen</li> <li><b>(e)</b> vieraiden taksonien, risteytymisen, tautien, saasteiden, kilpailijoiden tai loisten haitalliset vaikutukset.</li></ul> <p> <b>A2</b>	Havaittu, arvioitu, päätelty tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 80 %:lla, erittäin uhanalaisilla vähintään 50 %:lla ja vaarantuneilla vähintään 30 %:lla viimeisten kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso) tilanteessa, jossa pieneneminen ja sen syyt eivät ehkä ole loppuneet TAI niitä ei tunneta TAI ne eivät ehkä ole peruttavissa, perustuen yllä oleviin vaihtoehtoihin <b>(a)–(e)</b>. </p> <p> <b>A3</b>	Äärimmäisen uhanalaisilla vähintään 80 %, erittäin uhanalaisilla vähintään 50 % ja vaarantuneilla vähintään 30 % populaation pieneneminen, jonka ennustetaan tai epäillään tapahtuvan tulevien kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso, korkeintaan 100 vuotta), perustuen yllä oleviin vaihtoehtoihin <b>(b)–(e)</b>. </p> <p> <b>A4</b>	Havaittu, arvioitu, päätelty, ennustettu tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 80 %:lla, erittäin uhanalaisilla vähintään 50 %:lla ja vaarantuneilla vähintään 30 %:lla kymmenen vuoden tai kolmen sukupolven ajanjaksolla (valitaan pitempi; tulevaisuuteen maksimi 100 vuotta), johon sisältyy sekä mennyttä että tulevaa, ja pieneneminen ja sen syyt eivät ole loppuneet TAI niitä ei tunneta TAI ne eivät ehkä ole peruttavissa, perustuen yllä oleviin vaihtoehtoihin <b>(a)–(e)</b>. </p>
  criteriaA: String
  criteriaANotes: String

  # <p> Maantieteellinen alue tarkasteltuna joko
  # levinneisyysalueen (B1) tai esiintymisalueen (B2) tai
  # molempien mukaan.</p>
  #
  # <p>
  # <b>B1</b>	Levinneisyysalueen arvioidaan olevan äärimmäisen
  # uhanalaisilla alle 100 km², erittäin uhanalaisilla alle 5 000
  # km², vaarantuneilla alle 20 000 km² ja vähintään kaksi kohdista
  # a–c täyttyy:
  # </p>
  # <p>
  # <b>B1a.</b> esiintyminen on voimakkaasti pirstoutunut TAI äärimmäisen 
  # uhanalaisilla vain yksi tai erittäin uhanalaisilla enintään viisi tai 
  # vaarantuneilla enintään kymmenen esiintymispaikkaa tunnetaan
  # </p>
  # <p>
  # <b>B1b.</b> havaittu, päätelty tai ennustettu jatkuva väheneminen
  # joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> soveliaan elinympäristön määrä ja/tai
  # laatu</li>
  # <li><b>(iv)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(v)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  #
  # <p>
  # <b>B1c.</b> erittäin suuret vaihtelut joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(iv)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  #
  #
  # <p>
  # <b>B2</b>	Esiintymisalueen arvioidaan olevan äärimmäisen
  # uhanalaisilla alle 10 km², erittäin uhanalaisilla alle 500 km²,
  # vaarantuneilla alle 2 000 km² ja vähintään kaksi kohdista
  # a–c täyttyy:
  # </p>
  # <p>
  # <b>B2a.</b> esiintyminen on voimakkaasti pirstoutunut TAI äärimmäisen 
  # uhanalaisilla vain yksi tai erittäin uhanalaisilla enintään viisi tai 
  # vaarantuneilla enintään kymmenen esiintymispaikkaa tunnetaan
  # </p>
  # <p>
  # <b>B2b.</b> havaittu, päätelty tai ennustettu jatkuva väheneminen
  # joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> soveliaan elinympäristön määrä ja/tai laatu</li>
  # <li><b>(iv)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(v)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  #
  # <p>
  # <b>B2c.</b> erittäin suuret vaihtelut joissakin seuraavista:
  # </p>
  # <ul><li><b>(i)</b> levinneisyysalue</li>
  # <li><b>(ii)</b> esiintymisalue</li>
  # <li><b>(iii)</b> esiintymien tai osapopulaatioiden määrä</li>
  # <li><b>(iv)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>
  criteriaB: String
  criteriaBNotes: String

  # <p>Pieni ja jatkuvasti taantuva populaatio	Populaatio on arvioitu pienemmäksi kuin äärimmäisen
  # uhanalaisilla 250, erittäin uhanalaisilla 2 500 ja vaarantuneilla
  # 10 000 lisääntymiskykyistä yksilöä sekä jompikumpi
  # seuraavista:</p>
  #
  # <p>
  # <b>C1</b>	Äärimmäisen uhanalaisilla vähintään 25 %:n jatkuva
  # väheneminen kolmen vuoden tai yhden sukupolven aikana
  # (valitaan pitempi jakso, tulevaisuuteen korkeintaan
  # 100 vuotta), erittäin uhanalaisilla vähintään 20 %:n jatkuva
  # väheneminen viiden vuoden tai kahden sukupolven aikana
  # (valitaan pitempi jakso, tulevaisuuteen korkeintaan
  # 100 vuotta) ja vaarantuneilla vähintään 10 %:n jatkuva
  # väheneminen kymmenen vuoden tai kolmen sukupolven
  # aikana (valitaan pitempi jakso, tulevaisuuteen korkeintaan
  # 100 vuotta)
  # </p>
  #
  # <p>
  # <b>C2</b>	Havaittu, ennustettu tai päätelty lisääntymiskykyisten
  # yksilöiden määrän jatkuva väheneminen JA vähintään
  # toinen seuraavista (a–b):
  # </p>
  # <p>
  # <b>C2a.</b> populaation rakenne joko:
  # </p>
  # <ul><li>
  # <b>(i)</b> missään osapopulaatiossa ei ole äärimmäisen
  # uhanalaisilla yli 50, erittäin uhanalaisilla yli
  # 250 ja vaarantuneilla yli 1 000 lisääntymiskykyistä
  # yksilöä</li>
  # <li>
  # <b>(ii)</b> äärimmäisen uhanalaisilla vähintään 90 % ja
  # erittäin uhanalaisilla vähintään 95 % lisääntymiskykyisistä
  # yksilöistä sekä vaarantuneilla
  # kaikki yksilöt ovat yhdessä osapopulaatiossab. erittäin suuret vaihtelut lisääntymiskykyisten
  # yksilöiden määrässä
  # </li></ul>
  #
  # <p>
  # <b>C2b.</b> erittäin suuret vaihtelut lisääntymiskykyisten
  # yksilöiden määrässä
  # </p>
  criteriaC: String
  criteriaCNotes: String

  # <p>Populaation arvioitu koko on äärimmäisen uhanalaisilla
  # alle 50 ja erittäin uhanalaisilla alle 250 lisääntymiskykyistä
  # yksilöä. Vaarantuneilla populaatio on hyvin pieni tai
  # rajoittunut jommankumman vaihtoehdon mukaan:</p>
  # <p>
  # <b>D1</b>	Arvioitu populaatiokoko on alle 1 000 lisääntymiskykyistä
  # yksilöä.
  # </p>
  #
  # <p>
  # <b>D2</b>	Populaatiolla on hyvin rajoittunut esiintymisalue
  # (yleensä alle 20 km²) tai vähän esiintymispaikkoja (yleensä
  # korkeintaan viisi), ja populaatio on siten altis äkillisille
  # ja ennustamattomille ihmistoiminnan tai sattuman vaikutuksille
  # ja voi lyhyessä ajassa muuttua äärimmäisen
  # uhanalaiseksi tai jopa hävitä.
  # </p>
  criteriaD: String
  criteriaDNotes: String

  # <p>Kvantitatiivisen analyysin perusteella todennäköisyys
  # hävitä luonnosta on äärimmäisen uhanalaisilla vähintään
  # 50 % kymmenen vuoden tai kolmen sukupolven aikana
  # (valitaan pitempi, korkeintaan 100 vuotta), erittäin
  # uhanalaisilla vähintään 20 % kahdenkymmenen vuoden
  # tai viiden sukupolven aikana (valitaan pitempi, korkeintaan
  # 100 vuotta) ja vaarantuneilla vähintään 10 % sadan
  # vuoden aikana.Kvantitatiivisen analyysin perusteella todennäköisyys
  # hävitä luonnosta on äärimmäisen uhanalaisilla vähintään
  # 50 % kymmenen vuoden tai kolmen sukupolven aikana
  # (valitaan pitempi, korkeintaan 100 vuotta), erittäin
  # uhanalaisilla vähintään 20 % kahdenkymmenen vuoden
  # tai viiden sukupolven aikana (valitaan pitempi, korkeintaan
  # 100 vuotta) ja vaarantuneilla vähintään 10 % sadan
  # vuoden aikana.
  # </p>
  criteriaE: String
  criteriaENotes: String
  criteriaForStatus: String
  criteriaForStatusNotes: String
  criteriaNotes: String

  # <ul> <li><b>1. Tuntematon alkuperä.</b> Taksoni tunnetaan vain yhdestä tai muutamasta yksilöstä/ näyteestä, joiden löytöpaikkaa ei tunneta tai paikkatiedot ovat hyvin epätarkat, joten taksonin tilaa ei voida päätellä. </li><li><b>2. Taksonominen epävarmuus.</b> Tietojen vähäisyys voi olla seurausta taksonomisesta epävarmuudesta eli levinneisyydestä, ekologiasta, tilasta, ja uhkista on vähän tietoa, koska vähäinen näytteiden ja/ tai havaintojenmäärä johtuu siitä että taksonia edustaa poikkeava yksilö, hybridi, harvinainen värimuoto tai muun lajin alalajia. Se voi selittää tiedon puutetta yhtä todennäköisesti tai todennäköisemmin kuin se, että taksoni on aidosti harvinainen, uhanalainen tai riittämättömästi etsitty. Tästä on kuitenkin erotettava ne taksonit, joiden taksonomiassa/ taksonomisessa asemassa on jotain epäselvää: ne on joko arvioitava normaalisti tai jätettävä arvioinnin ulkopuolelle (NE) ja tästä arviointilistalle mukaan ottamisesta on päätettävä arvioinnin vaiheessa 1 (luku 2). </li><li><b>3. Puutteelliset tiedot.</b> Tiedot ovat riittämättömät arviointikriteerien soveltamiseksi eli kaikki muut syyt tietojen vähäisyyteen. </li></ul>
  ddReason: DdReason
  ddReasonNotes: String
  decreaseDuringPeriod: String
  decreaseDuringPeriodNotes: String
  distributionAreaMax: String

  # Merkitäksesi "enintään" jätä alaraja tyhjäksi. Merkitäksesi "vähintään" jätä yläraja tyhjäksi.
  distributionAreaMin: String
  distributionAreaNotes: String
  editNotes: String
  endangermentReasonNotes: String
  evaluatedTaxon: String!

  # <p>Tarkastelujakso = 3 x sukupolven pituus A-kriteerissä. Minimi 10 vuotta lyhytikäisillä lajeilla, maksimi 100 vuotta pitkäikäisillä lajeilla.</p>
  # <p>C-kriteerissä tarkastelujakson pituus vaihtelee luokasta riippuen 1-3 sukupolvea tai 3,5, tai 10 v.</p>
  # <p>Kenttä on tarkoitettu ensisijaisesti A-kriteeriä varten. Jos on samaan aikaan käytössä myös C-kriteeri, merkitse siihen liittyvä jakson pituus kommenttikenttään.</p>
  evaluationPeriodLength: String
  evaluationPeriodLengthNotes: String
  evaluationYear: String!

  # <p>Arvioinnin viimeisessä vaiheessa otetaan huomioon Suomen ulkopuolella olevien populaatioiden mahdollinen vaikutus arvioitavaan Suomen populaatioon. Tarvittaessa alennetaan tai korotetaan luokkaa sen perusteella. Luokkaa alennetaan, jos ulkopuolelta saatava täydennys voi vähentää lajin häviämisriskiä. Alennettu tai korotettu luokka on lajin lopullinen uhanalaisuusluokka. </p>
  #
  # <p>Luokka-kenttään asetetaan alennuksen tai korotuksen aiheuttama lopputulos. Tähän kenttään asetetaan tieto tehdystä alennuksesta tai korotuksesta.</p>
  externalPopulationImpactOnRedListStatus: ExternalPopulationImpactOnRedListStatus
  externalPopulationImpactOnRedListStatusNotes: String

  # <p>Onko populaatio voimakkaasti pirstoutunut? = enemmän kuin puolet yksilöistä (tai enemmän kuin puolet asutusta elinympäristöstä) on pienissä eristyneissä laikuissa, jotka ovat </p> <li>liian pieniä ylläpitämään elinvoimaista populaatiota ja</li> <li>kaukana muista elinympäristölaikuista suhteessa lajin leviämiskykyyn.</li>
  fragmentedHabitats: Boolean
  fragmentedHabitatsNotes: String

  # Vuosissa. (Ks. IUCN-ohje, viimeksi syntyneiden yksilöiden vanhempien keskim. ikä)
  generationAge: Float
  generationAgeNotes: String
  groundsForEvaluationNotes: String
  habitatGeneralNotes: String
  habitatNotes: String

  # <ul> <li><b>P - Pyynti:</b> metsästys, kalastus ja laiton tappaminen, myös esimerkiksi muiden eläinten jääminen kalanpyydyksiin</li> <li><b>Ke - Keräily ja poiminta</b>, myös siirto puutarhaan</li> <li><b>H - Häirintä ja liikenne</b></li> <li><b>Ku - Kuluminen:</b> maa - ja kallioperän kuluminen, esimerkiksi tallaamisen, maastoajon, kalliokiipeilyn tai ylilaidunnuksen vuoksi</li> <li><b>R - Rakentaminen (maalla):</b> asutukseen, elinkeinoihin, liikenteeseen ja virkistyskäyttöön liittyvä rakentaminen tierakentaminen, rakentamiseen liittyvät maansiirrot ja läjitykset</li> <li><b>Ks - Kaivannaistoiminta:</b> maa - aineksen ja kalliokiviaineksen otto, kaivostoiminta</li> <li><b>Pm - Peltomaiden muutokset:</b> salaojitus, viljelytapojen muutokset, karjanhoidon muutokset (ei laidunten sulkeutuminen), koneiden käyttö ja viljeltävien lajien vaihdot (ei torjunta - aineet)</li> <li><b>Pr - Pellonraivaus:</b> metsien, soiden ja niittyjen muuttaminen pelloiksi</li> <li><b>N - Avoimien alueiden sulkeutuminen:</b> mm. niitty - ja hakamaiden sekä metsälaidunten sulkeutuminen laidunnuksen ja niiton loputtua, sorakuoppien ja muiden avointen kenttien metsittäminen ja umpeenkasvu</li> <li><b>M - Metsien uudistamis - ja hoitotoimet:</b> toimet, jotka eivät sisälly seuraaviin uhkatekijöihin, esim. maaperän muokkaus. Uhanalaisuuden syynä metsien käyttö. Tarkennetaan työdokumentoinnissa</li> <li><b>Mp - Metsien puulajisuhteiden muutokset:</b> mm. lehtipuiden väheneminen ja lehtojen kuusettuminen</li> <li><b>Mv - Vanhojen metsien väheneminen:</b> vanhojen metsien ja kookkaiden puiden väheneminen</li> <li><b>Mk - Kuloalueiden väheneminen:</b> Kuloalueiden ja muiden luontaisen sukkession alkuvaiheiden väheneminen</li> <li><b>Ml - Lahopuun väheneminen:</b> lahoavan puuaineksen, kuolleiden tai kuolevien puiden sekä oksien, lahoja kolopuiden väheneminen</li> <li><b>O - Ojitus ja turpeenotto</b>, (ei purojen perkaukset): myös kunnostusojitus ja aikaisemmin tehdyn ojituksen myöhäisemmät vaikutukset</li> <li><b>Vr - Vesirakentaminen:</b> voimalaitokset, saha - ja myllypadot, vesien säännöstely, ruoppaukset ja perkaukset (myös purojen), rantavyöhykkeen rakenteellinen muuttaminen (esim. pengerrykset), järvien laskut, tekoaltaiden rakentaminen, pohjaveden otto ja lähteiden hyödyntäminen, mm. pohjaveden pinnan laskun aiheuttamat muutokset</li> <li><b>Kh - Kemialliset haittavaikutukset:</b> ympäristömyrkyt, torjunta - aineet, ilman ja vesien saasteet, öljyvahingot sekä rehevöittävä laskeuma</li> <li><b>I - Ilmastonmuutos:</b> ennustettu ilmaston lämpeneminen, sademäärien lisääntyminen ja äärimmäisten sääilmiöiden yleistyminen seuraavien 20–30 vuoden aikana (käytetään vain, kun on erityisiä perusteita ko. lajiin kohdistuville vaikutuksille)</li> <li><b>S - Satunnaistekijät:</b> satunnaistekijöiden aiheuttama uhka kun kanta tai esiintymisalue on hyvin pieni, myös lyhytaikaiset ilmastonmuutokset</li> <li><b>Kil - Kilpailu:</b> muiden lajien aiheuttama kilpailu</li> <li><b>Ris - Risteytyminen:</b> muiden lajien aiheuttama risteytyminen</li> <li><b>Kv - Suuret kannan vaihtelut</b></li> <li><b>U - Muutokset Suomen ulkopuolella:</b> esim. elinympäristöjen muutokset lintujen talvehtimisalueilla tai muuton aikaisilla levähdysalueilla, ulkomailla tapahtuva pyynti/metsästys</li> <li><b>Vie - Vieraiden lajien aiheuttamat uhat</b>: kilpailu, risteytyminen, taudit, ekosysteemimuutokset</li> <li><b>Muu - Muu tunnettu syy:</b> määriteltyihin uhkatekijöihin sisältymätön tunnettu syy, tarkennetaan työdokumentoinnissa</li> <li><b>? - Syy tuntematon</b></li> </ul>
  hasEndangermentReason: [String]
  hasOccurrence: [String]

  # <ul> <li><b>P - Pyynti:</b> metsästys, kalastus ja laiton tappaminen, myös esimerkiksi muiden eläinten jääminen kalanpyydyksiin</li> <li><b>Ke - Keräily ja poiminta</b>, myös siirto puutarhaan</li> <li><b>H - Häirintä ja liikenne</b></li> <li><b>Ku - Kuluminen:</b> maa - ja kallioperän kuluminen, esimerkiksi tallaamisen, maastoajon, kalliokiipeilyn tai ylilaidunnuksen vuoksi</li> <li><b>R - Rakentaminen (maalla):</b> asutukseen, elinkeinoihin, liikenteeseen ja virkistyskäyttöön liittyvä rakentaminen tierakentaminen, rakentamiseen liittyvät maansiirrot ja läjitykset</li> <li><b>Ks - Kaivannaistoiminta:</b> maa - aineksen ja kalliokiviaineksen otto, kaivostoiminta</li> <li><b>Pm - Peltomaiden muutokset:</b> salaojitus, viljelytapojen muutokset, karjanhoidon muutokset (ei laidunten sulkeutuminen), koneiden käyttö ja viljeltävien lajien vaihdot (ei torjunta - aineet)</li> <li><b>Pr - Pellonraivaus:</b> metsien, soiden ja niittyjen muuttaminen pelloiksi</li> <li><b>N - Avoimien alueiden sulkeutuminen:</b> mm. niitty - ja hakamaiden sekä metsälaidunten sulkeutuminen laidunnuksen ja niiton loputtua, sorakuoppien ja muiden avointen kenttien metsittäminen ja umpeenkasvu</li> <li><b>M - Metsien uudistamis - ja hoitotoimet:</b> toimet, jotka eivät sisälly seuraaviin uhkatekijöihin, esim. maaperän muokkaus. Uhanalaisuuden syynä metsien käyttö. Tarkennetaan työdokumentoinnissa</li> <li><b>Mp - Metsien puulajisuhteiden muutokset:</b> mm. lehtipuiden väheneminen ja lehtojen kuusettuminen</li> <li><b>Mv - Vanhojen metsien väheneminen:</b> vanhojen metsien ja kookkaiden puiden väheneminen</li> <li><b>Mk - Kuloalueiden väheneminen:</b> Kuloalueiden ja muiden luontaisen sukkession alkuvaiheiden väheneminen</li> <li><b>Ml - Lahopuun väheneminen:</b> lahoavan puuaineksen, kuolleiden tai kuolevien puiden sekä oksien, lahoja kolopuiden väheneminen</li> <li><b>O - Ojitus ja turpeenotto</b>, (ei purojen perkaukset): myös kunnostusojitus ja aikaisemmin tehdyn ojituksen myöhäisemmät vaikutukset</li> <li><b>Vr - Vesirakentaminen:</b> voimalaitokset, saha - ja myllypadot, vesien säännöstely, ruoppaukset ja perkaukset (myös purojen), rantavyöhykkeen rakenteellinen muuttaminen (esim. pengerrykset), järvien laskut, tekoaltaiden rakentaminen, pohjaveden otto ja lähteiden hyödyntäminen, mm. pohjaveden pinnan laskun aiheuttamat muutokset</li> <li><b>Kh - Kemialliset haittavaikutukset:</b> ympäristömyrkyt, torjunta - aineet, ilman ja vesien saasteet, öljyvahingot sekä rehevöittävä laskeuma</li> <li><b>I - Ilmastonmuutos:</b> ennustettu ilmaston lämpeneminen, sademäärien lisääntyminen ja äärimmäisten sääilmiöiden yleistyminen seuraavien 20–30 vuoden aikana (käytetään vain, kun on erityisiä perusteita ko. lajiin kohdistuville vaikutuksille)</li> <li><b>S - Satunnaistekijät:</b> satunnaistekijöiden aiheuttama uhka kun kanta tai esiintymisalue on hyvin pieni, myös lyhytaikaiset ilmastonmuutokset</li> <li><b>Kil - Kilpailu:</b> muiden lajien aiheuttama kilpailu</li> <li><b>Ris - Risteytyminen:</b> muiden lajien aiheuttama risteytyminen</li> <li><b>Kv - Suuret kannan vaihtelut</b></li> <li><b>U - Muutokset Suomen ulkopuolella:</b> esim. elinympäristöjen muutokset lintujen talvehtimisalueilla tai muuton aikaisilla levähdysalueilla, ulkomailla tapahtuva pyynti/metsästys</li> <li><b>Vie - Vieraiden lajien aiheuttamat uhat</b>: kilpailu, risteytyminen, taudit, ekosysteemimuutokset</li> <li><b>Muu - Muu tunnettu syy:</b> määriteltyihin uhkatekijöihin sisältymätön tunnettu syy, tarkennetaan työdokumentoinnissa</li> <li><b>? - Syy tuntematon</b></li> </ul>
  hasThreat: [String]
  id: String

  # Lisääntymiskykyisten yksilöiden määrä (ks. IUCN-ohje)
  individualCountMax: String

  # Lisääntymiskykyisten yksilöiden määrä (ks. IUCN-ohje). Merkitäksesi "enintään" jätä alaraja tyhjäksi. Merkitäksesi "vähintään" jätä yläraja tyhjäksi.
  individualCountMin: String
  individualCountNotes: String
  lastModified: String
  lastModifiedBy: String

  # Merkitään tiedot mahdollisesti hävinneiden tai hävinneiden lajien viimeisistä havainnosta.
  lastSightingNotes: String
  legacyPublications: String
  locked: Boolean
  lsaRecommendation: Boolean
  lsaRecommendationNotes: String
  occurrenceAreaMax: String

  # Merkitäksesi "enintään" jätä alaraja tyhjäksi. Merkitäksesi "vähintään" jätä yläraja tyhjäksi.
  occurrenceAreaMin: String
  occurrenceAreaNotes: String
  occurrenceNotes: String
  occurrenceRegionsNotes: String
  occurrenceRegionsPrivateNotes: String

  # <p>Suulliset tai kirjalliset tiedonannot, henkilökohtaiset tiedostot, muistiinpanot tai julkaisemattomat aineistot, verkkosivut, keskustelupalstat ja tyypillisesti yhtä lajia koskevat epävirallisemmat lähteet</p> <p><b>Viittausohjeita:</b></p> 			 <p>Meikäläinen Matti suullinen tiedonanto 2016</p> <p>Virtanen Terhi, julkaisematon selvitysaineisto Hollolasta 2015</p> <p>Heikkinen Heikki, havaintotiedonanto Nisäkäsharrastajien Nisäkäsverkko-sähköpostilista 3.5.2014 (http://www.myrsky.com/mammals/nisakasverkko.htm)</p> <p>Nämä vitteet tallentuvat vain lomakkelle, niistä ei synny julkaisua.</p>
  otherSources: String

  # Tyhjä = Tuntematon
  percentageOfGlobalPopulation: Float
  percentageOfGlobalPopulationNotes: String

  # Kenttä on tarkoitettu ensisijaisesti A-kriteeriä varten. Jos on samaan aikaan käytössä myös C-kriteerin eri pituinen tarkastelujakso, merkitse sen alun ja lopun populaatiokoko kommenttikenttään. Kommenttikentän käyttö koskee myös tilannetta, jossa on käytössä useita A:n alakriteereitä (A1-A4). Ensisijaisesti lomakkeelle merkitään lopulliseen uhanalaisuusluokkaan johtaneet tiedot.
  populationSizePeriodBeginning: String
  populationSizePeriodEnd: String
  populationSizePeriodNotes: String

  # Onko vaihtelun suuruusluokka vähintään 10-kertainen?
  populationVaries: Boolean
  populationVariesNotes: String
  possiblyRE: PossiblyRE
  possiblyRENotes: String

  # <p>Lisämerkinnät:</p>
  # <ul> 
  # <li><b>v - vanhat metsät</b> (myös yksittäiset vanhat puut ja runsaasti lahopuuta sisältävät nuoremmat metsät)</li>
  # <li><b>h - harjumetsät</b>, myös puoliavoimet</li>
  # <li><b>p - metsäpaloalueet</b> ja muut luontaisen sukkession alkuvaiheen metsät</li>
  # <li><b>j - jalopuuesiintymä</b></li>
  # <li><b>pa - paahteinen</b></li>
  # <li><b>va - varjoinen</b></li>
  # <li><b>ra - sijaitsee rannalla</b> (lajin esiintyminen on sidoksissa rannan läheisyyteen)</li>
  # <li><b>ka - karut kalliot ja kivikot</b></li>
  # <li><b>ke - keskiravinteiset kalliot ja kivikot</b></li>
  # <li><b>ca - kalkkivaikutteinen</b></li>
  # </ul>
  primaryHabitat: String

  # <p>Tieteelliset artikkelit, kirjat, julkaistut ja julkaisemattomat raportit, 
  # tietokannat, rekisterit, atlas-sivustot ym. vakiintuneet lähteet</p>
  # <p><b>Viittausohjeita:</b></p> 			<p><b>Julkaisu</b>: Huhtinen, S., Salo, P., Haikonen, V.& von Bonsdorff, T. 2010: Kotelosienet. - Teoksessa: Rassi, P., Hyvärinen, E., Juslén, A. & Mannerkoski I. (toim.), Suomen lajien uhanalaisuus, Punainen kirja 2010: 272-277. Ympäristöministeriö & Suomen ympäristökeskus, Helsinki. 685 s.</p> 			<p><b>Tietokanta</b>: Noyes, J. S. 2014: Universal Chalcidoidea Database. – World Wide Web electronic publication. Accessed at http//www.nhm.ac.uk/chalcidoids on 18 December 2014.</p>
  publication: [String]

  # <p><b>Aito muutos (uusi):</b> muutos johtuu aidosta muutoksesta, joka on tapahtunut edellisen arvioinnin jälkeen (populaation tila huonontunut/ parantunut tms.)</p>
  # <p><b>Aito muutos (ennen edellistä arviointia):</b> luokkaa käytetään taksoneihin, jotka arvioidaan vähintään kolmatta kertaa ja joista lasketaan uhanalaisuusindeksi (Red List Index). Muutos on tapahtunut ennen edellistä arviointia, mutta ensimmäisen jälkeen. Muutos on havaittu uuden tiedon perusteella ja mikäli se olisi ollut käytettävissä aiemmin, uusi luokka olisi annettu jo aiemmalla kerralla (aiemmilla kerroilla). Muutoksen ajankohta on dokumentoitava.</p>
  # <p><b>Kriteerien muutos:</b> kategorian muutos johtuu arviointikriteerien muutoksista.</p>
  # <p><b>Uusi tieto:</b> muutos johtuu siitä, että taksonin statuksesta on saatu uutta tietoa/tieto on lisääntynyt; esim. populaatio on osoittautunut aiempaa käsitystä suuremmaksi tai pienemmäksi.</p>
  # <p><b>Taksonominen muutos:</b> kategorian muutos johtuu taksonomisen aseman muuttumisesta; taksoni on vastikään jaettu kahtia (alalajista laji) tai yhdistetty toisen kanssa tai kuvattu uutena tieteelle tai taksoni ei ole enää validi (pidetään nykyisin hybridinä, varianttina tms.).</p>
  # <p><b>Virhe:</b> luokka on väärä, koska arvioinnissa on aiemmin tapahtunut virhe.</p>
  # <p><b>Virheellinen tieto:</b> aiempi luokka on valittu virheellisen tiedon vuoksi väärin (esim. määritysvirhe).</p>
  # <p><b>Muu syy:</b> muutos johtuu muusta syystä kuin aiemmista ja/tai vaatii lisäselvitystä (esimerkiksi arvioijien suhtautuminen epävarmuuteen muuttuu tai arvioinnin tulkintaohjeet ovat muuttuneet.</p>
  reasonForStatusChange: [ReasonForStatusChangeListItem]
  reasonForStatusChangeNotes: String

  # Tätä ei täytetä kuluvalle vuodelle. Muuttujaa käytetään ainoastaan tarvittaessa jälkikäteen uhanalaisuusindeksin laskemisessa. Jos tätä arviointia jälkikäteen halutaan korjata, arvioinnissa annettua luokkaa ei muuteta, vaan annetaan tässä korjattu luokka.
  redListIndexCorrection: RedListIndexCorrection
  redListIndexCorrectionNotes: String
  redListStatus: RedListStatus!
  redListStatusAccuracyNotes: String
  redListStatusMax: RedListStatusMax
  redListStatusMin: RedListStatusMin
  redListStatusNotes: String
  regionallyThreatenedNotes: String
  regionallyThreatenedPrivateNotes: String
  remarks: [String]
  secondaryHabitat: [String]
  state: State2!
  statusA: StatusA
  statusANotes: String
  statusB: StatusB
  statusBNotes: String
  statusC: StatusC
  statusCNotes: String
  statusD: StatusD
  statusDNotes: String
  statusE: StatusE
  statusENotes: String
  taxonomicNotes: String
  threatNotes: String
  type: String
  typeOfOccurrenceInFinland: TypeOfOccurrenceInFinland
  typeOfOccurrenceInFinlandNotes: String
}

input IucnRedListEvaluationYear2Input {
  context: String
  evaluationYear: String!
  id: String
  locked: Boolean
  type: String
}

input IucnRedListTaxonGroup2Input {
  context: String
  hasIucnSubGroup: [String]
  id: String
  includesInformalTaxonGroup: [String]
  includesTaxon: [String]
  name: MultiLangInput!
  type: String
}

input Model2Input {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  highDetailModelURL: String
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  lowDetailModelURL: String
  originalFilename: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  taxonDescriptionCaption: MultiLangInput
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
  videoURL: String!
}

input Multimedia2Input {
  context: String
  id: String
  type: String
}

input NamedPlace2Input {
  acceptedDocument: Document2Input
  accessibility: Accessibility
  active: DateRange2Input
  alternativeIDs: [String]

  # Formal abbreviation. For Finnish eliömaakunnat, use Finnish abbreviation.
  biogeographicalProvince: [String]
  birdAssociationArea: [String]
  collectionID: String
  context: String

  # Persons who have rights to see and use the named places in their documents
  editors: [String]
  geometry: JSON!
  id: String
  images: [String]
  locality: String

  # Informal description of the exact locality, e.g. '5 km NE of city X, under stone bridge'
  localityDescription: String
  municipality: [String]
  name: String!
  notes: String

  # Persons who have full use access and rights to edit the named place
  owners: [String]
  prepopulatedDocument: Document2Input
  priority: Priority
  privateNotes: String

  # Is the named place publicaly available. (Defaults to false)
  public: Boolean
  reserve: ReserveInput
  tags: [TagsListItem]
  taxonIDs: [String]
  type: String
}

input ReserveInput {
  context: String
  id: String
  reserver: String!
  type: String
  until: String!
}

input News2Input {
  content: String!
  context: String
  eventDate: String!
  id: String
  language: Language2!
  publishDate: String
  targetIndividualIds: [String]
  targets: [String]
  title: String!
  type: String
}

input Notification2Input {
  annotation: Annotation2Input
  context: String
  created: String!
  friendRequest: String
  friendRequestAccepted: String
  id: String
  notificationReason: NotificationReason
  seen: Boolean
  toPerson: String!
  type: String
}

input Occurrence2Input {
  area: String!
  context: String
  id: String
  notes: String
  specimenURI: String
  status: Status4!
  taxon: String!
  threatened: Boolean
  type: String
  year: String
}

input Organization2Input {
  # Official code for this organization, if one exists
  abbreviation: String

  # If organisation code is given, the source for it must be chosen.
  abbreviationExplanation: AbbreviationExplanation

  # Filled in by ICT team
  ad: String

  # Name of content/collection contact person for the organization.
  contentContact: String
  contentContactID: [String]
  context: String

  # Name of the country as on a postal address.
  country: String

  # Address and other contact details to be given for courier services, if different from normal postal address. Appears on transaction PDFs like formulated here.
  courierAddress: String
  creator: String

  # Tags this organisation has
  datasetID: [String]
  dateCreated: String
  dateEdited: String

  # Last date for sending seed orders to this organization.
  dateOrdersDue: String

  # Economic Operators Registration and Identification number for customs clearance, if needed.
  eORINumber: String
  editNotes: String
  editor: String

  # Contact email address for the organization, or address of a contact person.
  email: String

  # Fax number, with country code
  fax: String

  # Used for organisations that are not to be used (duplicates etc.)
  hidden: Boolean
  id: String

  # Usually city name
  locality: String

  # Web address where the logo of the organization is located. Used on Kotka transaction PDFs for now.
  logo: String

  # Free-text notes
  notes: String
  organizationLevel1: MultiLangInput!
  organizationLevel2: MultiLangInput
  organizationLevel3: MultiLangInput
  organizationLevel4: MultiLangInput

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Phone number for organization or contact person, with country code.
  phone: String

  # Insert only numbers, leave 'P.O. Box', 'PL' or such out.
  postOfficeBox: String
  postalCode: String

  # E.g. state or province; use only if needed in the postal address
  region: String
  streetAddress: String
  type: String

  # Organisation website. Include http://
  uRL: String
}

input Pdf2Input {
  caption: String
  context: String
  documentURI: [String]
  fullURL: String!
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]
  largeURL: String!
  originalFilename: String
  originalURL: String
  pdfURL: String!

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions
  sourceSystem: String!
  squareThumbnailURL: String!
  thumbnailURL: String!
  type: String
  uploadDateTime: String
  uploadedBy: String
}

input Permit2Input {
  context: String
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String
  permitEndDate: String
  permitFile: String
  permitNotes: String
  permitStartDate: String
  permitStatus: PermitStatus
  permitType: PermitType
  type: String
}

input Person2Input {
  address: String
  appleLoginName: String
  context: String
  defaultLanguage: String
  defaultQNamePrefix: String
  description: String
  emailAddress: String!
  facebookLoginName: String
  fieldjournalLoginName: [String]
  firstJoined: String
  fullName: String!
  givenNames: String
  googleLoginName: String

  # Group, membership or any other way that allows the user to distinguish themselves from people with the same name
  group: String
  hakaLoginName: String
  hatikkaLoginName: [String]
  id: String
  inaturalistLoginName: String
  inheritedName: String
  insectDatabaseLoginName: [String]
  kastikkaUserName: [String]
  lTKMLoginName: String
  lajiAuthLoginName: String
  lintuvaaraLoginName: [String]
  omariistaLoginName: String
  organisation: [String]

  # Lists all organisations that this user administrates (can grant access to PAP and add users to this organisation)
  organisationAdmin: [String]
  preferredName: String
  previousEmailAddress: [String]
  role: [RoleListItem]
  roleAnnotation: RoleAnnotation
  roleKotka: RoleKotka
  securePortalUserRoleExpires: String
  type: String
  virtuLoginName: String
  yearOfBirth: String
}

input Pinkka2Input {
  context: String
  id: String
  type: String
}

input Preparation2Input {
  context: String
  id: String

  # Which parent or larger collection this is part of.
  isPartOf: String

  # Date when the preparation/sample was prepared.
  preparationDate: String

  # Materials (chemicals, kits etc.) used in the preparation process. It is possible to choose several.
  preparationMaterials: [PreparationMaterialsListItem]

  # Processes used in the preparation. It is possible to choose several.
  preparationProcess: [PreparationProcessListItem]

  # Additional information about the preparation process.
  preparationProcessNotes: String

  # Name of the person who prepared the preparation/sample, preferably in the format 'lastname, firstname'
  preparedBy: String
  type: String
}

input Profile2Input {
  birdSongRecognitionSkillLevels: [BirdSongRecognitionSkillLevel2Input]
  birdwatchingActivityLevel: BirdwatchingActivityLevel
  blocked: [String]
  context: String
  finnishBirdSongRecognitionSkillLevel: FinnishBirdSongRecognitionSkillLevel
  friendRequests: [String]
  friends: [String]
  id: String
  image: String
  nameVisibleInKerttu: Boolean
  personalCollectionIdentifier: String
  profileDescription: String
  profileKey: String
  settings: JSON
  taxonExpertise: [String]
  taxonExpertiseNotes: String
  type: String
  userID: String!
}

input Publication3Input {
  context: String
  dcBibliographicCitation: MultiLangInput
  dcURI: String
  id: String
  type: String
}

input RegionalStatus2Input {
  context: String
  id: String
  regionalStatusArea: String!
  regionalStatusStatus: RegionalStatusStatus!
  type: String
}

input Sample2Input {
  # Other identifiers this preparation/sample has, in format 'type:identifier'. For example: 'MZHtissue:123'. You can enter the type and colon and then click 'generate' to fetch the next free number for that prefix type.
  additionalIDs: [String]

  # BOLD ID (usually BOLD "Sample ID") for the preparation/sample. If no other preparation/sample information is entered, use the BOLD field on the document level
  bold: String

  # The collection which this preparation/sample belongs to, if different from the collection of the specimen.
  collectionID: String

  # Notes on the defects of the preparation/sample (missing parts or such). For specimen level status use the condition field in the basic information section (document level). Empty value means same as "good" or "hyvä" - that the sample is in fine condition.
  condition: String
  context: String
  creator: String

  # Name of the instrument or device used for DNA extraction
  dNAExtractionInstrument: String

  # Tag for the preparation/sample. For specimen level tags, use the tag field in the basic information section (document level).
  datasetID: [String]
  dateCreated: String
  dateEdited: String
  editor: String

  # DNA sample elution medium
  elutionMedium: ElutionMedium

  # Diary-style information about what has been done to the preparation/sample
  event: [String]

  # Genbank ID for the preparation/sample. If no other preparation/sample information is entered, use the Genbank field on the document level
  genbank: [String]
  id: String

  # For example a jar that contains multiple fish individuals can be recorded as one specimen and one preparation. Can also be used for DNA samples (was DNA extracted from single or multiple individuals?).
  individualsInPreparation: IndividualsInPreparation

  # Which parent or larger collection this is part of.
  isPartOf: String

  # Preparation/sample material. Choose preparation/sample type first.
  material: Material
  measurement: MeasurementInput

  # Additional information about the preparation/sample
  notes: String

  # Team or organisation that owns the record and can edit it.
  owner: String

  # Type of preparation/sample
  preparationType: PreparationType!

  # Preservation methods and materials of the preparation/sample. It is possible to choose several
  preservation: [PreparationSamplePreservationListItem]

  # Publication references or doi's that refer to this preparations/sample. For publications referring to the specimen, use publications field in the Other section (document level).
  publication: [String]

  # DNA sample quality on a three step scale. The quality is defined by quality check measurements
  quality: Quality

  # Date of the latest quality check measurements
  qualityCheckDate: String

  # Method or instrument used for quality measurements
  qualityCheckMethod: [QualityCheckMethodListItem]

  # Additional information about the DNA sample quality
  qualityNotes: String

  # Location of the preparation/sample so that museum personnel can find it. E.g. room, freezer, shelf number etc.
  sampleLocation: String
  specimenID: String!

  # Status of the preparation/sample. For specimen level status use the status field in the basic information section. Empty value means same as "ok" - that there is nothing special about the status of the sample.
  status: PreparationSampleStatus
  type: String
}

input SatelliteTrackingProject2Input {
  context: String
  description: MultiLangInput
  id: String
  name: MultiLangInput!
  targetIndividualIds: [String]
  type: String
}

input SpecimenTransaction2Input {
  attachments: [String]

  # If you choose "Yes, with restrictions", explain the restrictions in the following field "Rights and obligations".
  availableForGeneticResearch: AvailableForGeneticResearch
  awayCount: Int
  awayIDs: [String]

  # For statistical purposes. The collection where the transaction is directed to. Record transactions directed to different collections as separate transactions if you use this field.
  collectionID: String
  context: String

  # Select the correspondent organization from a list. If not found on the list, you need to add the new organization first.
  correspondentOrganization: String

  # Name of the corresponding person. If the transaction goes to a private person, write their postal address here.
  correspondentPerson: String

  # Receicing researcher in the correspondent organisation for outgoing transactions.
  correspondentResearcher: String
  creator: String
  damagedCount: Int
  damagedIDs: [String]
  dateCreated: String
  dateEdited: String

  # Date when the loan needs to be returned.
  dueDate: String
  editor: String

  # Sender's ID for the transaction.
  externalID: String

  # Country where the genetic resource or traditional knowledge was acquired from, provider country, country of origin. List of countries in Kotka is based on ISO 3166 Country Codes -standard and may differ from the country list in ABSCH.
  geneticResourceAcquisitionCountry: String

  # Date when the genetic resource or traditional knowledge was aqcuired.
  geneticResourceAcquisitionDate: String

  # Description of the genetic resource or traditional knowledge (possible identifiers, taxa, number of specimens, region etc.). Instruction source EU DECLARE User manual and QA.
  geneticResourceDescription: String

  # Presence or absence of rights and obligations relating to access and benefit sharing, including rights and obligations regarding subsequent applications and commercialization. Instruction source EU DECLARE user manual and QA.
  geneticResourceRightsAndObligations: String

  # Person or legal entity from whom the user obtained the genetic resources directly, i.e. the previous actor in the value chain. Often a museum or other organization. If a genetic resource is obtained directly from the provider country, the name of the country should be provided. Instruction source EU DECLARE User manual and QA.
  geneticResourceSource: String

  # Choose the type of the genetic resource for statistical and reporting purposes.
  geneticResourceType: GeneticResourceType
  harmonizedSystemCode: String

  # Whether the resource has an IRCC number or not. If not, more information needs to be filled in.
  hasIRCC: Boolean

  # Internationally Recognized Certificate of Compliance. Kotka checks from the ABS Clearing House that the entered IRCC number exists and is valid.
  iRCC: String
  id: String

  # Date when incoming transaction was received.
  incomingReceived: String

  # Date when the incoming loan was returned to the sender.
  incomingReturned: String

  # Private remarks that are shown only in Kotka and not to the corresponding organisation.
  internalRemarks: String

  # Loan/transaction number used in paper loan catalogs or old software (e.g. Curator)
  legacyID: String

  # Person handling the transaction at local Kotka institution.
  localHandler: String
  localHandlerEmail: String

  # Person responsible for the transaction in our museum/local Kotka institution
  localPerson: String

  # Contact email for the person responsible in our museum.
  localPersonEmail: String

  # For incoming loans, name of the researcher receiving the loan at our local institution.
  localResearcher: String

  # Description of the material included in this transaction.
  material: String
  missingCount: Int
  missingIDs: [String]

  # In how many parcels was the transaction sent/carried.
  numberOfParcels: String

  # Date when the outgoing loan was returned to us
  outgoingReturned: String

  # When the transaction was sent out from us
  outgoingSent: String

  # Team or organisation that owns the record and can edit it.
  owner: String
  permits: [Permit2Input]

  # Remarks that are shown to both parties of the transaction.
  publicRemarks: String

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # When signed loan receipt was received from the loanee
  receiptReturned: String

  # When loan request was received here.
  requestReceived: String

  # Are you importing genetic resources, traditional knowledge associated to genetic resources or both?
  resourceImported: ResourceImported
  returnedCount: Int
  returnedIDs: [String]

  # Whether the transaction is closed, outstanding or in process.
  status: TransactionStatus
  transactionEvents: [SpecimenTransactionEventInput]

  # Means of sending, mail, courier etc.
  transportMethod: TransportMethod

  # What kind of transaction this is.
  type: TransactionType!

  # Is it e.g. non-human genetic material that is going to be used for genetic research as is defined by the protocol?
  underNagoya: Boolean
}

input SpecimenTransactionEventInput {
  context: String
  eventDate: String!
  eventDocumentIDs: [String]
  eventHandler: String
  eventNotes: String
  eventType: EventType2!
  id: String
  type: String
}

input SubUnit2Input {
  # Estimated or known age in calendar years, years, days or other relevant unit.
  age: String
  context: String
  id: String
  individualCount: Int

  # Sex of the individual(s)
  sex: Sex
  type: String
}

input Tag2Input {
  context: String
  description: MultiLangInput
  id: String
  name: MultiLangInput
  requiredRolesAdd: [RequiredRolesAddListItem]
  requiredRolesRemove: [RequiredRolesRemoveListItem]
  type: Type3
}

input Taxon2Input {
  # Identifier of this taxon concept/name in other systems/sources
  additionalID: [String]

  # Leväosakkaiden kuvaus
  algalPartnerOfLichen: String

  # Names used in observations that are linked to taxonomy. (Eg names used in special cases and informal and slang names.)
  alsoKnownAs: [String]

  # Commonly used names. (Eg names used in recent literature.)
  alternativeVernacularName: AlternativeVernacularNameInput
  autoNonWild: Boolean

  # Lajin elintavat
  behaviour: String
  birdlifeCode: String
  breedingSecureLevel: BreedingSecureLevel
  circumscription: String

  # Informal but commonly used name. Name that is outdated, unofficial or non-recommended, but which is still commonly used for this taxon.
  colloquialVernacularName: ColloquialVernacularNameInput
  conservationStatusDescriptionFinland: String
  conservationStatusDescriptionWorld: String
  context: String
  createdAtTimestamp: String
  cultivationText: String
  customReportFormLink: String

  # Käpyjen kuvaus
  descriptionCone: String

  # Kukan kuvaus
  descriptionFlower: String

  # Hedelmän/siemenen -kuvaus
  descriptionFruitAndSeed: String

  # Itiöemän kuvaus
  descriptionFruitbody: String
  descriptionHostParasite: String

  # Lehden kuvaus
  descriptionLeaf: String

  # Lajin mikroskooppiset tuntomerkit
  descriptionMicroscopicIdentification: String

  # Eliön koon kuvaus
  descriptionOrganismSize: String
  descriptionReferences: String
  descriptionRoot: String

  # Itiöpesäkkeet ja suvuton lisääntyminen
  descriptionSporangiumAndAsexualReproduction: String

  # Itiöiden kuvaus
  descriptionSpore: String

  # Kasvin varren kuvaus
  descriptionStem: String
  descriptionText: String

  # Sekovarren kuvaus
  descriptionThallus: String
  descriptionToxicity: String
  distributionFinland: String
  distributionMapFinland: String

  # Lajin ekologian sekalainen kuvaus
  ecology: String
  economicUseText: String
  etymologyText: String
  euringCode: String
  euringNumber: String
  externalLinkURL: String
  finnish: Boolean
  frequencyScoringPoints: Int
  growthFormAndGrowthHabit: String

  # Lajin elinympäristö
  habitat: String

  # Lajin kasvialusta
  habitatSubstrate: String
  hasAdminStatus: [HasAdminStatusListItem]
  hasAlternativeName: [String]
  hasBasionym: [String]
  hasHeterotypicSynonym: [String]
  hasHomotypicSynonym: [String]
  hasMisappliedName: [String]
  hasMisspelledName: [String]
  hasObjectiveSynonym: [String]
  hasOrthographicVariant: [String]
  hasSubjectiveSynonym: [String]
  hasSynonym: [String]
  hasUncertainSynonym: [String]
  herboSortOrder: Int

  # Should this taxon be hidden when showing contents of a checklist (publicly)?
  hiddenTaxon: Boolean
  id: String
  identificationText: String
  ingressText: String
  invasiveCitizenActionsText: String
  invasiveEffectText: String
  invasivePreventionMethodsText: String
  invasiveSpeciesCategory: InvasiveSpeciesCategory
  invasiveSpeciesClassificationDescription: String
  invasiveSpeciesEarlyWarning: Boolean
  invasiveSpeciesEstablishment: InvasiveSpeciesEstablishment
  invasiveSpeciesMainGroup: [InvasiveSpeciesMainGroupListItem]
  isPartOf: String
  isPartOfInformalTaxonGroup: [String]
  isPartOfSet: [IsPartOfSetListItem]

  # Eliön elinkierto
  lifeCycle: String
  management: String
  miscText: String
  nameAccordingTo: String
  nameDecidedBy: String
  nameDecidedDate: String
  naturaAreaSecureLevel: NaturaAreaSecureLevel
  nestSiteSecureLevel: NestSiteSecureLevel
  notes: String

  # Names not recommended and no longer (for a long time) commonly used. (For example, names used in the literature in the 20th century, or names transferred to another taxon.
  obsoleteVernacularName: ObsoleteVernacularNameInput
  occurrenceInFinland: OccurrenceInFinland
  occurrenceInFinlandPublication: [String]
  occurrenceInFinlandSpecimenURI: String
  originAndDistributionText: String
  originalDescription: String
  originalPublication: [String]
  overridingTargetName: [String]

  # <p>Lisämerkinnät:</p>
  # <ul> 
  # <li><b>v - vanhat metsät</b> (myös yksittäiset vanhat puut ja runsaasti lahopuuta sisältävät nuoremmat metsät)</li>
  # <li><b>h - harjumetsät</b>, myös puoliavoimet</li>
  # <li><b>p - metsäpaloalueet</b> ja muut luontaisen sukkession alkuvaiheen metsät</li>
  # <li><b>j - jalopuuesiintymä</b></li>
  # <li><b>pa - paahteinen</b></li>
  # <li><b>va - varjoinen</b></li>
  # <li><b>ra - sijaitsee rannalla</b> (lajin esiintyminen on sidoksissa rannan läheisyyteen)</li>
  # <li><b>ka - karut kalliot ja kivikot</b></li>
  # <li><b>ke - keskiravinteiset kalliot ja kivikot</b></li>
  # <li><b>ca - kalkkivaikutteinen</b></li>
  # </ul>
  primaryHabitat: String
  privateNotes: String
  productionText: String
  redListStatus2000Finland: RedListStatus2000Finland
  redListStatus2010Finland: RedListStatus2010Finland
  redListStatus2015Finland: RedListStatus2015Finland
  redListStatus2019Finland: RedListStatus2019Finland
  reproduction: String

  # Kukinta-aika
  reproductionFloweringTime: String

  # Pölytyksen kuvaus
  reproductionPollination: String
  scientificName: String
  scientificNameAuthorship: String
  secondaryHabitat: [String]

  # Secure level (salaus-/karkeistustaso) for the data
  secureLevel: SecureLevel
  skosExactMatch: String
  sortOrder: Int
  speciesCardAuthors: String
  stopInformalTaxonGroupInheritance: Boolean
  stopOccurrenceInFinlandPublicationInheritance: Boolean
  stopOriginalPublicationInheritance: Boolean
  targetName: [String]
  taxonEditor: [String]
  taxonExpert: [String]
  taxonRank: TaxonomicRank
  taxonomyText: String
  tradeName: [String]
  type: String
  typeOfOccurrenceInFinland: [TypeOfOccurrenceListItem]
  typeOfOccurrenceInFinlandNotes: String
  typeSpecimenURI: String
  vernacularName: MultiLangInput
  winteringSecureLevel: WinteringSecureLevel
}

# Commonly used names. (Eg names used in recent literature.)
input AlternativeVernacularNameInput {
  en: [String]
  fi: [String]
  sv: [String]
}

# Informal but commonly used name. Name that is outdated, unofficial or non-recommended, but which is still commonly used for this taxon.
input ColloquialVernacularNameInput {
  en: [String]
  fi: [String]
  sv: [String]
}

# Names not recommended and no longer (for a long time) commonly used. (For example, names used in the literature in the 20th century, or names transferred to another taxon.
input ObsoleteVernacularNameInput {
  en: [String]
  fi: [String]
  sv: [String]
}

input TaxonConcept2Input {
  congruent: [String]
  context: String
  excludes: [String]
  id: String
  includedIn: [String]
  overlaps: [String]
  type: String
}

input TaxonGroupIucnEditors2Input {
  context: String
  id: String
  iucnEditor: [String]
  taxonGroup: String!
  type: String
}

input TaxonInteraction2Input {
  context: String
  id: String
  interactionType: InteractionType!
  objectLifeStage: ObjectLifeStage
  objectTaxon: String!
  originalPublication: [String]
  subjectLifeStage: SubjectLifeStage
  subjectTaxon: String!
  type: String
}

input TaxonSet2Input {
  context: String
  id: String
  type: String
}

input Trait2Input {
  baseUnit: String
  context: String
  dataEntryName: String!
  description: String!
  exampleValues: String
  externalIdentifier: [String]
  hasEnumeration: [String]
  id: String
  name: String!
  partOfGroup: String!
  reference: [String]
  type: String
}

input TraitEnumValue2Input {
  context: String
  dataEntryName: String!
  description: String!
  id: String
  name: String!
  sortOrder: Int
  type: String
}

input TraitGroup2Input {
  context: String
  description: String!
  id: String
  name: String!
  type: String
}

input Transaction2Input {
  # If you choose "Yes, with restrictions", explain the restrictions in the following field "Rights and obligations".
  availableForGeneticResearch: IsGeneticResearchAllowedOnTheGeneticResourceS
  availableForGeneticResearchNotes: String
  away: [String]
  awayOther: Int

  # For statiscal purposes. The collection where the transaction is directed to. Record transactions directed to different collections as separate transactions if you use this field.
  collectionID: String
  context: String

  # Which Luomus' department is shown on loan sheets
  correspondenceHeaderOrganizationCode: String

  # Select the correspondent organization from a list. If not found on the list, you need to add the new organization first.
  correspondentOrganization: String!

  # Name of the corresponding person. If the transaction goes to a private person, write his/her postal address here.
  correspondentPerson: String
  creator: String
  damaged: [String]
  damagedOther: Int
  dateCreated: String
  dateEdited: String

  # Date when the loan needs to be returned.
  dueDate: String
  editNotes: String
  editor: String

  # Sender's ID for the transaction.
  externalTransactionID: String

  # Country where the genetic resource or traditional knowledge was acquired from, provider country, country of origin. List of countries in Kotka is based on ISO 3166 Country Codes -standard and may differ from the country list in ABSCH.
  geneticResourceAcquisitionCountry: String

  # Date when the genetic resource or traditional knowledge was aqcuired.
  geneticResourceAcquisitionDate: String

  # Description of the genetic resource or traditional knowledge (possible identifiers, taxa, number of specimens, region etc.). Instruction source EU DECLARE User manual and QA.
  geneticResourceDescription: String

  # Presence or absence of rights and obligations relating to access and benefit sharing, including rights and obligations regarding subsequent applications and commercialization. Instruction source EU DECLARE user manual and QA.
  geneticResourceRightsAndObligations: String

  # Person or legal entity from whom the user obtained the genetic resources directly, i.e. the previous actor in the value chain. Often a museum or other organization. If a genetic resource is obtained directly from the provider country, the name of the country should be provided. Instruction source EU DECLARE User manual and QA.
  geneticResourceSource: String

  # Choose the type of the genetic resource for statistical and reporting purposes.
  geneticResourceType: TypeOfResource

  # Whether the resource has an IRCC number or not. If not, more information needs to be filled in.
  hasIRCC: Boolean

  # Internationally Recognized Certificate of Compliance. Kotka checks from the ABS Clearing House that the entered IRCC number exists and is valid.
  iRCC: String
  id: String
  ids: String
  internalRemarks: MultiLangInput

  # Responsible team in our museum.
  localDepartment: LocalDepartment

  # Responsible person in our museum.
  localPerson: String

  # Responsible person's email in our museum.
  localPersonEmail: String

  # For incoming loans, name of the researcher receiving the loan.
  localResearcher: String
  material: MultiLangInput
  missing: [String]
  missingOther: Int

  # Loan number used in paper loan catalogs or old software (e.g. Curator)
  oldLoanID: String

  # Team or organisation that owns the record and can edit it.
  owner: String
  permits: [Permit2Input]
  publicRemarks: MultiLangInput

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # When signed loan receipt was received from the loanee
  receiptReturned: String

  # Are you importing genetic resources, traditional knowledge associated to genetic resources or both?
  resourceImported: WhatAreYouImporting
  returned: [String]
  returnedOther: Int
  sentParcels: MultiLangInput

  # Means of sending, mail, courier etc.
  sentType: SentType

  # When loan request, loan, gift or exchange was received here.
  transactionRequestReceived: String!

  # Date when the outgoing loan was returned back from the correspondent to the museum
  transactionReturned: String

  # When the transaction was sent out from us
  transactionSent: String

  # Whether the transaction is closed, outstanding or in process.
  transactionStatus: TransactionStatus2

  # What kind of transaction this is.
  transactionType: TransactionType2!
  type: String

  # Is it e.g. non-human genetic material that is going to be used for genetic research as is defined by the protocol?
  underNagoya: Boolean
}

input TransactionEvent2Input {
  context: String
  eventDate: String!
  eventHandler: String!
  eventType: EventType3!
  id: String
  items: [TransactionItemInput]!
  notes: String
  numberOfPackages: Int
  sentBy: SentBy
  type: String
}

input TransactionItemInput {
  collectionID: String
  context: String
  id: String
  itemCount: Int!
  itemID: String
  itemLabel: String
  itemType: ItemType!
  notes: String
  status: Status5!
  type: String
}

input Translation2Input {
  context: String
  en: [JSON]
  fi: [JSON]
  id: String
  sv: [JSON]
  type: String
}

input UnitOfMeasurement2Input {
  baseConversion: Float!
  baseUnit: String
  context: String
  id: String
  isBaseUnit: Boolean!
  rdfsLabel: RdfsLabelInput
  type: String
}

input RdfsLabelInput {
  en: [String]
  fi: [String]
  sv: [String]
}

input Validator2Input {
  context: String
  id: String
  type: String
}

input Video2Input {
  caption: String
  captureDateTime: String
  capturerVerbatim: [String]
  context: String
  documentURI: [String]
  fullResolutionMediaAvailable: Boolean
  id: String
  intellectualOwner: String!
  intellectualRights: IntellectualRights!
  keyword: [String]

  # Life stage of the specimen. If multiple present, select the one which was present at the time of collecting. Use Life stage description field for extra information.
  lifeStage: LifeStage
  originalFilename: String
  plantLifeStage: PlantLifeStage
  primaryForTaxon: [String]

  # PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
  publicityRestrictions: PublicityRestrictions

  # Sex of the individual(s)
  sex: Sex
  sortOrder: Int
  sourceSystem: String!
  taxonDescriptionCaption: MultiLangInput
  taxonURI: [String]
  taxonVerbatim: [String]
  thumbnailURL: String!
  type: TypeOfTaxonMedia
  uploadDateTime: String
  uploadedBy: String
  videoURL: String!
}

type BibliographicResource3 {
  affected: Int
}

type Concept3 {
  affected: Int
}

type Pinkka3 {
  affected: Int
}

type AdministrativeStatus3 {
  affected: Int
}

type Agent3 {
  affected: Int
}

type Annotation3 {
  affected: Int
}

type AnnotationOccurrence3 {
  affected: Int
}

type Area3 {
  affected: Int
}

type Audio3 {
  affected: Int
}

type BirdSongRecognitionSkillLevel3 {
  affected: Int
}

type Branch3 {
  affected: Int
}

type Checklist3 {
  affected: Int
}

type ChecklistVersion3 {
  affected: Int
}

type Collection3 {
  affected: Int
}

type CompleteList3 {
  affected: Int
}

type ContentContextDescription3 {
  affected: Int
}

type DataField3 {
  affected: Int
}

type Dataset3 {
  affected: Int
}

type DateRange3 {
  affected: Int
}

type Device3 {
  affected: Int
}

type DeviceIndividual3 {
  affected: Int
}

type Document3 {
  affected: Int
}

type DownloadRequest3 {
  affected: Int
}

type Endangerment4 {
  affected: Int
}

type Event4 {
  affected: Int
}

type Field3 {
  affected: Int
}

type Fieldset3 {
  affected: Int
}

type Form3 {
  affected: Int
}

type FormFooter3 {
  affected: Int
}

type FormInstruction {
  affected: Int
}

type FormNamedPlaceOption {
  affected: Int
}

type FormOption {
  affected: Int
}

type FormPermission3 {
  affected: Int
}

type FormPermissionPerson3 {
  affected: Int
}

type FormPermissionSingle3 {
  affected: Int
}

type FormSeason3 {
  affected: Int
}

type Gathering3 {
  affected: Int
}

type GatheringEvent3 {
  affected: Int
}

type GatheringFact3 {
  affected: Int
}

type Habitat4 {
  affected: Int
}

type Identification3 {
  affected: Int
}

type Image3 {
  affected: Int
}

type Individual3 {
  affected: Int
}

type InformalTaxonGroup3 {
  affected: Int
}

type InformationSystem3 {
  affected: Int
}

type IucnRedListEvaluation3 {
  affected: Int
}

type IucnRedListEvaluationYear3 {
  affected: Int
}

type IucnRedListTaxonGroup3 {
  affected: Int
}

type Measurement3 {
  affected: Int
}

type Model3 {
  affected: Int
}

type Multimedia3 {
  affected: Int
}

type NamedPlace3 {
  affected: Int
}

type News3 {
  affected: Int
}

type Notification3 {
  affected: Int
}

type Occurrence3 {
  affected: Int
}

type Organization3 {
  affected: Int
}

type Pdf3 {
  affected: Int
}

type Permit3 {
  affected: Int
}

type Person3 {
  affected: Int
}

type Preparation3 {
  affected: Int
}

type Profile3 {
  affected: Int
}

type Publication4 {
  affected: Int
}

type RegionalStatus3 {
  affected: Int
}

type Reserve3 {
  affected: Int
}

type Sample3 {
  affected: Int
}

type SatelliteTrackingProject3 {
  affected: Int
}

type SpecimenTransaction3 {
  affected: Int
}

type SpecimenTransactionEvent3 {
  affected: Int
}

type SubUnit3 {
  affected: Int
}

type Tag3 {
  affected: Int
}

type Taxon3 {
  affected: Int
}

type TaxonCensus4 {
  affected: Int
}

type TaxonConcept3 {
  affected: Int
}

type TaxonGroupIucnEditor {
  affected: Int
}

type TaxonInteraction3 {
  affected: Int
}

type TaxonSet3 {
  affected: Int
}

type Trait3 {
  affected: Int
}

type TraitEnumValue3 {
  affected: Int
}

type TraitGroup3 {
  affected: Int
}

type Transaction3 {
  affected: Int
}

type TransactionEvent3 {
  affected: Int
}

type TransactionItem3 {
  affected: Int
}

type Translation3 {
  affected: Int
}

type TypeSpeciman {
  affected: Int
}

type Unit3 {
  affected: Int
}

type UnitFact3 {
  affected: Int
}

type UnitGathering3 {
  affected: Int
}

type UnitOfMeasurement3 {
  affected: Int
}

type Validator3 {
  affected: Int
}

type Video3 {
  affected: Int
}

input EsSearchObjInput {
  patch: [JSON]!
  query: JSON
}

type BibliographicResourceSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [BibliographicResource2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ConceptSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Concept2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type PinkkaSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Pinkka2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AdministrativeStatusSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [AdministrativeStatus2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AgentSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Agent2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AnnotationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Annotation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AnnotationOccurrenceSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [AnnotationOccurrence]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AreaSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Area2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type AudioSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Audio2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type BirdSongRecognitionSkillLevelSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [BirdSongRecognitionSkillLevel2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type BranchSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Branch2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ChecklistSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Checklist2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ChecklistVersionSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [ChecklistVersion2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type CollectionSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Collection2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type CompleteListSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [CompleteList2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ContentContextDescriptionSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [ContentContextDescription2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DataFieldSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DataField2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DatasetSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Dataset2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DateRangeSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DateRange2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DeviceSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Device2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DeviceIndividualSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DeviceIndividual2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DocumentSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Document2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type DownloadRequestSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [DownloadRequest2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type EndangermentSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Endangerment2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type EventSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Event3]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FieldSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Field2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FieldsetSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Fieldset2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Form2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormFooterSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormFooter]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormInstructionsSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormInstructions2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormNamedPlaceOptionsSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormNamedPlaceOptions]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormOptionsSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormOptions]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormPermissionSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormPermission2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormPermissionPersonSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormPermissionPerson2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormPermissionSingleSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormPermissionSingle2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type FormSeasonSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [FormSeason]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type GatheringSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Gathering]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type GatheringEventSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [GatheringEvent]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type GatheringFactSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [GatheringFact]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type HabitatSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Habitat3]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IdentificationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Identification]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ImageSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Image2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IndividualSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Individual2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type InformalTaxonGroupSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [InformalTaxonGroup2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type InformationSystemSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [InformationSystem2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IucnRedListEvaluationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [IucnRedListEvaluation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IucnRedListEvaluationYearSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [IucnRedListEvaluationYear2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type IucnRedListTaxonGroupSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [IucnRedListTaxonGroup2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type MeasurementSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Measurement]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ModelSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Model2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type MultimediaSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Multimedia2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type NamedPlaceSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [NamedPlace2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type NewsSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [News2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type NotificationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Notification2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type OccurrenceSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Occurrence2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type OrganizationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Organization2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type PdfSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Pdf2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type PermitSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Permit2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type PersonSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Person2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type PreparationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Preparation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ProfileSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Profile2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type PublicationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Publication3]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type RegionalStatusSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [RegionalStatus2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ReserveSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Reserve]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SampleSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Sample2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SatelliteTrackingProjectSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SatelliteTrackingProject2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SpecimenTransactionSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SpecimenTransaction2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SpecimenTransactionEventSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SpecimenTransactionEvent]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type SubUnitSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [SubUnit2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TagSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Tag2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Taxon2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonCensusSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonCensus2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonConceptSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonConcept2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonGroupIucnEditorsSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonGroupIucnEditors2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonInteractionSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonInteraction2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TaxonSetSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TaxonSet2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TraitSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Trait2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TraitEnumValueSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TraitEnumValue2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TraitGroupSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TraitGroup2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TransactionSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Transaction2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TransactionEventSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TransactionEvent2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TransactionItemSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TransactionItem]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TranslationSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Translation2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type TypeSpecimenSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [TypeSpecimen]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type UnitSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Unit]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type UnitFactSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [UnitFact]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type UnitGatheringSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [UnitGathering]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type UnitOfMeasurementSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [UnitOfMeasurement2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type ValidatorSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Validator2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

type VideoSearch2 {
  aggregations: JSON
  context: String!
  currentPage: Int
  lastPage: Int!
  member: [Video2]!
  pageSize: Int!
  totalItems: Int!
  type: String!
  view: PagedView!
}

# Warning: Not every request will work with this viewer type
type MutationViewerAnyAuth {
  # Bulk insert objects.
  #
  # Equivalent to POST /_bulk
  bulk(requestBody: BulkInput): Bulk

  # Delete Bibliographic Resource
  #
  # Equivalent to DELETE /BibliographicResource/{id}
  deleteBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!
  ): BibliographicResource3

  # Delete Concept
  #
  # Equivalent to DELETE /Concept/{id}
  deleteConcept(
    # Id for the Concept
    id: String!
  ): Concept3

  # Delete Instances of this describe one taxon description context (Pinkka eLearning enviroment)
  #
  # Equivalent to DELETE /Pinkka/{id}
  deletePinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!
  ): Pinkka3

  # Delete Administrative status
  #
  # Equivalent to DELETE /administrativeStatus/{id}
  deleteadministrativeStatus(
    # Id for the Administrative status
    id: String!
  ): AdministrativeStatus3

  # Delete agent
  #
  # Equivalent to DELETE /agent/{id}
  deleteagent(
    # Id for the agent
    id: String!
  ): Agent3

  # Delete annotation
  #
  # Equivalent to DELETE /annotation/{id}
  deleteannotation(
    # Id for the annotation
    id: String!
  ): Annotation3

  # Delete annotationOccurrence
  #
  # Equivalent to DELETE /annotationOccurrence/{id}
  deleteannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!
  ): AnnotationOccurrence3

  # Delete Area
  #
  # Equivalent to DELETE /area/{id}
  deletearea(
    # Id for the Area
    id: String!
  ): Area3

  # Delete Audio recording
  #
  # Equivalent to DELETE /audio/{id}
  deleteaudio(
    # Id for the Audio recording
    id: String!
  ): Audio3

  # Delete Instances of this class are bird song recognition skill levels of a certain area
  #
  # Equivalent to DELETE /birdSongRecognitionSkillLevel/{id}
  deletebirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!
  ): BirdSongRecognitionSkillLevel3

  # Delete Branch
  #
  # Equivalent to DELETE /branch/{id}
  deletebranch(
    # Id for the Branch
    id: String!
  ): Branch3

  # Delete Checklist
  #
  # Equivalent to DELETE /checklist/{id}
  deletechecklist(
    # Id for the Checklist
    id: String!
  ): Checklist3

  # Delete Checklist version
  #
  # Equivalent to DELETE /checklistVersion/{id}
  deletechecklistVersion(
    # Id for the Checklist version
    id: String!
  ): ChecklistVersion3

  # Delete Collection
  #
  # Equivalent to DELETE /collection/{id}
  deletecollection(
    # Id for the Collection
    id: String!
  ): Collection3

  # Delete completeList
  #
  # Equivalent to DELETE /completeList/{id}
  deletecompleteList(
    # Id for the completeList
    id: String!
  ): CompleteList3

  # Delete Instances of this describe one taxon description context
  #
  # Equivalent to DELETE /contentContextDescription/{id}
  deletecontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!
  ): ContentContextDescription3

  # Delete Data field
  #
  # Equivalent to DELETE /dataField/{id}
  deletedataField(
    # Id for the Data field
    id: String!
  ): DataField3

  # Delete Tag
  #
  # Equivalent to DELETE /dataset/{id}
  deletedataset(
    # Id for the Tag
    id: String!
  ): Dataset3

  # Delete dateRange
  #
  # Equivalent to DELETE /dateRange/{id}
  deletedateRange(
    # Id for the dateRange
    id: String!
  ): DateRange3

  # Delete device
  #
  # Equivalent to DELETE /device/{id}
  deletedevice(
    # Id for the device
    id: String!
  ): Device3

  # Delete deviceIndividual
  #
  # Equivalent to DELETE /deviceIndividual/{id}
  deletedeviceIndividual(
    # Id for the deviceIndividual
    id: String!
  ): DeviceIndividual3

  # Delete Submissions
  #
  # Equivalent to DELETE /document/{id}
  deletedocument(
    # Id for the Submissions
    id: String!
  ): Document3

  # Delete Download request
  #
  # Equivalent to DELETE /downloadRequest/{id}
  deletedownloadRequest(
    # Id for the Download request
    id: String!
  ): DownloadRequest3

  # Delete Endagerment object
  #
  # Equivalent to DELETE /endangerment/{id}
  deleteendangerment(
    # Id for the Endagerment object
    id: String!
  ): Endangerment4

  # Delete event
  #
  # Equivalent to DELETE /event/{id}
  deleteevent(
    # Id for the event
    id: String!
  ): Event4

  # Delete field
  #
  # Equivalent to DELETE /field/{id}
  deletefield(
    # Id for the field
    id: String!
  ): Field3

  # Delete fieldset
  #
  # Equivalent to DELETE /fieldset/{id}
  deletefieldset(
    # Id for the fieldset
    id: String!
  ): Fieldset3

  # Delete form
  #
  # Equivalent to DELETE /form/{id}
  deleteform(
    # Id for the form
    id: String!
  ): Form3

  # Delete formFooter
  #
  # Equivalent to DELETE /formFooter/{id}
  deleteformFooter(
    # Id for the formFooter
    id: String!
  ): FormFooter3

  # Delete formInstructions
  #
  # Equivalent to DELETE /formInstructions/{id}
  deleteformInstructions(
    # Id for the formInstructions
    id: String!
  ): FormInstruction

  # Delete formNamedPlaceOptions
  #
  # Equivalent to DELETE /formNamedPlaceOptions/{id}
  deleteformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!
  ): FormNamedPlaceOption

  # Delete formOptions
  #
  # Equivalent to DELETE /formOptions/{id}
  deleteformOptions(
    # Id for the formOptions
    id: String!
  ): FormOption

  # Delete formPermission
  #
  # Equivalent to DELETE /formPermission/{id}
  deleteformPermission(
    # Id for the formPermission
    id: String!
  ): FormPermission3

  # Delete formPermissionPerson
  #
  # Equivalent to DELETE /formPermissionPerson/{id}
  deleteformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!
  ): FormPermissionPerson3

  # Delete formPermissionSingle
  #
  # Equivalent to DELETE /formPermissionSingle/{id}
  deleteformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!
  ): FormPermissionSingle3

  # Delete formSeason
  #
  # Equivalent to DELETE /formSeason/{id}
  deleteformSeason(
    # Id for the formSeason
    id: String!
  ): FormSeason3

  # Delete Gathering event
  #
  # Equivalent to DELETE /gathering/{id}
  deletegathering(
    # Id for the Gathering event
    id: String!
  ): Gathering3

  # Delete Global gathering event
  #
  # Equivalent to DELETE /gatheringEvent/{id}
  deletegatheringEvent(
    # Id for the Global gathering event
    id: String!
  ): GatheringEvent3

  # Delete Keruutapahtuman faktat
  #
  # Equivalent to DELETE /gatheringFact/{id}
  deletegatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!
  ): GatheringFact3

  # Delete IUCN Red List Evaluation Habitat
  #
  # Equivalent to DELETE /habitat/{id}
  deletehabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!
  ): Habitat4

  # Delete Identification
  #
  # Equivalent to DELETE /identification/{id}
  deleteidentification(
    # Id for the Identification
    id: String!
  ): Identification3

  # Delete Image
  #
  # Equivalent to DELETE /image/{id}
  deleteimage(
    # Id for the Image
    id: String!
  ): Image3

  # Delete individual
  #
  # Equivalent to DELETE /individual/{id}
  deleteindividual(
    # Id for the individual
    id: String!
  ): Individual3

  # Delete Informal Taxon Group
  #
  # Equivalent to DELETE /informalTaxonGroup/{id}
  deleteinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!
  ): InformalTaxonGroup3

  # Delete Information System
  #
  # Equivalent to DELETE /informationSystem/{id}
  deleteinformationSystem(
    # Id for the Information System
    id: String!
  ): InformationSystem3

  # Delete IUCN Red List Evaluation
  #
  # Equivalent to DELETE /iucnRedListEvaluation/{id}
  deleteiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!
  ): IucnRedListEvaluation3

  # Delete IUCN Evaluation Year
  #
  # Equivalent to DELETE /iucnRedListEvaluationYear/{id}
  deleteiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!
  ): IucnRedListEvaluationYear3

  # Delete IUCN Red List Evaluation Informal Taxon Group
  #
  # Equivalent to DELETE /iucnRedListTaxonGroup/{id}
  deleteiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!
  ): IucnRedListTaxonGroup3

  # Delete measurement
  #
  # Equivalent to DELETE /measurement/{id}
  deletemeasurement(
    # Id for the measurement
    id: String!
  ): Measurement3

  # Delete 3D model
  #
  # Equivalent to DELETE /model/{id}
  deletemodel(
    # Id for the 3D model
    id: String!
  ): Model3

  # Delete multimedia
  #
  # Equivalent to DELETE /multimedia/{id}
  deletemultimedia(
    # Id for the multimedia
    id: String!
  ): Multimedia3

  # Delete namedPlace
  #
  # Equivalent to DELETE /namedPlace/{id}
  deletenamedPlace(
    # Id for the namedPlace
    id: String!
  ): NamedPlace3

  # Delete News
  #
  # Equivalent to DELETE /news/{id}
  deletenews(
    # Id for the News
    id: String!
  ): News3

  # Delete notification
  #
  # Equivalent to DELETE /notification/{id}
  deletenotification(
    # Id for the notification
    id: String!
  ): Notification3

  # Delete Occurrence
  #
  # Equivalent to DELETE /occurrence/{id}
  deleteoccurrence(
    # Id for the Occurrence
    id: String!
  ): Occurrence3

  # Delete Organization
  #
  # Equivalent to DELETE /organization/{id}
  deleteorganization(
    # Id for the Organization
    id: String!
  ): Organization3

  # Delete PDF
  #
  # Equivalent to DELETE /pdf/{id}
  deletepdf(
    # Id for the PDF
    id: String!
  ): Pdf3

  # Delete permit
  #
  # Equivalent to DELETE /permit/{id}
  deletepermit(
    # Id for the permit
    id: String!
  ): Permit3

  # Delete Person
  #
  # Equivalent to DELETE /person/{id}
  deleteperson(
    # Id for the Person
    id: String!
  ): Person3

  # Delete preparation
  #
  # Equivalent to DELETE /preparation/{id}
  deletepreparation(
    # Id for the preparation
    id: String!
  ): Preparation3

  # Delete profile
  #
  # Equivalent to DELETE /profile/{id}
  deleteprofile(
    # Id for the profile
    id: String!
  ): Profile3

  # Delete Publication
  #
  # Equivalent to DELETE /publication/{id}
  deletepublication(
    # Id for the Publication
    id: String!
  ): Publication4

  # Delete Instances of this class tell endangerment of a certain area and notes about the area
  #
  # Equivalent to DELETE /regionalStatus/{id}
  deleteregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!
  ): RegionalStatus3

  # Delete reserve
  #
  # Equivalent to DELETE /reserve/{id}
  deletereserve(
    # Id for the reserve
    id: String!
  ): Reserve3

  # Delete Specimen sample
  #
  # Equivalent to DELETE /sample/{id}
  deletesample(
    # Id for the Specimen sample
    id: String!
  ): Sample3

  # Delete Satellite Tracking Project
  #
  # Equivalent to DELETE /satelliteTrackingProject/{id}
  deletesatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!
  ): SatelliteTrackingProject3

  # Delete Transaction class
  #
  # Equivalent to DELETE /specimenTransaction/{id}
  deletespecimenTransaction(
    # Id for the Transaction class
    id: String!
  ): SpecimenTransaction3

  # Delete Transaction Event
  #
  # Equivalent to DELETE /specimenTransactionEvent/{id}
  deletespecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): SpecimenTransactionEvent3

  # Delete subUnit
  #
  # Equivalent to DELETE /subUnit/{id}
  deletesubUnit(
    # Id for the subUnit
    id: String!
  ): SubUnit3

  # Delete tag
  #
  # Equivalent to DELETE /tag/{id}
  deletetag(
    # Id for the tag
    id: String!
  ): Tag3

  # Delete Taxon
  #
  # Equivalent to DELETE /taxon/{id}
  deletetaxon(
    # Id for the Taxon
    id: String!
  ): Taxon3

  # Delete Completeness of census
  #
  # Equivalent to DELETE /taxonCensus/{id}
  deletetaxonCensus(
    # Id for the Completeness of census
    id: String!
  ): TaxonCensus4

  # Delete Taxon concept
  #
  # Equivalent to DELETE /taxonConcept/{id}
  deletetaxonConcept(
    # Id for the Taxon concept
    id: String!
  ): TaxonConcept3

  # Delete IUCN Editors
  #
  # Equivalent to DELETE /taxonGroupIucnEditors/{id}
  deletetaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!
  ): TaxonGroupIucnEditor

  # Delete Taxon interaction
  #
  # Equivalent to DELETE /taxonInteraction/{id}
  deletetaxonInteraction(
    # Id for the Taxon interaction
    id: String!
  ): TaxonInteraction3

  # Delete Instances of this class are a taxon sets
  #
  # Equivalent to DELETE /taxonSet/{id}
  deletetaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!
  ): TaxonSet3

  # Delete Trait
  #
  # Equivalent to DELETE /trait/{id}
  deletetrait(
    # Id for the Trait
    id: String!
  ): Trait3

  # Delete Trait enumeration
  #
  # Equivalent to DELETE /traitEnumValue/{id}
  deletetraitEnumValue(
    # Id for the Trait enumeration
    id: String!
  ): TraitEnumValue3

  # Delete Trait value
  #
  # Equivalent to DELETE /traitGroup/{id}
  deletetraitGroup(
    # Id for the Trait value
    id: String!
  ): TraitGroup3

  # Delete Transaction
  #
  # Equivalent to DELETE /transaction/{id}
  deletetransaction(
    # Id for the Transaction
    id: String!
  ): Transaction3

  # Delete Transaction Event
  #
  # Equivalent to DELETE /transactionEvent/{id}
  deletetransactionEvent(
    # Id for the Transaction Event
    id: String!
  ): TransactionEvent3

  # Delete Transaction Item
  #
  # Equivalent to DELETE /transactionItem/{id}
  deletetransactionItem(
    # Id for the Transaction Item
    id: String!
  ): TransactionItem3

  # Delete translation
  #
  # Equivalent to DELETE /translation/{id}
  deletetranslation(
    # Id for the translation
    id: String!
  ): Translation3

  # Delete Identification
  #
  # Equivalent to DELETE /typeSpecimen/{id}
  deletetypeSpecimen(
    # Id for the Identification
    id: String!
  ): TypeSpeciman

  # Delete Specimen
  #
  # Equivalent to DELETE /unit/{id}
  deleteunit(
    # Id for the Specimen
    id: String!
  ): Unit3

  # Delete Näytteen / havainnon faktat
  #
  # Equivalent to DELETE /unitFact/{id}
  deleteunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!
  ): UnitFact3

  # Delete Havainnon keruutiedot
  #
  # Equivalent to DELETE /unitGathering/{id}
  deleteunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!
  ): UnitGathering3

  # Delete Unit of measurement
  #
  # Equivalent to DELETE /unitOfMeasurement/{id}
  deleteunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!
  ): UnitOfMeasurement3

  # Delete validator
  #
  # Equivalent to DELETE /validator/{id}
  deletevalidator(
    # Id for the validator
    id: String!
  ): Validator3

  # Delete Video
  #
  # Equivalent to DELETE /video/{id}
  deletevideo(
    # Id for the Video
    id: String!
  ): Video3

  # Patch bibliographic resource (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching bibliographic resource.
  #
  # Equivalent to PATCH /BibliographicResource
  patchBibliographicResource(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch concept (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching concept.
  #
  # Equivalent to PATCH /Concept
  patchConcept(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this describe one taxon description context (pinkka elearning enviroment) (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this describe one taxon description context (pinkka elearning enviroment).
  #
  # Equivalent to PATCH /Pinkka
  patchPinkka(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch administrative status (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching administrative status.
  #
  # Equivalent to PATCH /administrativeStatus
  patchadministrativeStatus(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch agent (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching agent.
  #
  # Equivalent to PATCH /agent
  patchagent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch annotation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching annotation.
  #
  # Equivalent to PATCH /annotation
  patchannotation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch annotationoccurrence (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching annotationoccurrence.
  #
  # Equivalent to PATCH /annotationOccurrence
  patchannotationOccurrence(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch area (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching area.
  #
  # Equivalent to PATCH /area
  patcharea(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch audio recording (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching audio recording.
  #
  # Equivalent to PATCH /audio
  patchaudio(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this class are bird song recognition skill levels of a certain area (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this class are bird song recognition skill levels of a certain area.
  #
  # Equivalent to PATCH /birdSongRecognitionSkillLevel
  patchbirdSongRecognitionSkillLevel(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch branch (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching branch.
  #
  # Equivalent to PATCH /branch
  patchbranch(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch checklist (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching checklist.
  #
  # Equivalent to PATCH /checklist
  patchchecklist(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch checklist version (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching checklist version.
  #
  # Equivalent to PATCH /checklistVersion
  patchchecklistVersion(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch collection (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching collection.
  #
  # Equivalent to PATCH /collection
  patchcollection(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch completelist (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching completelist.
  #
  # Equivalent to PATCH /completeList
  patchcompleteList(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this describe one taxon description context (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this describe one taxon description context.
  #
  # Equivalent to PATCH /contentContextDescription
  patchcontentContextDescription(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch data field (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching data field.
  #
  # Equivalent to PATCH /dataField
  patchdataField(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch tag (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching tag.
  #
  # Equivalent to PATCH /dataset
  patchdataset(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch daterange (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching daterange.
  #
  # Equivalent to PATCH /dateRange
  patchdateRange(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch device (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching device.
  #
  # Equivalent to PATCH /device
  patchdevice(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch deviceindividual (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching deviceindividual.
  #
  # Equivalent to PATCH /deviceIndividual
  patchdeviceIndividual(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch submissions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching submissions.
  #
  # Equivalent to PATCH /document
  patchdocument(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch download request (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching download request.
  #
  # Equivalent to PATCH /downloadRequest
  patchdownloadRequest(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch endagerment object (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching endagerment object.
  #
  # Equivalent to PATCH /endangerment
  patchendangerment(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching event.
  #
  # Equivalent to PATCH /event
  patchevent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch field (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching field.
  #
  # Equivalent to PATCH /field
  patchfield(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch fieldset (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching fieldset.
  #
  # Equivalent to PATCH /fieldset
  patchfieldset(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch form (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching form.
  #
  # Equivalent to PATCH /form
  patchform(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formfooter (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formfooter.
  #
  # Equivalent to PATCH /formFooter
  patchformFooter(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch forminstructions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching forminstructions.
  #
  # Equivalent to PATCH /formInstructions
  patchformInstructions(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formnamedplaceoptions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formnamedplaceoptions.
  #
  # Equivalent to PATCH /formNamedPlaceOptions
  patchformNamedPlaceOptions(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formoptions (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formoptions.
  #
  # Equivalent to PATCH /formOptions
  patchformOptions(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formpermission (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formpermission.
  #
  # Equivalent to PATCH /formPermission
  patchformPermission(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formpermissionperson (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formpermissionperson.
  #
  # Equivalent to PATCH /formPermissionPerson
  patchformPermissionPerson(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formpermissionsingle (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formpermissionsingle.
  #
  # Equivalent to PATCH /formPermissionSingle
  patchformPermissionSingle(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch formseason (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching formseason.
  #
  # Equivalent to PATCH /formSeason
  patchformSeason(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch gathering event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching gathering event.
  #
  # Equivalent to PATCH /gathering
  patchgathering(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch global gathering event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching global gathering event.
  #
  # Equivalent to PATCH /gatheringEvent
  patchgatheringEvent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch keruutapahtuman faktat (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching keruutapahtuman faktat.
  #
  # Equivalent to PATCH /gatheringFact
  patchgatheringFact(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn red list evaluation habitat (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn red list evaluation habitat.
  #
  # Equivalent to PATCH /habitat
  patchhabitat(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch identification (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching identification.
  #
  # Equivalent to PATCH /identification
  patchidentification(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch image (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching image.
  #
  # Equivalent to PATCH /image
  patchimage(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch individual (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching individual.
  #
  # Equivalent to PATCH /individual
  patchindividual(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch informal taxon group (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching informal taxon group.
  #
  # Equivalent to PATCH /informalTaxonGroup
  patchinformalTaxonGroup(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch information system (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching information system.
  #
  # Equivalent to PATCH /informationSystem
  patchinformationSystem(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn red list evaluation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn red list evaluation.
  #
  # Equivalent to PATCH /iucnRedListEvaluation
  patchiucnRedListEvaluation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn evaluation year (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn evaluation year.
  #
  # Equivalent to PATCH /iucnRedListEvaluationYear
  patchiucnRedListEvaluationYear(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn red list evaluation informal taxon group (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn red list evaluation informal taxon group.
  #
  # Equivalent to PATCH /iucnRedListTaxonGroup
  patchiucnRedListTaxonGroup(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch measurement (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching measurement.
  #
  # Equivalent to PATCH /measurement
  patchmeasurement(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch 3d model (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching 3d model.
  #
  # Equivalent to PATCH /model
  patchmodel(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch multimedia (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching multimedia.
  #
  # Equivalent to PATCH /multimedia
  patchmultimedia(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch namedplace (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching namedplace.
  #
  # Equivalent to PATCH /namedPlace
  patchnamedPlace(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch news (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching news.
  #
  # Equivalent to PATCH /news
  patchnews(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch notification (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching notification.
  #
  # Equivalent to PATCH /notification
  patchnotification(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch occurrence (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching occurrence.
  #
  # Equivalent to PATCH /occurrence
  patchoccurrence(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch organization (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching organization.
  #
  # Equivalent to PATCH /organization
  patchorganization(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch pdf (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching pdf.
  #
  # Equivalent to PATCH /pdf
  patchpdf(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch permit (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching permit.
  #
  # Equivalent to PATCH /permit
  patchpermit(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch person (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching person.
  #
  # Equivalent to PATCH /person
  patchperson(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch preparation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching preparation.
  #
  # Equivalent to PATCH /preparation
  patchpreparation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch profile (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching profile.
  #
  # Equivalent to PATCH /profile
  patchprofile(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch publication (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching publication.
  #
  # Equivalent to PATCH /publication
  patchpublication(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this class tell endangerment of a certain area and notes about the area (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this class tell endangerment of a certain area and notes about the area.
  #
  # Equivalent to PATCH /regionalStatus
  patchregionalStatus(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch reserve (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching reserve.
  #
  # Equivalent to PATCH /reserve
  patchreserve(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch specimen sample (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching specimen sample.
  #
  # Equivalent to PATCH /sample
  patchsample(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch satellite tracking project (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching satellite tracking project.
  #
  # Equivalent to PATCH /satelliteTrackingProject
  patchsatelliteTrackingProject(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction class (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction class.
  #
  # Equivalent to PATCH /specimenTransaction
  patchspecimenTransaction(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction event.
  #
  # Equivalent to PATCH /specimenTransactionEvent
  patchspecimenTransactionEvent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch subunit (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching subunit.
  #
  # Equivalent to PATCH /subUnit
  patchsubUnit(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch tag (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching tag.
  #
  # Equivalent to PATCH /tag
  patchtag(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch taxon (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching taxon.
  #
  # Equivalent to PATCH /taxon
  patchtaxon(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch completeness of census (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching completeness of census.
  #
  # Equivalent to PATCH /taxonCensus
  patchtaxonCensus(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch taxon concept (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching taxon concept.
  #
  # Equivalent to PATCH /taxonConcept
  patchtaxonConcept(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch iucn editors (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching iucn editors.
  #
  # Equivalent to PATCH /taxonGroupIucnEditors
  patchtaxonGroupIucnEditors(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch taxon interaction (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching taxon interaction.
  #
  # Equivalent to PATCH /taxonInteraction
  patchtaxonInteraction(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch instances of this class are a taxon sets (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching instances of this class are a taxon sets.
  #
  # Equivalent to PATCH /taxonSet
  patchtaxonSet(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch trait (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching trait.
  #
  # Equivalent to PATCH /trait
  patchtrait(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch trait enumeration (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching trait enumeration.
  #
  # Equivalent to PATCH /traitEnumValue
  patchtraitEnumValue(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch trait value (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching trait value.
  #
  # Equivalent to PATCH /traitGroup
  patchtraitGroup(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction.
  #
  # Equivalent to PATCH /transaction
  patchtransaction(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction event (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction event.
  #
  # Equivalent to PATCH /transactionEvent
  patchtransactionEvent(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch transaction item (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching transaction item.
  #
  # Equivalent to PATCH /transactionItem
  patchtransactionItem(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch translation (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching translation.
  #
  # Equivalent to PATCH /translation
  patchtranslation(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch identification (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching identification.
  #
  # Equivalent to PATCH /typeSpecimen
  patchtypeSpecimen(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch specimen (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching specimen.
  #
  # Equivalent to PATCH /unit
  patchunit(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch näytteen / havainnon faktat (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching näytteen / havainnon faktat.
  #
  # Equivalent to PATCH /unitFact
  patchunitFact(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch havainnon keruutiedot (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching havainnon keruutiedot.
  #
  # Equivalent to PATCH /unitGathering
  patchunitGathering(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch unit of measurement (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching unit of measurement.
  #
  # Equivalent to PATCH /unitOfMeasurement
  patchunitOfMeasurement(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch validator (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching validator.
  #
  # Equivalent to PATCH /validator
  patchvalidator(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Patch video (MAX 10000).
  #         You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)
  #         to update every matching video.
  #
  # Equivalent to PATCH /video
  patchvideo(
    # Show result only without saving it
    dryRun: Boolean

    # Limit the change to this many items (MAX 10000)
    limit: Int

    # Query string to search by.
    q: String
    requestBody: EsSearchObjInput
  ): JSON

  # Return list of Bibliographic Resource objects.
  #
  # Equivalent to POST /BibliographicResource/_search
  searchBibliographicResource(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): BibliographicResourceSearch2

  # Return list of Concept objects.
  #
  # Equivalent to POST /Concept/_search
  searchConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ConceptSearch2

  # Return list of Instances of this describe one taxon description context (Pinkka eLearning enviroment) objects.
  #
  # Equivalent to POST /Pinkka/_search
  searchPinkka(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PinkkaSearch2

  # Return list of Administrative status objects.
  #
  # Equivalent to POST /administrativeStatus/_search
  searchadministrativeStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AdministrativeStatusSearch2

  # Return list of agent objects.
  #
  # Equivalent to POST /agent/_search
  searchagent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AgentSearch2

  # Return list of annotation objects.
  #
  # Equivalent to POST /annotation/_search
  searchannotation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AnnotationSearch2

  # Return list of annotationOccurrence objects.
  #
  # Equivalent to POST /annotationOccurrence/_search
  searchannotationOccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AnnotationOccurrenceSearch2

  # Return list of Area objects.
  #
  # Equivalent to POST /area/_search
  searcharea(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AreaSearch2

  # Return list of Audio recording objects.
  #
  # Equivalent to POST /audio/_search
  searchaudio(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): AudioSearch2

  # Return list of Instances of this class are bird song recognition skill levels of a certain area objects.
  #
  # Equivalent to POST /birdSongRecognitionSkillLevel/_search
  searchbirdSongRecognitionSkillLevel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): BirdSongRecognitionSkillLevelSearch2

  # Return list of Branch objects.
  #
  # Equivalent to POST /branch/_search
  searchbranch(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): BranchSearch2

  # Return list of Checklist objects.
  #
  # Equivalent to POST /checklist/_search
  searchchecklist(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ChecklistSearch2

  # Return list of Checklist version objects.
  #
  # Equivalent to POST /checklistVersion/_search
  searchchecklistVersion(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ChecklistVersionSearch2

  # Return list of Collection objects.
  #
  # Equivalent to POST /collection/_search
  searchcollection(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): CollectionSearch2

  # Return list of completeList objects.
  #
  # Equivalent to POST /completeList/_search
  searchcompleteList(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): CompleteListSearch2

  # Return list of Instances of this describe one taxon description context objects.
  #
  # Equivalent to POST /contentContextDescription/_search
  searchcontentContextDescription(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ContentContextDescriptionSearch2

  # Return list of Data field objects.
  #
  # Equivalent to POST /dataField/_search
  searchdataField(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DataFieldSearch2

  # Return list of Tag objects.
  #
  # Equivalent to POST /dataset/_search
  searchdataset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DatasetSearch2

  # Return list of dateRange objects.
  #
  # Equivalent to POST /dateRange/_search
  searchdateRange(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DateRangeSearch2

  # Return list of device objects.
  #
  # Equivalent to POST /device/_search
  searchdevice(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DeviceSearch2

  # Return list of deviceIndividual objects.
  #
  # Equivalent to POST /deviceIndividual/_search
  searchdeviceIndividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DeviceIndividualSearch2

  # Return list of Submissions objects.
  #
  # Equivalent to POST /document/_search
  searchdocument(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DocumentSearch2

  # Return list of Download request objects.
  #
  # Equivalent to POST /downloadRequest/_search
  searchdownloadRequest(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): DownloadRequestSearch2

  # Return list of Endagerment object objects.
  #
  # Equivalent to POST /endangerment/_search
  searchendangerment(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): EndangermentSearch2

  # Return list of event objects.
  #
  # Equivalent to POST /event/_search
  searchevent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): EventSearch2

  # Return list of field objects.
  #
  # Equivalent to POST /field/_search
  searchfield(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FieldSearch2

  # Return list of fieldset objects.
  #
  # Equivalent to POST /fieldset/_search
  searchfieldset(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FieldsetSearch2

  # Return list of form objects.
  #
  # Equivalent to POST /form/_search
  searchform(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormSearch2

  # Return list of formFooter objects.
  #
  # Equivalent to POST /formFooter/_search
  searchformFooter(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormFooterSearch2

  # Return list of formInstructions objects.
  #
  # Equivalent to POST /formInstructions/_search
  searchformInstructions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormInstructionsSearch2

  # Return list of formNamedPlaceOptions objects.
  #
  # Equivalent to POST /formNamedPlaceOptions/_search
  searchformNamedPlaceOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormNamedPlaceOptionsSearch2

  # Return list of formOptions objects.
  #
  # Equivalent to POST /formOptions/_search
  searchformOptions(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormOptionsSearch2

  # Return list of formPermission objects.
  #
  # Equivalent to POST /formPermission/_search
  searchformPermission(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormPermissionSearch2

  # Return list of formPermissionPerson objects.
  #
  # Equivalent to POST /formPermissionPerson/_search
  searchformPermissionPerson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormPermissionPersonSearch2

  # Return list of formPermissionSingle objects.
  #
  # Equivalent to POST /formPermissionSingle/_search
  searchformPermissionSingle(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormPermissionSingleSearch2

  # Return list of formSeason objects.
  #
  # Equivalent to POST /formSeason/_search
  searchformSeason(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): FormSeasonSearch2

  # Return list of Gathering event objects.
  #
  # Equivalent to POST /gathering/_search
  searchgathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): GatheringSearch2

  # Return list of Global gathering event objects.
  #
  # Equivalent to POST /gatheringEvent/_search
  searchgatheringEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): GatheringEventSearch2

  # Return list of Keruutapahtuman faktat objects.
  #
  # Equivalent to POST /gatheringFact/_search
  searchgatheringFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): GatheringFactSearch2

  # Return list of IUCN Red List Evaluation Habitat objects.
  #
  # Equivalent to POST /habitat/_search
  searchhabitat(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): HabitatSearch2

  # Return list of Identification objects.
  #
  # Equivalent to POST /identification/_search
  searchidentification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IdentificationSearch2

  # Return list of Image objects.
  #
  # Equivalent to POST /image/_search
  searchimage(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ImageSearch2

  # Return list of individual objects.
  #
  # Equivalent to POST /individual/_search
  searchindividual(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IndividualSearch2

  # Return list of Informal Taxon Group objects.
  #
  # Equivalent to POST /informalTaxonGroup/_search
  searchinformalTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): InformalTaxonGroupSearch2

  # Return list of Information System objects.
  #
  # Equivalent to POST /informationSystem/_search
  searchinformationSystem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): InformationSystemSearch2

  # Return list of IUCN Red List Evaluation objects.
  #
  # Equivalent to POST /iucnRedListEvaluation/_search
  searchiucnRedListEvaluation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IucnRedListEvaluationSearch2

  # Return list of IUCN Evaluation Year objects.
  #
  # Equivalent to POST /iucnRedListEvaluationYear/_search
  searchiucnRedListEvaluationYear(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IucnRedListEvaluationYearSearch2

  # Return list of IUCN Red List Evaluation Informal Taxon Group objects.
  #
  # Equivalent to POST /iucnRedListTaxonGroup/_search
  searchiucnRedListTaxonGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): IucnRedListTaxonGroupSearch2

  # Return list of measurement objects.
  #
  # Equivalent to POST /measurement/_search
  searchmeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): MeasurementSearch2

  # Return list of 3D model objects.
  #
  # Equivalent to POST /model/_search
  searchmodel(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ModelSearch2

  # Return list of multimedia objects.
  #
  # Equivalent to POST /multimedia/_search
  searchmultimedia(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): MultimediaSearch2

  # Return list of namedPlace objects.
  #
  # Equivalent to POST /namedPlace/_search
  searchnamedPlace(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): NamedPlaceSearch2

  # Return list of News objects.
  #
  # Equivalent to POST /news/_search
  searchnews(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): NewsSearch2

  # Return list of notification objects.
  #
  # Equivalent to POST /notification/_search
  searchnotification(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): NotificationSearch2

  # Return list of Occurrence objects.
  #
  # Equivalent to POST /occurrence/_search
  searchoccurrence(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): OccurrenceSearch2

  # Return list of Organization objects.
  #
  # Equivalent to POST /organization/_search
  searchorganization(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): OrganizationSearch2

  # Return list of PDF objects.
  #
  # Equivalent to POST /pdf/_search
  searchpdf(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PdfSearch2

  # Return list of permit objects.
  #
  # Equivalent to POST /permit/_search
  searchpermit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PermitSearch2

  # Return list of Person objects.
  #
  # Equivalent to POST /person/_search
  searchperson(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PersonSearch2

  # Return list of preparation objects.
  #
  # Equivalent to POST /preparation/_search
  searchpreparation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PreparationSearch2

  # Return list of profile objects.
  #
  # Equivalent to POST /profile/_search
  searchprofile(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ProfileSearch2

  # Return list of Publication objects.
  #
  # Equivalent to POST /publication/_search
  searchpublication(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): PublicationSearch2

  # Return list of Instances of this class tell endangerment of a certain area and notes about the area objects.
  #
  # Equivalent to POST /regionalStatus/_search
  searchregionalStatus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): RegionalStatusSearch2

  # Return list of reserve objects.
  #
  # Equivalent to POST /reserve/_search
  searchreserve(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ReserveSearch2

  # Return list of Specimen sample objects.
  #
  # Equivalent to POST /sample/_search
  searchsample(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SampleSearch2

  # Return list of Satellite Tracking Project objects.
  #
  # Equivalent to POST /satelliteTrackingProject/_search
  searchsatelliteTrackingProject(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SatelliteTrackingProjectSearch2

  # Return list of Transaction class objects.
  #
  # Equivalent to POST /specimenTransaction/_search
  searchspecimenTransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SpecimenTransactionSearch2

  # Return list of Transaction Event objects.
  #
  # Equivalent to POST /specimenTransactionEvent/_search
  searchspecimenTransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SpecimenTransactionEventSearch2

  # Return list of subUnit objects.
  #
  # Equivalent to POST /subUnit/_search
  searchsubUnit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): SubUnitSearch2

  # Return list of tag objects.
  #
  # Equivalent to POST /tag/_search
  searchtag(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TagSearch2

  # Return list of Taxon objects.
  #
  # Equivalent to POST /taxon/_search
  searchtaxon(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonSearch2

  # Return list of Completeness of census objects.
  #
  # Equivalent to POST /taxonCensus/_search
  searchtaxonCensus(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonCensusSearch2

  # Return list of Taxon concept objects.
  #
  # Equivalent to POST /taxonConcept/_search
  searchtaxonConcept(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonConceptSearch2

  # Return list of IUCN Editors objects.
  #
  # Equivalent to POST /taxonGroupIucnEditors/_search
  searchtaxonGroupIucnEditors(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonGroupIucnEditorsSearch2

  # Return list of Taxon interaction objects.
  #
  # Equivalent to POST /taxonInteraction/_search
  searchtaxonInteraction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonInteractionSearch2

  # Return list of Instances of this class are a taxon sets objects.
  #
  # Equivalent to POST /taxonSet/_search
  searchtaxonSet(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TaxonSetSearch2

  # Return list of Trait objects.
  #
  # Equivalent to POST /trait/_search
  searchtrait(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TraitSearch2

  # Return list of Trait enumeration objects.
  #
  # Equivalent to POST /traitEnumValue/_search
  searchtraitEnumValue(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TraitEnumValueSearch2

  # Return list of Trait value objects.
  #
  # Equivalent to POST /traitGroup/_search
  searchtraitGroup(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TraitGroupSearch2

  # Return list of Transaction objects.
  #
  # Equivalent to POST /transaction/_search
  searchtransaction(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TransactionSearch2

  # Return list of Transaction Event objects.
  #
  # Equivalent to POST /transactionEvent/_search
  searchtransactionEvent(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TransactionEventSearch2

  # Return list of Transaction Item objects.
  #
  # Equivalent to POST /transactionItem/_search
  searchtransactionItem(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TransactionItemSearch2

  # Return list of translation objects.
  #
  # Equivalent to POST /translation/_search
  searchtranslation(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TranslationSearch2

  # Return list of Identification objects.
  #
  # Equivalent to POST /typeSpecimen/_search
  searchtypeSpecimen(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): TypeSpecimenSearch2

  # Return list of Specimen objects.
  #
  # Equivalent to POST /unit/_search
  searchunit(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitSearch2

  # Return list of Näytteen / havainnon faktat objects.
  #
  # Equivalent to POST /unitFact/_search
  searchunitFact(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitFactSearch2

  # Return list of Havainnon keruutiedot objects.
  #
  # Equivalent to POST /unitGathering/_search
  searchunitGathering(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitGatheringSearch2

  # Return list of Unit of measurement objects.
  #
  # Equivalent to POST /unitOfMeasurement/_search
  searchunitOfMeasurement(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): UnitOfMeasurementSearch2

  # Return list of validator objects.
  #
  # Equivalent to POST /validator/_search
  searchvalidator(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): ValidatorSearch2

  # Return list of Video objects.
  #
  # Equivalent to POST /video/_search
  searchvideo(
    # Comma separated list of fields to return
    fields: String

    # Page number
    page: Int

    # Page size
    pageSize: Int

    # Query string to search by.
    q: String

    # Elasticsearch search query
    requestBody: JSON

    # Sort by
    sort: String
  ): VideoSearch2

  # Store Bibliographic Resource object(s)
  #
  # Equivalent to POST /BibliographicResource
  storeBibliographicResource(requestBody: BibliographicResource2Input): BibliographicResource2

  # Store Concept object(s)
  #
  # Equivalent to POST /Concept
  storeConcept(requestBody: Concept2Input): Concept2

  # Store Instances of this describe one taxon description context (Pinkka eLearning enviroment) object(s)
  #
  # Equivalent to POST /Pinkka
  storePinkka(requestBody: Pinkka2Input): Pinkka2

  # Store Administrative status object(s)
  #
  # Equivalent to POST /administrativeStatus
  storeadministrativeStatus(requestBody: AdministrativeStatus2Input): AdministrativeStatus2

  # Store agent object(s)
  #
  # Equivalent to POST /agent
  storeagent(requestBody: Agent2Input): Agent2

  # Store annotation object(s)
  #
  # Equivalent to POST /annotation
  storeannotation(requestBody: Annotation2Input): Annotation2

  # Store annotationOccurrence object(s)
  #
  # Equivalent to POST /annotationOccurrence
  storeannotationOccurrence(requestBody: AnnotationOccurrenceInput): AnnotationOccurrence

  # Store Area object(s)
  #
  # Equivalent to POST /area
  storearea(requestBody: Area2Input): Area2

  # Store Audio recording object(s)
  #
  # Equivalent to POST /audio
  storeaudio(requestBody: Audio2Input): Audio2

  # Store Instances of this class are bird song recognition skill levels of a certain area object(s)
  #
  # Equivalent to POST /birdSongRecognitionSkillLevel
  storebirdSongRecognitionSkillLevel(requestBody: BirdSongRecognitionSkillLevel2Input): BirdSongRecognitionSkillLevel2

  # Store Branch object(s)
  #
  # Equivalent to POST /branch
  storebranch(requestBody: Branch2Input): Branch2

  # Store Checklist object(s)
  #
  # Equivalent to POST /checklist
  storechecklist(requestBody: Checklist2Input): Checklist2

  # Store Checklist version object(s)
  #
  # Equivalent to POST /checklistVersion
  storechecklistVersion(requestBody: ChecklistVersion2Input): ChecklistVersion2

  # Store Collection object(s)
  #
  # Equivalent to POST /collection
  storecollection(requestBody: Collection2Input): Collection2

  # Store completeList object(s)
  #
  # Equivalent to POST /completeList
  storecompleteList(requestBody: CompleteList2Input): CompleteList2

  # Store Instances of this describe one taxon description context object(s)
  #
  # Equivalent to POST /contentContextDescription
  storecontentContextDescription(requestBody: ContentContextDescription2Input): ContentContextDescription2

  # Store Data field object(s)
  #
  # Equivalent to POST /dataField
  storedataField(requestBody: DataField2Input): DataField2

  # Store Tag object(s)
  #
  # Equivalent to POST /dataset
  storedataset(requestBody: Dataset2Input): Dataset2

  # Store dateRange object(s)
  #
  # Equivalent to POST /dateRange
  storedateRange(requestBody: DateRange2Input): DateRange2

  # Store device object(s)
  #
  # Equivalent to POST /device
  storedevice(requestBody: Device2Input): Device2

  # Store deviceIndividual object(s)
  #
  # Equivalent to POST /deviceIndividual
  storedeviceIndividual(requestBody: DeviceIndividual2Input): DeviceIndividual2

  # Store Submissions object(s)
  #
  # Equivalent to POST /document
  storedocument(requestBody: Document2Input): Document2

  # Store Download request object(s)
  #
  # Equivalent to POST /downloadRequest
  storedownloadRequest(requestBody: DownloadRequest2Input): DownloadRequest2

  # Store Endagerment object object(s)
  #
  # Equivalent to POST /endangerment
  storeendangerment(requestBody: Endangerment2Input): Endangerment2

  # Store event object(s)
  #
  # Equivalent to POST /event
  storeevent(requestBody: Event3Input): Event3

  # Store field object(s)
  #
  # Equivalent to POST /field
  storefield(requestBody: Field2Input): Field2

  # Store fieldset object(s)
  #
  # Equivalent to POST /fieldset
  storefieldset(requestBody: Fieldset2Input): Fieldset2

  # Store form object(s)
  #
  # Equivalent to POST /form
  storeform(requestBody: Form2Input): Form2

  # Store formFooter object(s)
  #
  # Equivalent to POST /formFooter
  storeformFooter(requestBody: FormFooterInput): FormFooter

  # Store formInstructions object(s)
  #
  # Equivalent to POST /formInstructions
  storeformInstructions(requestBody: FormInstructions2Input): FormInstructions2

  # Store formNamedPlaceOptions object(s)
  #
  # Equivalent to POST /formNamedPlaceOptions
  storeformNamedPlaceOptions(requestBody: FormNamedPlaceOptionsInput): FormNamedPlaceOptions

  # Store formOptions object(s)
  #
  # Equivalent to POST /formOptions
  storeformOptions(requestBody: FormOptionsInput): FormOptions

  # Store formPermission object(s)
  #
  # Equivalent to POST /formPermission
  storeformPermission(requestBody: FormPermission2Input): FormPermission2

  # Store formPermissionPerson object(s)
  #
  # Equivalent to POST /formPermissionPerson
  storeformPermissionPerson(requestBody: FormPermissionPerson2Input): FormPermissionPerson2

  # Store formPermissionSingle object(s)
  #
  # Equivalent to POST /formPermissionSingle
  storeformPermissionSingle(requestBody: FormPermissionSingle2Input): FormPermissionSingle2

  # Store formSeason object(s)
  #
  # Equivalent to POST /formSeason
  storeformSeason(requestBody: FormSeasonInput): FormSeason

  # Store Gathering event object(s)
  #
  # Equivalent to POST /gathering
  storegathering(requestBody: GatheringInput): Gathering

  # Store Global gathering event object(s)
  #
  # Equivalent to POST /gatheringEvent
  storegatheringEvent(requestBody: GatheringEventInput): GatheringEvent

  # Store Keruutapahtuman faktat object(s)
  #
  # Equivalent to POST /gatheringFact
  storegatheringFact(requestBody: GatheringFactInput): GatheringFact

  # Store IUCN Red List Evaluation Habitat object(s)
  #
  # Equivalent to POST /habitat
  storehabitat(requestBody: Habitat3Input): Habitat3

  # Store Identification object(s)
  #
  # Equivalent to POST /identification
  storeidentification(requestBody: IdentificationInput): Identification

  # Store Image object(s)
  #
  # Equivalent to POST /image
  storeimage(requestBody: Image2Input): Image2

  # Store individual object(s)
  #
  # Equivalent to POST /individual
  storeindividual(requestBody: Individual2Input): Individual2

  # Store Informal Taxon Group object(s)
  #
  # Equivalent to POST /informalTaxonGroup
  storeinformalTaxonGroup(requestBody: InformalTaxonGroup2Input): InformalTaxonGroup2

  # Store Information System object(s)
  #
  # Equivalent to POST /informationSystem
  storeinformationSystem(requestBody: InformationSystem2Input): InformationSystem2

  # Store IUCN Red List Evaluation object(s)
  #
  # Equivalent to POST /iucnRedListEvaluation
  storeiucnRedListEvaluation(requestBody: IucnRedListEvaluation2Input): IucnRedListEvaluation2

  # Store IUCN Evaluation Year object(s)
  #
  # Equivalent to POST /iucnRedListEvaluationYear
  storeiucnRedListEvaluationYear(requestBody: IucnRedListEvaluationYear2Input): IucnRedListEvaluationYear2

  # Store IUCN Red List Evaluation Informal Taxon Group object(s)
  #
  # Equivalent to POST /iucnRedListTaxonGroup
  storeiucnRedListTaxonGroup(requestBody: IucnRedListTaxonGroup2Input): IucnRedListTaxonGroup2

  # Store measurement object(s)
  #
  # Equivalent to POST /measurement
  storemeasurement(requestBody: MeasurementInput): Measurement

  # Store 3D model object(s)
  #
  # Equivalent to POST /model
  storemodel(requestBody: Model2Input): Model2

  # Store multimedia object(s)
  #
  # Equivalent to POST /multimedia
  storemultimedia(requestBody: Multimedia2Input): Multimedia2

  # Store namedPlace object(s)
  #
  # Equivalent to POST /namedPlace
  storenamedPlace(requestBody: NamedPlace2Input): NamedPlace2

  # Store News object(s)
  #
  # Equivalent to POST /news
  storenews(requestBody: News2Input): News2

  # Store notification object(s)
  #
  # Equivalent to POST /notification
  storenotification(requestBody: Notification2Input): Notification2

  # Store Occurrence object(s)
  #
  # Equivalent to POST /occurrence
  storeoccurrence(requestBody: Occurrence2Input): Occurrence2

  # Store Organization object(s)
  #
  # Equivalent to POST /organization
  storeorganization(requestBody: Organization2Input): Organization2

  # Store PDF object(s)
  #
  # Equivalent to POST /pdf
  storepdf(requestBody: Pdf2Input): Pdf2

  # Store permit object(s)
  #
  # Equivalent to POST /permit
  storepermit(requestBody: Permit2Input): Permit2

  # Store Person object(s)
  #
  # Equivalent to POST /person
  storeperson(requestBody: Person2Input): Person2

  # Store preparation object(s)
  #
  # Equivalent to POST /preparation
  storepreparation(requestBody: Preparation2Input): Preparation2

  # Store profile object(s)
  #
  # Equivalent to POST /profile
  storeprofile(requestBody: Profile2Input): Profile2

  # Store Publication object(s)
  #
  # Equivalent to POST /publication
  storepublication(requestBody: Publication3Input): Publication3

  # Store Instances of this class tell endangerment of a certain area and notes about the area object(s)
  #
  # Equivalent to POST /regionalStatus
  storeregionalStatus(requestBody: RegionalStatus2Input): RegionalStatus2

  # Store reserve object(s)
  #
  # Equivalent to POST /reserve
  storereserve(requestBody: ReserveInput): Reserve

  # Store Specimen sample object(s)
  #
  # Equivalent to POST /sample
  storesample(requestBody: Sample2Input): Sample2

  # Store Satellite Tracking Project object(s)
  #
  # Equivalent to POST /satelliteTrackingProject
  storesatelliteTrackingProject(requestBody: SatelliteTrackingProject2Input): SatelliteTrackingProject2

  # Store Transaction class object(s)
  #
  # Equivalent to POST /specimenTransaction
  storespecimenTransaction(requestBody: SpecimenTransaction2Input): SpecimenTransaction2

  # Store Transaction Event object(s)
  #
  # Equivalent to POST /specimenTransactionEvent
  storespecimenTransactionEvent(requestBody: SpecimenTransactionEventInput): SpecimenTransactionEvent

  # Store subUnit object(s)
  #
  # Equivalent to POST /subUnit
  storesubUnit(requestBody: SubUnit2Input): SubUnit2

  # Store tag object(s)
  #
  # Equivalent to POST /tag
  storetag(requestBody: Tag2Input): Tag2

  # Store Taxon object(s)
  #
  # Equivalent to POST /taxon
  storetaxon(requestBody: Taxon2Input): Taxon2

  # Store Completeness of census object(s)
  #
  # Equivalent to POST /taxonCensus
  storetaxonCensus(requestBody: TaxonCensus2Input): TaxonCensus2

  # Store Taxon concept object(s)
  #
  # Equivalent to POST /taxonConcept
  storetaxonConcept(requestBody: TaxonConcept2Input): TaxonConcept2

  # Store IUCN Editors object(s)
  #
  # Equivalent to POST /taxonGroupIucnEditors
  storetaxonGroupIucnEditors(requestBody: TaxonGroupIucnEditors2Input): TaxonGroupIucnEditors2

  # Store Taxon interaction object(s)
  #
  # Equivalent to POST /taxonInteraction
  storetaxonInteraction(requestBody: TaxonInteraction2Input): TaxonInteraction2

  # Store Instances of this class are a taxon sets object(s)
  #
  # Equivalent to POST /taxonSet
  storetaxonSet(requestBody: TaxonSet2Input): TaxonSet2

  # Store Trait object(s)
  #
  # Equivalent to POST /trait
  storetrait(requestBody: Trait2Input): Trait2

  # Store Trait enumeration object(s)
  #
  # Equivalent to POST /traitEnumValue
  storetraitEnumValue(requestBody: TraitEnumValue2Input): TraitEnumValue2

  # Store Trait value object(s)
  #
  # Equivalent to POST /traitGroup
  storetraitGroup(requestBody: TraitGroup2Input): TraitGroup2

  # Store Transaction object(s)
  #
  # Equivalent to POST /transaction
  storetransaction(requestBody: Transaction2Input): Transaction2

  # Store Transaction Event object(s)
  #
  # Equivalent to POST /transactionEvent
  storetransactionEvent(requestBody: TransactionEvent2Input): TransactionEvent2

  # Store Transaction Item object(s)
  #
  # Equivalent to POST /transactionItem
  storetransactionItem(requestBody: TransactionItemInput): TransactionItem

  # Store translation object(s)
  #
  # Equivalent to POST /translation
  storetranslation(requestBody: Translation2Input): Translation2

  # Store Identification object(s)
  #
  # Equivalent to POST /typeSpecimen
  storetypeSpecimen(requestBody: TypeSpecimenInput): TypeSpecimen

  # Store Specimen object(s)
  #
  # Equivalent to POST /unit
  storeunit(requestBody: UnitInput): Unit

  # Store Näytteen / havainnon faktat object(s)
  #
  # Equivalent to POST /unitFact
  storeunitFact(requestBody: UnitFactInput): UnitFact

  # Store Havainnon keruutiedot object(s)
  #
  # Equivalent to POST /unitGathering
  storeunitGathering(requestBody: UnitGatheringInput): UnitGathering

  # Store Unit of measurement object(s)
  #
  # Equivalent to POST /unitOfMeasurement
  storeunitOfMeasurement(requestBody: UnitOfMeasurement2Input): UnitOfMeasurement2

  # Store validator object(s)
  #
  # Equivalent to POST /validator
  storevalidator(requestBody: Validator2Input): Validator2

  # Store Video object(s)
  #
  # Equivalent to POST /video
  storevideo(requestBody: Video2Input): Video2

  # Store Bibliographic Resource
  #
  # Equivalent to PUT /BibliographicResource/{id}
  updateBibliographicResource(
    # Id for the Bibliographic Resource
    id: String!
    requestBody: BibliographicResource2Input
  ): BibliographicResource2

  # Store Concept
  #
  # Equivalent to PUT /Concept/{id}
  updateConcept(
    # Id for the Concept
    id: String!
    requestBody: Concept2Input
  ): Concept2

  # Store Instances of this describe one taxon description context (Pinkka eLearning enviroment)
  #
  # Equivalent to PUT /Pinkka/{id}
  updatePinkka(
    # Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)
    id: String!
    requestBody: Pinkka2Input
  ): Pinkka2

  # Store Administrative status
  #
  # Equivalent to PUT /administrativeStatus/{id}
  updateadministrativeStatus(
    # Id for the Administrative status
    id: String!
    requestBody: AdministrativeStatus2Input
  ): AdministrativeStatus2

  # Store agent
  #
  # Equivalent to PUT /agent/{id}
  updateagent(
    # Id for the agent
    id: String!
    requestBody: Agent2Input
  ): Agent2

  # Store annotation
  #
  # Equivalent to PUT /annotation/{id}
  updateannotation(
    # Id for the annotation
    id: String!
    requestBody: Annotation2Input
  ): Annotation2

  # Store annotationOccurrence
  #
  # Equivalent to PUT /annotationOccurrence/{id}
  updateannotationOccurrence(
    # Id for the annotationOccurrence
    id: String!
    requestBody: AnnotationOccurrenceInput
  ): AnnotationOccurrence

  # Store Area
  #
  # Equivalent to PUT /area/{id}
  updatearea(
    # Id for the Area
    id: String!
    requestBody: Area2Input
  ): Area2

  # Store Audio recording
  #
  # Equivalent to PUT /audio/{id}
  updateaudio(
    # Id for the Audio recording
    id: String!
    requestBody: Audio2Input
  ): Audio2

  # Store Instances of this class are bird song recognition skill levels of a certain area
  #
  # Equivalent to PUT /birdSongRecognitionSkillLevel/{id}
  updatebirdSongRecognitionSkillLevel(
    # Id for the Instances of this class are bird song recognition skill levels of a certain area
    id: String!
    requestBody: BirdSongRecognitionSkillLevel2Input
  ): BirdSongRecognitionSkillLevel2

  # Store Branch
  #
  # Equivalent to PUT /branch/{id}
  updatebranch(
    # Id for the Branch
    id: String!
    requestBody: Branch2Input
  ): Branch2

  # Store Checklist
  #
  # Equivalent to PUT /checklist/{id}
  updatechecklist(
    # Id for the Checklist
    id: String!
    requestBody: Checklist2Input
  ): Checklist2

  # Store Checklist version
  #
  # Equivalent to PUT /checklistVersion/{id}
  updatechecklistVersion(
    # Id for the Checklist version
    id: String!
    requestBody: ChecklistVersion2Input
  ): ChecklistVersion2

  # Store Collection
  #
  # Equivalent to PUT /collection/{id}
  updatecollection(
    # Id for the Collection
    id: String!
    requestBody: Collection2Input
  ): Collection2

  # Store completeList
  #
  # Equivalent to PUT /completeList/{id}
  updatecompleteList(
    # Id for the completeList
    id: String!
    requestBody: CompleteList2Input
  ): CompleteList2

  # Store Instances of this describe one taxon description context
  #
  # Equivalent to PUT /contentContextDescription/{id}
  updatecontentContextDescription(
    # Id for the Instances of this describe one taxon description context
    id: String!
    requestBody: ContentContextDescription2Input
  ): ContentContextDescription2

  # Store Data field
  #
  # Equivalent to PUT /dataField/{id}
  updatedataField(
    # Id for the Data field
    id: String!
    requestBody: DataField2Input
  ): DataField2

  # Store Tag
  #
  # Equivalent to PUT /dataset/{id}
  updatedataset(
    # Id for the Tag
    id: String!
    requestBody: Dataset2Input
  ): Dataset2

  # Store dateRange
  #
  # Equivalent to PUT /dateRange/{id}
  updatedateRange(
    # Id for the dateRange
    id: String!
    requestBody: DateRange2Input
  ): DateRange2

  # Store device
  #
  # Equivalent to PUT /device/{id}
  updatedevice(
    # Id for the device
    id: String!
    requestBody: Device2Input
  ): Device2

  # Store deviceIndividual
  #
  # Equivalent to PUT /deviceIndividual/{id}
  updatedeviceIndividual(
    # Id for the deviceIndividual
    id: String!
    requestBody: DeviceIndividual2Input
  ): DeviceIndividual2

  # Store Submissions
  #
  # Equivalent to PUT /document/{id}
  updatedocument(
    # Id for the Submissions
    id: String!
    requestBody: Document2Input
  ): Document2

  # Store Download request
  #
  # Equivalent to PUT /downloadRequest/{id}
  updatedownloadRequest(
    # Id for the Download request
    id: String!
    requestBody: DownloadRequest2Input
  ): DownloadRequest2

  # Store Endagerment object
  #
  # Equivalent to PUT /endangerment/{id}
  updateendangerment(
    # Id for the Endagerment object
    id: String!
    requestBody: Endangerment2Input
  ): Endangerment2

  # Store event
  #
  # Equivalent to PUT /event/{id}
  updateevent(
    # Id for the event
    id: String!
    requestBody: Event3Input
  ): Event3

  # Store field
  #
  # Equivalent to PUT /field/{id}
  updatefield(
    # Id for the field
    id: String!
    requestBody: Field2Input
  ): Field2

  # Store fieldset
  #
  # Equivalent to PUT /fieldset/{id}
  updatefieldset(
    # Id for the fieldset
    id: String!
    requestBody: Fieldset2Input
  ): Fieldset2

  # Store form
  #
  # Equivalent to PUT /form/{id}
  updateform(
    # Id for the form
    id: String!
    requestBody: Form2Input
  ): Form2

  # Store formFooter
  #
  # Equivalent to PUT /formFooter/{id}
  updateformFooter(
    # Id for the formFooter
    id: String!
    requestBody: FormFooterInput
  ): FormFooter

  # Store formInstructions
  #
  # Equivalent to PUT /formInstructions/{id}
  updateformInstructions(
    # Id for the formInstructions
    id: String!
    requestBody: FormInstructions2Input
  ): FormInstructions2

  # Store formNamedPlaceOptions
  #
  # Equivalent to PUT /formNamedPlaceOptions/{id}
  updateformNamedPlaceOptions(
    # Id for the formNamedPlaceOptions
    id: String!
    requestBody: FormNamedPlaceOptionsInput
  ): FormNamedPlaceOptions

  # Store formOptions
  #
  # Equivalent to PUT /formOptions/{id}
  updateformOptions(
    # Id for the formOptions
    id: String!
    requestBody: FormOptionsInput
  ): FormOptions

  # Store formPermission
  #
  # Equivalent to PUT /formPermission/{id}
  updateformPermission(
    # Id for the formPermission
    id: String!
    requestBody: FormPermission2Input
  ): FormPermission2

  # Store formPermissionPerson
  #
  # Equivalent to PUT /formPermissionPerson/{id}
  updateformPermissionPerson(
    # Id for the formPermissionPerson
    id: String!
    requestBody: FormPermissionPerson2Input
  ): FormPermissionPerson2

  # Store formPermissionSingle
  #
  # Equivalent to PUT /formPermissionSingle/{id}
  updateformPermissionSingle(
    # Id for the formPermissionSingle
    id: String!
    requestBody: FormPermissionSingle2Input
  ): FormPermissionSingle2

  # Store formSeason
  #
  # Equivalent to PUT /formSeason/{id}
  updateformSeason(
    # Id for the formSeason
    id: String!
    requestBody: FormSeasonInput
  ): FormSeason

  # Store Gathering event
  #
  # Equivalent to PUT /gathering/{id}
  updategathering(
    # Id for the Gathering event
    id: String!
    requestBody: GatheringInput
  ): Gathering

  # Store Global gathering event
  #
  # Equivalent to PUT /gatheringEvent/{id}
  updategatheringEvent(
    # Id for the Global gathering event
    id: String!
    requestBody: GatheringEventInput
  ): GatheringEvent

  # Store Keruutapahtuman faktat
  #
  # Equivalent to PUT /gatheringFact/{id}
  updategatheringFact(
    # Id for the Keruutapahtuman faktat
    id: String!
    requestBody: GatheringFactInput
  ): GatheringFact

  # Store IUCN Red List Evaluation Habitat
  #
  # Equivalent to PUT /habitat/{id}
  updatehabitat(
    # Id for the IUCN Red List Evaluation Habitat
    id: String!
    requestBody: Habitat3Input
  ): Habitat3

  # Store Identification
  #
  # Equivalent to PUT /identification/{id}
  updateidentification(
    # Id for the Identification
    id: String!
    requestBody: IdentificationInput
  ): Identification

  # Store Image
  #
  # Equivalent to PUT /image/{id}
  updateimage(
    # Id for the Image
    id: String!
    requestBody: Image2Input
  ): Image2

  # Store individual
  #
  # Equivalent to PUT /individual/{id}
  updateindividual(
    # Id for the individual
    id: String!
    requestBody: Individual2Input
  ): Individual2

  # Store Informal Taxon Group
  #
  # Equivalent to PUT /informalTaxonGroup/{id}
  updateinformalTaxonGroup(
    # Id for the Informal Taxon Group
    id: String!
    requestBody: InformalTaxonGroup2Input
  ): InformalTaxonGroup2

  # Store Information System
  #
  # Equivalent to PUT /informationSystem/{id}
  updateinformationSystem(
    # Id for the Information System
    id: String!
    requestBody: InformationSystem2Input
  ): InformationSystem2

  # Store IUCN Red List Evaluation
  #
  # Equivalent to PUT /iucnRedListEvaluation/{id}
  updateiucnRedListEvaluation(
    # Id for the IUCN Red List Evaluation
    id: String!
    requestBody: IucnRedListEvaluation2Input
  ): IucnRedListEvaluation2

  # Store IUCN Evaluation Year
  #
  # Equivalent to PUT /iucnRedListEvaluationYear/{id}
  updateiucnRedListEvaluationYear(
    # Id for the IUCN Evaluation Year
    id: String!
    requestBody: IucnRedListEvaluationYear2Input
  ): IucnRedListEvaluationYear2

  # Store IUCN Red List Evaluation Informal Taxon Group
  #
  # Equivalent to PUT /iucnRedListTaxonGroup/{id}
  updateiucnRedListTaxonGroup(
    # Id for the IUCN Red List Evaluation Informal Taxon Group
    id: String!
    requestBody: IucnRedListTaxonGroup2Input
  ): IucnRedListTaxonGroup2

  # Store measurement
  #
  # Equivalent to PUT /measurement/{id}
  updatemeasurement(
    # Id for the measurement
    id: String!
    requestBody: MeasurementInput
  ): Measurement

  # Store 3D model
  #
  # Equivalent to PUT /model/{id}
  updatemodel(
    # Id for the 3D model
    id: String!
    requestBody: Model2Input
  ): Model2

  # Store multimedia
  #
  # Equivalent to PUT /multimedia/{id}
  updatemultimedia(
    # Id for the multimedia
    id: String!
    requestBody: Multimedia2Input
  ): Multimedia2

  # Store namedPlace
  #
  # Equivalent to PUT /namedPlace/{id}
  updatenamedPlace(
    # Id for the namedPlace
    id: String!
    requestBody: NamedPlace2Input
  ): NamedPlace2

  # Store News
  #
  # Equivalent to PUT /news/{id}
  updatenews(
    # Id for the News
    id: String!
    requestBody: News2Input
  ): News2

  # Store notification
  #
  # Equivalent to PUT /notification/{id}
  updatenotification(
    # Id for the notification
    id: String!
    requestBody: Notification2Input
  ): Notification2

  # Store Occurrence
  #
  # Equivalent to PUT /occurrence/{id}
  updateoccurrence(
    # Id for the Occurrence
    id: String!
    requestBody: Occurrence2Input
  ): Occurrence2

  # Store Organization
  #
  # Equivalent to PUT /organization/{id}
  updateorganization(
    # Id for the Organization
    id: String!
    requestBody: Organization2Input
  ): Organization2

  # Store PDF
  #
  # Equivalent to PUT /pdf/{id}
  updatepdf(
    # Id for the PDF
    id: String!
    requestBody: Pdf2Input
  ): Pdf2

  # Store permit
  #
  # Equivalent to PUT /permit/{id}
  updatepermit(
    # Id for the permit
    id: String!
    requestBody: Permit2Input
  ): Permit2

  # Store Person
  #
  # Equivalent to PUT /person/{id}
  updateperson(
    # Id for the Person
    id: String!
    requestBody: Person2Input
  ): Person2

  # Store preparation
  #
  # Equivalent to PUT /preparation/{id}
  updatepreparation(
    # Id for the preparation
    id: String!
    requestBody: Preparation2Input
  ): Preparation2

  # Store profile
  #
  # Equivalent to PUT /profile/{id}
  updateprofile(
    # Id for the profile
    id: String!
    requestBody: Profile2Input
  ): Profile2

  # Store Publication
  #
  # Equivalent to PUT /publication/{id}
  updatepublication(
    # Id for the Publication
    id: String!
    requestBody: Publication3Input
  ): Publication3

  # Store Instances of this class tell endangerment of a certain area and notes about the area
  #
  # Equivalent to PUT /regionalStatus/{id}
  updateregionalStatus(
    # Id for the Instances of this class tell endangerment of a certain area and notes about the area
    id: String!
    requestBody: RegionalStatus2Input
  ): RegionalStatus2

  # Store reserve
  #
  # Equivalent to PUT /reserve/{id}
  updatereserve(
    # Id for the reserve
    id: String!
    requestBody: ReserveInput
  ): Reserve

  # Store Specimen sample
  #
  # Equivalent to PUT /sample/{id}
  updatesample(
    # Id for the Specimen sample
    id: String!
    requestBody: Sample2Input
  ): Sample2

  # Store Satellite Tracking Project
  #
  # Equivalent to PUT /satelliteTrackingProject/{id}
  updatesatelliteTrackingProject(
    # Id for the Satellite Tracking Project
    id: String!
    requestBody: SatelliteTrackingProject2Input
  ): SatelliteTrackingProject2

  # Store Transaction class
  #
  # Equivalent to PUT /specimenTransaction/{id}
  updatespecimenTransaction(
    # Id for the Transaction class
    id: String!
    requestBody: SpecimenTransaction2Input
  ): SpecimenTransaction2

  # Store Transaction Event
  #
  # Equivalent to PUT /specimenTransactionEvent/{id}
  updatespecimenTransactionEvent(
    # Id for the Transaction Event
    id: String!
    requestBody: SpecimenTransactionEventInput
  ): SpecimenTransactionEvent

  # Store subUnit
  #
  # Equivalent to PUT /subUnit/{id}
  updatesubUnit(
    # Id for the subUnit
    id: String!
    requestBody: SubUnit2Input
  ): SubUnit2

  # Store tag
  #
  # Equivalent to PUT /tag/{id}
  updatetag(
    # Id for the tag
    id: String!
    requestBody: Tag2Input
  ): Tag2

  # Store Taxon
  #
  # Equivalent to PUT /taxon/{id}
  updatetaxon(
    # Id for the Taxon
    id: String!
    requestBody: Taxon2Input
  ): Taxon2

  # Store Completeness of census
  #
  # Equivalent to PUT /taxonCensus/{id}
  updatetaxonCensus(
    # Id for the Completeness of census
    id: String!
    requestBody: TaxonCensus2Input
  ): TaxonCensus2

  # Store Taxon concept
  #
  # Equivalent to PUT /taxonConcept/{id}
  updatetaxonConcept(
    # Id for the Taxon concept
    id: String!
    requestBody: TaxonConcept2Input
  ): TaxonConcept2

  # Store IUCN Editors
  #
  # Equivalent to PUT /taxonGroupIucnEditors/{id}
  updatetaxonGroupIucnEditors(
    # Id for the IUCN Editors
    id: String!
    requestBody: TaxonGroupIucnEditors2Input
  ): TaxonGroupIucnEditors2

  # Store Taxon interaction
  #
  # Equivalent to PUT /taxonInteraction/{id}
  updatetaxonInteraction(
    # Id for the Taxon interaction
    id: String!
    requestBody: TaxonInteraction2Input
  ): TaxonInteraction2

  # Store Instances of this class are a taxon sets
  #
  # Equivalent to PUT /taxonSet/{id}
  updatetaxonSet(
    # Id for the Instances of this class are a taxon sets
    id: String!
    requestBody: TaxonSet2Input
  ): TaxonSet2

  # Store Trait
  #
  # Equivalent to PUT /trait/{id}
  updatetrait(
    # Id for the Trait
    id: String!
    requestBody: Trait2Input
  ): Trait2

  # Store Trait enumeration
  #
  # Equivalent to PUT /traitEnumValue/{id}
  updatetraitEnumValue(
    # Id for the Trait enumeration
    id: String!
    requestBody: TraitEnumValue2Input
  ): TraitEnumValue2

  # Store Trait value
  #
  # Equivalent to PUT /traitGroup/{id}
  updatetraitGroup(
    # Id for the Trait value
    id: String!
    requestBody: TraitGroup2Input
  ): TraitGroup2

  # Store Transaction
  #
  # Equivalent to PUT /transaction/{id}
  updatetransaction(
    # Id for the Transaction
    id: String!
    requestBody: Transaction2Input
  ): Transaction2

  # Store Transaction Event
  #
  # Equivalent to PUT /transactionEvent/{id}
  updatetransactionEvent(
    # Id for the Transaction Event
    id: String!
    requestBody: TransactionEvent2Input
  ): TransactionEvent2

  # Store Transaction Item
  #
  # Equivalent to PUT /transactionItem/{id}
  updatetransactionItem(
    # Id for the Transaction Item
    id: String!
    requestBody: TransactionItemInput
  ): TransactionItem

  # Store translation
  #
  # Equivalent to PUT /translation/{id}
  updatetranslation(
    # Id for the translation
    id: String!
    requestBody: Translation2Input
  ): Translation2

  # Store Identification
  #
  # Equivalent to PUT /typeSpecimen/{id}
  updatetypeSpecimen(
    # Id for the Identification
    id: String!
    requestBody: TypeSpecimenInput
  ): TypeSpecimen

  # Store Specimen
  #
  # Equivalent to PUT /unit/{id}
  updateunit(
    # Id for the Specimen
    id: String!
    requestBody: UnitInput
  ): Unit

  # Store Näytteen / havainnon faktat
  #
  # Equivalent to PUT /unitFact/{id}
  updateunitFact(
    # Id for the Näytteen / havainnon faktat
    id: String!
    requestBody: UnitFactInput
  ): UnitFact

  # Store Havainnon keruutiedot
  #
  # Equivalent to PUT /unitGathering/{id}
  updateunitGathering(
    # Id for the Havainnon keruutiedot
    id: String!
    requestBody: UnitGatheringInput
  ): UnitGathering

  # Store Unit of measurement
  #
  # Equivalent to PUT /unitOfMeasurement/{id}
  updateunitOfMeasurement(
    # Id for the Unit of measurement
    id: String!
    requestBody: UnitOfMeasurement2Input
  ): UnitOfMeasurement2

  # Store validator
  #
  # Equivalent to PUT /validator/{id}
  updatevalidator(
    # Id for the validator
    id: String!
    requestBody: Validator2Input
  ): Validator2

  # Store Video
  #
  # Equivalent to PUT /video/{id}
  updatevideo(
    # Id for the Video
    id: String!
    requestBody: Video2Input
  ): Video2
}
