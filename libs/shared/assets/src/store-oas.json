{
  "openapi": "3.0.0",
  "info": {
    "title": "Store",
    "version": "2.0",
    "description": "Store api documentation",
    "contact": {
      "name": "Suomen Lajitietokeskus",
      "email": "helpdesk@laji.fi"
    }
  },
  "paths": {
    "/es-mapping/{type}": {
      "get": {
        "security": [
          {}
        ],
        "tags": [
          "Utilities"
        ],
        "operationId": "getESMapping",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Enpoint name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Elasticsearch mapping.",
        "responses": {
          "200": {
            "description": "a ES mapping.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/json-schema/{type}": {
      "get": {
        "security": [
          {}
        ],
        "tags": [
          "Utilities"
        ],
        "operationId": "getJsonSchema",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Endpoint name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a json schema.",
        "responses": {
          "200": {
            "description": "a json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/json-ld-context/{type}": {
      "get": {
        "security": [
          {}
        ],
        "tags": [
          "Utilities"
        ],
        "operationId": "getJsonLdContext",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Endpoint name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a json-ld context.",
        "responses": {
          "200": {
            "description": "a json-ld context.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "security": [
          {}
        ],
        "tags": [
          "Utilities"
        ],
        "operationId": "getStatus",
        "parameters": [],
        "description": "Heartbeat service to check that the server is working as expected",
        "responses": {
          "200": {
            "description": "status response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "If any health indicator failed the status will be 'error'. If the NestJS app is shutting down but still accepting HTTP requests, the health check will have the 'shutting_down' status.",
                      "type": "string",
                      "enum": [
                        "error",
                        "ok",
                        "shutting_down"
                      ]
                    },
                    "info": {
                      "type": "object",
                      "description": "Object containing information of each health indicator which is of status 'up', or in other words \"healthy\"."
                    },
                    "error": {
                      "type": "object",
                      "description": "Object containing information of each health indicator which is of status 'down', or in other words \"unhealthy\"."
                    },
                    "details": {
                      "type": "object",
                      "description": "Object containing all information of each health indicator"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "security": [
          {}
        ],
        "tags": [
          "Utilities"
        ],
        "operationId": "ping",
        "parameters": [],
        "description": "Heartbeat service to check that the server is alive",
        "responses": {
          "200": {
            "description": "status response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ack": {
                      "description": "Current time on the server",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/BibliographicResource": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "listBibliographicResource",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Bibliographic Resource objects.",
        "responses": {
          "200": {
            "description": "A list of  Bibliographic Resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BibliographicResource"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "storeBibliographicResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BibliographicResource"
              }
            }
          }
        },
        "description": "Store Bibliographic Resource object(s)",
        "responses": {
          "201": {
            "description": "Stored Bibliographic Resource object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BibliographicResource"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "patchBibliographicResource",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch bibliographic resource (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching bibliographic resource.",
        "responses": {
          "200": {
            "description": "A list of  Bibliographic Resource.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BibliographicResource"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/BibliographicResource/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "searchBibliographicResource",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Bibliographic Resource objects.",
        "responses": {
          "200": {
            "description": "A list of  Bibliographic Resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BibliographicResource"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/BibliographicResource/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "getBibliographicResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Bibliographic Resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Bibliographic Resource.",
        "responses": {
          "200": {
            "description": "a Bibliographic Resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BibliographicResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "updateBibliographicResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Bibliographic Resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BibliographicResource"
              }
            }
          }
        },
        "description": "Store Bibliographic Resource",
        "responses": {
          "200": {
            "description": "Stored Bibliographic Resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BibliographicResource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "deleteBibliographicResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Bibliographic Resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Bibliographic Resource",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/BibliographicResource/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfBibliographicResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Bibliographic Resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "description": "Return a Bibliographic Resource.",
        "responses": {
          "200": {
            "description": "a Bibliographic Resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/BibliographicResource/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "BibliographicResource"
        ],
        "operationId": "versionBibliographicResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Bibliographic Resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Bibliographic Resource",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Bibliographic Resource.",
        "responses": {
          "200": {
            "description": "a Bibliographic Resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BibliographicResource"
                }
              }
            }
          }
        }
      }
    },
    "/Concept": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "listConcept",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Concept objects.",
        "responses": {
          "200": {
            "description": "A list of  Concept.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Concept"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "storeConcept",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Concept"
              }
            }
          }
        },
        "description": "Store Concept object(s)",
        "responses": {
          "201": {
            "description": "Stored Concept object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Concept"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "patchConcept",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch concept (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching concept.",
        "responses": {
          "200": {
            "description": "A list of  Concept.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Concept"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/Concept/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "searchConcept",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Concept objects.",
        "responses": {
          "200": {
            "description": "A list of  Concept.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Concept"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/Concept/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "getConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Concept.",
        "responses": {
          "200": {
            "description": "a Concept.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Concept"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "updateConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Concept"
              }
            }
          }
        },
        "description": "Store Concept",
        "responses": {
          "200": {
            "description": "Stored Concept",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Concept"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "deleteConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Concept",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Concept/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Concept"
        ],
        "description": "Return a Concept.",
        "responses": {
          "200": {
            "description": "a Concept.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Concept/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Concept"
        ],
        "operationId": "versionConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Concept",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Concept.",
        "responses": {
          "200": {
            "description": "a Concept.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Concept"
                }
              }
            }
          }
        }
      }
    },
    "/Pinkka": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "listPinkka",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Instances of this describe one taxon description context (Pinkka eLearning enviroment) objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pinkka"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "storePinkka",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pinkka"
              }
            }
          }
        },
        "description": "Store Instances of this describe one taxon description context (Pinkka eLearning enviroment) object(s)",
        "responses": {
          "201": {
            "description": "Stored Instances of this describe one taxon description context (Pinkka eLearning enviroment) object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pinkka"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "patchPinkka",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch instances of this describe one taxon description context (pinkka elearning enviroment) (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching instances of this describe one taxon description context (pinkka elearning enviroment).",
        "responses": {
          "200": {
            "description": "A list of  Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pinkka"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/Pinkka/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "searchPinkka",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Instances of this describe one taxon description context (Pinkka eLearning enviroment) objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pinkka"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/Pinkka/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "getPinkka",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
        "responses": {
          "200": {
            "description": "a Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pinkka"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "updatePinkka",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pinkka"
              }
            }
          }
        },
        "description": "Store Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
        "responses": {
          "200": {
            "description": "Stored Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pinkka"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "deletePinkka",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Pinkka/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfPinkka",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "description": "Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
        "responses": {
          "200": {
            "description": "a Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Pinkka/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Pinkka"
        ],
        "operationId": "versionPinkka",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
        "responses": {
          "200": {
            "description": "a Instances of this describe one taxon description context (Pinkka eLearning enviroment).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pinkka"
                }
              }
            }
          }
        }
      }
    },
    "/administrativeStatus": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "listadministrativeStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Administrative status objects.",
        "responses": {
          "200": {
            "description": "A list of  Administrative status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/administrativeStatus"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "storeadministrativeStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/administrativeStatus"
              }
            }
          }
        },
        "description": "Store Administrative status object(s)",
        "responses": {
          "201": {
            "description": "Stored Administrative status object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/administrativeStatus"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "patchadministrativeStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch administrative status (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching administrative status.",
        "responses": {
          "200": {
            "description": "A list of  Administrative status.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/administrativeStatus"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/administrativeStatus/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "searchadministrativeStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Administrative status objects.",
        "responses": {
          "200": {
            "description": "A list of  Administrative status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/administrativeStatus"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/administrativeStatus/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "getadministrativeStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Administrative status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Administrative status.",
        "responses": {
          "200": {
            "description": "a Administrative status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/administrativeStatus"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "updateadministrativeStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Administrative status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/administrativeStatus"
              }
            }
          }
        },
        "description": "Store Administrative status",
        "responses": {
          "200": {
            "description": "Stored Administrative status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/administrativeStatus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "deleteadministrativeStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Administrative status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Administrative status",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/administrativeStatus/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfadministrativeStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Administrative status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "description": "Return a Administrative status.",
        "responses": {
          "200": {
            "description": "a Administrative status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/administrativeStatus/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "administrativeStatus"
        ],
        "operationId": "versionadministrativeStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Administrative status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Administrative status",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Administrative status.",
        "responses": {
          "200": {
            "description": "a Administrative status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/administrativeStatus"
                }
              }
            }
          }
        }
      }
    },
    "/agent": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "listagent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of agent objects.",
        "responses": {
          "200": {
            "description": "A list of  agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/agent"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "storeagent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agent"
              }
            }
          }
        },
        "description": "Store agent object(s)",
        "responses": {
          "201": {
            "description": "Stored agent object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "patchagent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch agent (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching agent.",
        "responses": {
          "200": {
            "description": "A list of  agent.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/agent"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/agent/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "searchagent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of agent objects.",
        "responses": {
          "200": {
            "description": "A list of  agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/agent"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/agent/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "getagent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a agent.",
        "responses": {
          "200": {
            "description": "a agent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "updateagent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agent"
              }
            }
          }
        },
        "description": "Store agent",
        "responses": {
          "200": {
            "description": "Stored agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "deleteagent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete agent",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agent/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfagent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "agent"
        ],
        "description": "Return a agent.",
        "responses": {
          "200": {
            "description": "a agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agent/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "agent"
        ],
        "operationId": "versionagent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the agent",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a agent.",
        "responses": {
          "200": {
            "description": "a agent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          }
        }
      }
    },
    "/annotation": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "listannotation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of annotation objects.",
        "responses": {
          "200": {
            "description": "A list of  annotation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotation"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "storeannotation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/annotation"
              }
            }
          }
        },
        "description": "Store annotation object(s)",
        "responses": {
          "201": {
            "description": "Stored annotation object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotation"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "patchannotation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch annotation (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching annotation.",
        "responses": {
          "200": {
            "description": "A list of  annotation.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotation"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/annotation/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "searchannotation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of annotation objects.",
        "responses": {
          "200": {
            "description": "A list of  annotation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotation"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/annotation/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "getannotation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a annotation.",
        "responses": {
          "200": {
            "description": "a annotation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotation"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "updateannotation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/annotation"
              }
            }
          }
        },
        "description": "Store annotation",
        "responses": {
          "200": {
            "description": "Stored annotation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "deleteannotation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete annotation",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/annotation/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfannotation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "annotation"
        ],
        "description": "Return a annotation.",
        "responses": {
          "200": {
            "description": "a annotation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/annotation/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotation"
        ],
        "operationId": "versionannotation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the annotation",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a annotation.",
        "responses": {
          "200": {
            "description": "a annotation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotation"
                }
              }
            }
          }
        }
      }
    },
    "/annotationOccurrence": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "listannotationOccurrence",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of annotationOccurrence objects.",
        "responses": {
          "200": {
            "description": "A list of  annotationOccurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotationOccurrence"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "storeannotationOccurrence",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/annotationOccurrence"
              }
            }
          }
        },
        "description": "Store annotationOccurrence object(s)",
        "responses": {
          "201": {
            "description": "Stored annotationOccurrence object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotationOccurrence"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "patchannotationOccurrence",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch annotationoccurrence (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching annotationoccurrence.",
        "responses": {
          "200": {
            "description": "A list of  annotationOccurrence.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotationOccurrence"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/annotationOccurrence/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "searchannotationOccurrence",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of annotationOccurrence objects.",
        "responses": {
          "200": {
            "description": "A list of  annotationOccurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotationOccurrence"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/annotationOccurrence/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "getannotationOccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotationOccurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a annotationOccurrence.",
        "responses": {
          "200": {
            "description": "a annotationOccurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotationOccurrence"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "updateannotationOccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotationOccurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/annotationOccurrence"
              }
            }
          }
        },
        "description": "Store annotationOccurrence",
        "responses": {
          "200": {
            "description": "Stored annotationOccurrence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotationOccurrence"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "deleteannotationOccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotationOccurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete annotationOccurrence",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/annotationOccurrence/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfannotationOccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotationOccurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "description": "Return a annotationOccurrence.",
        "responses": {
          "200": {
            "description": "a annotationOccurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/annotationOccurrence/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "annotationOccurrence"
        ],
        "operationId": "versionannotationOccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the annotationOccurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the annotationOccurrence",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a annotationOccurrence.",
        "responses": {
          "200": {
            "description": "a annotationOccurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/annotationOccurrence"
                }
              }
            }
          }
        }
      }
    },
    "/area": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "listarea",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Area objects.",
        "responses": {
          "200": {
            "description": "A list of  Area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/area"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "storearea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/area"
              }
            }
          }
        },
        "description": "Store Area object(s)",
        "responses": {
          "201": {
            "description": "Stored Area object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/area"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "patcharea",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch area (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching area.",
        "responses": {
          "200": {
            "description": "A list of  Area.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/area"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/area/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "searcharea",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Area objects.",
        "responses": {
          "200": {
            "description": "A list of  Area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/area"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/area/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "getarea",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Area.",
        "responses": {
          "200": {
            "description": "a Area.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/area"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "updatearea",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/area"
              }
            }
          }
        },
        "description": "Store Area",
        "responses": {
          "200": {
            "description": "Stored Area",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/area"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "deletearea",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Area",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/area/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfarea",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Area",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "area"
        ],
        "description": "Return a Area.",
        "responses": {
          "200": {
            "description": "a Area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/area/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "area"
        ],
        "operationId": "versionarea",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Area",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Area",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Area.",
        "responses": {
          "200": {
            "description": "a Area.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/area"
                }
              }
            }
          }
        }
      }
    },
    "/audio": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "listaudio",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Audio recording objects.",
        "responses": {
          "200": {
            "description": "A list of  Audio recording.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/audio"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "storeaudio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/audio"
              }
            }
          }
        },
        "description": "Store Audio recording object(s)",
        "responses": {
          "201": {
            "description": "Stored Audio recording object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audio"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "patchaudio",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch audio recording (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching audio recording.",
        "responses": {
          "200": {
            "description": "A list of  Audio recording.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/audio"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/audio/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "searchaudio",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Audio recording objects.",
        "responses": {
          "200": {
            "description": "A list of  Audio recording.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/audio"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/audio/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "getaudio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Audio recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Audio recording.",
        "responses": {
          "200": {
            "description": "a Audio recording.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audio"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "updateaudio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Audio recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/audio"
              }
            }
          }
        },
        "description": "Store Audio recording",
        "responses": {
          "200": {
            "description": "Stored Audio recording",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audio"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "deleteaudio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Audio recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Audio recording",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/audio/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfaudio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Audio recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "audio"
        ],
        "description": "Return a Audio recording.",
        "responses": {
          "200": {
            "description": "a Audio recording.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/audio/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "audio"
        ],
        "operationId": "versionaudio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Audio recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Audio recording",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Audio recording.",
        "responses": {
          "200": {
            "description": "a Audio recording.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audio"
                }
              }
            }
          }
        }
      }
    },
    "/birdSongRecognitionSkillLevel": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "listbirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Instances of this class are bird song recognition skill levels of a certain area objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class are bird song recognition skill levels of a certain area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "storebirdSongRecognitionSkillLevel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
              }
            }
          }
        },
        "description": "Store Instances of this class are bird song recognition skill levels of a certain area object(s)",
        "responses": {
          "201": {
            "description": "Stored Instances of this class are bird song recognition skill levels of a certain area object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "patchbirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch instances of this class are bird song recognition skill levels of a certain area (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching instances of this class are bird song recognition skill levels of a certain area.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class are bird song recognition skill levels of a certain area.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/birdSongRecognitionSkillLevel/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "searchbirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Instances of this class are bird song recognition skill levels of a certain area objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class are bird song recognition skill levels of a certain area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/birdSongRecognitionSkillLevel/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "getbirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are bird song recognition skill levels of a certain area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Instances of this class are bird song recognition skill levels of a certain area.",
        "responses": {
          "200": {
            "description": "a Instances of this class are bird song recognition skill levels of a certain area.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "updatebirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are bird song recognition skill levels of a certain area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
              }
            }
          }
        },
        "description": "Store Instances of this class are bird song recognition skill levels of a certain area",
        "responses": {
          "200": {
            "description": "Stored Instances of this class are bird song recognition skill levels of a certain area",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "deletebirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are bird song recognition skill levels of a certain area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Instances of this class are bird song recognition skill levels of a certain area",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/birdSongRecognitionSkillLevel/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfbirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are bird song recognition skill levels of a certain area",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "description": "Return a Instances of this class are bird song recognition skill levels of a certain area.",
        "responses": {
          "200": {
            "description": "a Instances of this class are bird song recognition skill levels of a certain area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/birdSongRecognitionSkillLevel/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "birdSongRecognitionSkillLevel"
        ],
        "operationId": "versionbirdSongRecognitionSkillLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are bird song recognition skill levels of a certain area",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Instances of this class are bird song recognition skill levels of a certain area",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Instances of this class are bird song recognition skill levels of a certain area.",
        "responses": {
          "200": {
            "description": "a Instances of this class are bird song recognition skill levels of a certain area.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                }
              }
            }
          }
        }
      }
    },
    "/branch": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "listbranch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Branch objects.",
        "responses": {
          "200": {
            "description": "A list of  Branch.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/branch"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "storebranch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/branch"
              }
            }
          }
        },
        "description": "Store Branch object(s)",
        "responses": {
          "201": {
            "description": "Stored Branch object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "patchbranch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch branch (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching branch.",
        "responses": {
          "200": {
            "description": "A list of  Branch.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/branch"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/branch/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "searchbranch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Branch objects.",
        "responses": {
          "200": {
            "description": "A list of  Branch.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/branch"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/branch/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "getbranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Branch.",
        "responses": {
          "200": {
            "description": "a Branch.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "updatebranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/branch"
              }
            }
          }
        },
        "description": "Store Branch",
        "responses": {
          "200": {
            "description": "Stored Branch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "deletebranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Branch",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfbranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "branch"
        ],
        "description": "Return a Branch.",
        "responses": {
          "200": {
            "description": "a Branch.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "branch"
        ],
        "operationId": "versionbranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Branch",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Branch.",
        "responses": {
          "200": {
            "description": "a Branch.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch"
                }
              }
            }
          }
        }
      }
    },
    "/checklist": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "listchecklist",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Checklist objects.",
        "responses": {
          "200": {
            "description": "A list of  Checklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklist"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "storechecklist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/checklist"
              }
            }
          }
        },
        "description": "Store Checklist object(s)",
        "responses": {
          "201": {
            "description": "Stored Checklist object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklist"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "patchchecklist",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch checklist (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching checklist.",
        "responses": {
          "200": {
            "description": "A list of  Checklist.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklist"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/checklist/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "searchchecklist",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Checklist objects.",
        "responses": {
          "200": {
            "description": "A list of  Checklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklist"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/checklist/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "getchecklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Checklist.",
        "responses": {
          "200": {
            "description": "a Checklist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklist"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "updatechecklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/checklist"
              }
            }
          }
        },
        "description": "Store Checklist",
        "responses": {
          "200": {
            "description": "Stored Checklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklist"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "deletechecklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Checklist",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checklist/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfchecklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "checklist"
        ],
        "description": "Return a Checklist.",
        "responses": {
          "200": {
            "description": "a Checklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checklist/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklist"
        ],
        "operationId": "versionchecklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Checklist",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Checklist.",
        "responses": {
          "200": {
            "description": "a Checklist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklist"
                }
              }
            }
          }
        }
      }
    },
    "/checklistVersion": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "listchecklistVersion",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Checklist version objects.",
        "responses": {
          "200": {
            "description": "A list of  Checklist version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklistVersion"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "storechecklistVersion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/checklistVersion"
              }
            }
          }
        },
        "description": "Store Checklist version object(s)",
        "responses": {
          "201": {
            "description": "Stored Checklist version object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklistVersion"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "patchchecklistVersion",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch checklist version (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching checklist version.",
        "responses": {
          "200": {
            "description": "A list of  Checklist version.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklistVersion"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/checklistVersion/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "searchchecklistVersion",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Checklist version objects.",
        "responses": {
          "200": {
            "description": "A list of  Checklist version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklistVersion"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/checklistVersion/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "getchecklistVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Checklist version.",
        "responses": {
          "200": {
            "description": "a Checklist version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklistVersion"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "updatechecklistVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/checklistVersion"
              }
            }
          }
        },
        "description": "Store Checklist version",
        "responses": {
          "200": {
            "description": "Stored Checklist version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklistVersion"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "deletechecklistVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Checklist version",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checklistVersion/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfchecklistVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "description": "Return a Checklist version.",
        "responses": {
          "200": {
            "description": "a Checklist version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checklistVersion/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "checklistVersion"
        ],
        "operationId": "versionchecklistVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Checklist version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Checklist version",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Checklist version.",
        "responses": {
          "200": {
            "description": "a Checklist version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checklistVersion"
                }
              }
            }
          }
        }
      }
    },
    "/collection": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "listcollection",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Collection objects.",
        "responses": {
          "200": {
            "description": "A list of  Collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/collection"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "storecollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/collection"
              }
            }
          }
        },
        "description": "Store Collection object(s)",
        "responses": {
          "201": {
            "description": "Stored Collection object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collection"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "patchcollection",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch collection (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching collection.",
        "responses": {
          "200": {
            "description": "A list of  Collection.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/collection"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/collection/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "searchcollection",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Collection objects.",
        "responses": {
          "200": {
            "description": "A list of  Collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/collection"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/collection/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "getcollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Collection.",
        "responses": {
          "200": {
            "description": "a Collection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collection"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "updatecollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/collection"
              }
            }
          }
        },
        "description": "Store Collection",
        "responses": {
          "200": {
            "description": "Stored Collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "deletecollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Collection",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collection/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfcollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "collection"
        ],
        "description": "Return a Collection.",
        "responses": {
          "200": {
            "description": "a Collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collection/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "collection"
        ],
        "operationId": "versioncollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Collection",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Collection.",
        "responses": {
          "200": {
            "description": "a Collection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collection"
                }
              }
            }
          }
        }
      }
    },
    "/completeList": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "listcompleteList",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of completeList objects.",
        "responses": {
          "200": {
            "description": "A list of  completeList.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/completeList"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "storecompleteList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/completeList"
              }
            }
          }
        },
        "description": "Store completeList object(s)",
        "responses": {
          "201": {
            "description": "Stored completeList object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/completeList"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "patchcompleteList",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch completelist (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching completelist.",
        "responses": {
          "200": {
            "description": "A list of  completeList.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/completeList"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/completeList/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "searchcompleteList",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of completeList objects.",
        "responses": {
          "200": {
            "description": "A list of  completeList.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/completeList"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/completeList/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "getcompleteList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the completeList",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a completeList.",
        "responses": {
          "200": {
            "description": "a completeList.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/completeList"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "updatecompleteList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the completeList",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/completeList"
              }
            }
          }
        },
        "description": "Store completeList",
        "responses": {
          "200": {
            "description": "Stored completeList",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/completeList"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "deletecompleteList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the completeList",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete completeList",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/completeList/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfcompleteList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the completeList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "completeList"
        ],
        "description": "Return a completeList.",
        "responses": {
          "200": {
            "description": "a completeList.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/completeList/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "completeList"
        ],
        "operationId": "versioncompleteList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the completeList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the completeList",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a completeList.",
        "responses": {
          "200": {
            "description": "a completeList.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/completeList"
                }
              }
            }
          }
        }
      }
    },
    "/contentContextDescription": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "listcontentContextDescription",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Instances of this describe one taxon description context objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this describe one taxon description context.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/contentContextDescription"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "storecontentContextDescription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentContextDescription"
              }
            }
          }
        },
        "description": "Store Instances of this describe one taxon description context object(s)",
        "responses": {
          "201": {
            "description": "Stored Instances of this describe one taxon description context object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contentContextDescription"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "patchcontentContextDescription",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch instances of this describe one taxon description context (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching instances of this describe one taxon description context.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this describe one taxon description context.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/contentContextDescription"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contentContextDescription/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "searchcontentContextDescription",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Instances of this describe one taxon description context objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this describe one taxon description context.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/contentContextDescription"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contentContextDescription/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "getcontentContextDescription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Instances of this describe one taxon description context.",
        "responses": {
          "200": {
            "description": "a Instances of this describe one taxon description context.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contentContextDescription"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "updatecontentContextDescription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentContextDescription"
              }
            }
          }
        },
        "description": "Store Instances of this describe one taxon description context",
        "responses": {
          "200": {
            "description": "Stored Instances of this describe one taxon description context",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contentContextDescription"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "deletecontentContextDescription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Instances of this describe one taxon description context",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contentContextDescription/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfcontentContextDescription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "description": "Return a Instances of this describe one taxon description context.",
        "responses": {
          "200": {
            "description": "a Instances of this describe one taxon description context.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contentContextDescription/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "contentContextDescription"
        ],
        "operationId": "versioncontentContextDescription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this describe one taxon description context",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Instances of this describe one taxon description context",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Instances of this describe one taxon description context.",
        "responses": {
          "200": {
            "description": "a Instances of this describe one taxon description context.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contentContextDescription"
                }
              }
            }
          }
        }
      }
    },
    "/dataField": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "listdataField",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Data field objects.",
        "responses": {
          "200": {
            "description": "A list of  Data field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataField"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "storedataField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dataField"
              }
            }
          }
        },
        "description": "Store Data field object(s)",
        "responses": {
          "201": {
            "description": "Stored Data field object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataField"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "patchdataField",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch data field (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching data field.",
        "responses": {
          "200": {
            "description": "A list of  Data field.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataField"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/dataField/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "searchdataField",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Data field objects.",
        "responses": {
          "200": {
            "description": "A list of  Data field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataField"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/dataField/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "getdataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Data field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Data field.",
        "responses": {
          "200": {
            "description": "a Data field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataField"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "updatedataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Data field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dataField"
              }
            }
          }
        },
        "description": "Store Data field",
        "responses": {
          "200": {
            "description": "Stored Data field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataField"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "deletedataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Data field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Data field",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataField/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfdataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Data field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "dataField"
        ],
        "description": "Return a Data field.",
        "responses": {
          "200": {
            "description": "a Data field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataField/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataField"
        ],
        "operationId": "versiondataField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Data field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Data field",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Data field.",
        "responses": {
          "200": {
            "description": "a Data field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataField"
                }
              }
            }
          }
        }
      }
    },
    "/dataset": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "listdataset",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Tag objects.",
        "responses": {
          "200": {
            "description": "A list of  Tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataset"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "storedataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dataset"
              }
            }
          }
        },
        "description": "Store Tag object(s)",
        "responses": {
          "201": {
            "description": "Stored Tag object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataset"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "patchdataset",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch tag (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching tag.",
        "responses": {
          "200": {
            "description": "A list of  Tag.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataset"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/dataset/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "searchdataset",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Tag objects.",
        "responses": {
          "200": {
            "description": "A list of  Tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataset"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "getdataset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Tag.",
        "responses": {
          "200": {
            "description": "a Tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataset"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "updatedataset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dataset"
              }
            }
          }
        },
        "description": "Store Tag",
        "responses": {
          "200": {
            "description": "Stored Tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataset"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "deletedataset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Tag",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfdataset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "dataset"
        ],
        "description": "Return a Tag.",
        "responses": {
          "200": {
            "description": "a Tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dataset"
        ],
        "operationId": "versiondataset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Tag",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Tag.",
        "responses": {
          "200": {
            "description": "a Tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dataset"
                }
              }
            }
          }
        }
      }
    },
    "/dateRange": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "listdateRange",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of dateRange objects.",
        "responses": {
          "200": {
            "description": "A list of  dateRange.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dateRange"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "storedateRange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dateRange"
              }
            }
          }
        },
        "description": "Store dateRange object(s)",
        "responses": {
          "201": {
            "description": "Stored dateRange object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dateRange"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "patchdateRange",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch daterange (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching daterange.",
        "responses": {
          "200": {
            "description": "A list of  dateRange.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dateRange"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/dateRange/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "searchdateRange",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of dateRange objects.",
        "responses": {
          "200": {
            "description": "A list of  dateRange.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dateRange"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/dateRange/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "getdateRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the dateRange",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a dateRange.",
        "responses": {
          "200": {
            "description": "a dateRange.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dateRange"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "updatedateRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the dateRange",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dateRange"
              }
            }
          }
        },
        "description": "Store dateRange",
        "responses": {
          "200": {
            "description": "Stored dateRange",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dateRange"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "deletedateRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the dateRange",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete dateRange",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dateRange/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfdateRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the dateRange",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "dateRange"
        ],
        "description": "Return a dateRange.",
        "responses": {
          "200": {
            "description": "a dateRange.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dateRange/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "dateRange"
        ],
        "operationId": "versiondateRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the dateRange",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the dateRange",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a dateRange.",
        "responses": {
          "200": {
            "description": "a dateRange.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dateRange"
                }
              }
            }
          }
        }
      }
    },
    "/device": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "listdevice",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of device objects.",
        "responses": {
          "200": {
            "description": "A list of  device.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/device"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "storedevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/device"
              }
            }
          }
        },
        "description": "Store device object(s)",
        "responses": {
          "201": {
            "description": "Stored device object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "patchdevice",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch device (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching device.",
        "responses": {
          "200": {
            "description": "A list of  device.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/device"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/device/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "searchdevice",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of device objects.",
        "responses": {
          "200": {
            "description": "A list of  device.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/device"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/device/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "getdevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a device.",
        "responses": {
          "200": {
            "description": "a device.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "updatedevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/device"
              }
            }
          }
        },
        "description": "Store device",
        "responses": {
          "200": {
            "description": "Stored device",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "deletedevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete device",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/device/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfdevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "device"
        ],
        "description": "Return a device.",
        "responses": {
          "200": {
            "description": "a device.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/device/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "device"
        ],
        "operationId": "versiondevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the device",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a device.",
        "responses": {
          "200": {
            "description": "a device.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          }
        }
      }
    },
    "/deviceIndividual": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "listdeviceIndividual",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of deviceIndividual objects.",
        "responses": {
          "200": {
            "description": "A list of  deviceIndividual.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/deviceIndividual"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "storedeviceIndividual",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deviceIndividual"
              }
            }
          }
        },
        "description": "Store deviceIndividual object(s)",
        "responses": {
          "201": {
            "description": "Stored deviceIndividual object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceIndividual"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "patchdeviceIndividual",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch deviceindividual (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching deviceindividual.",
        "responses": {
          "200": {
            "description": "A list of  deviceIndividual.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/deviceIndividual"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/deviceIndividual/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "searchdeviceIndividual",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of deviceIndividual objects.",
        "responses": {
          "200": {
            "description": "A list of  deviceIndividual.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/deviceIndividual"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/deviceIndividual/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "getdeviceIndividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the deviceIndividual",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a deviceIndividual.",
        "responses": {
          "200": {
            "description": "a deviceIndividual.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceIndividual"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "updatedeviceIndividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the deviceIndividual",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deviceIndividual"
              }
            }
          }
        },
        "description": "Store deviceIndividual",
        "responses": {
          "200": {
            "description": "Stored deviceIndividual",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceIndividual"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "deletedeviceIndividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the deviceIndividual",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete deviceIndividual",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deviceIndividual/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfdeviceIndividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the deviceIndividual",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "description": "Return a deviceIndividual.",
        "responses": {
          "200": {
            "description": "a deviceIndividual.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deviceIndividual/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "deviceIndividual"
        ],
        "operationId": "versiondeviceIndividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the deviceIndividual",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the deviceIndividual",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a deviceIndividual.",
        "responses": {
          "200": {
            "description": "a deviceIndividual.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceIndividual"
                }
              }
            }
          }
        }
      }
    },
    "/document": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "listdocument",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Submissions objects.",
        "responses": {
          "200": {
            "description": "A list of  Submissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/document"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "storedocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document"
              }
            }
          }
        },
        "description": "Store Submissions object(s)",
        "responses": {
          "201": {
            "description": "Stored Submissions object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "patchdocument",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch submissions (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching submissions.",
        "responses": {
          "200": {
            "description": "A list of  Submissions.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/document"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/document/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "searchdocument",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Submissions objects.",
        "responses": {
          "200": {
            "description": "A list of  Submissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/document"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/document/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "getdocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Submissions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Submissions.",
        "responses": {
          "200": {
            "description": "a Submissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "updatedocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Submissions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document"
              }
            }
          }
        },
        "description": "Store Submissions",
        "responses": {
          "200": {
            "description": "Stored Submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "deletedocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Submissions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Submissions",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/document/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfdocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Submissions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "document"
        ],
        "description": "Return a Submissions.",
        "responses": {
          "200": {
            "description": "a Submissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/document/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "document"
        ],
        "operationId": "versiondocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Submissions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Submissions",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Submissions.",
        "responses": {
          "200": {
            "description": "a Submissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      }
    },
    "/downloadRequest": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "listdownloadRequest",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Download request objects.",
        "responses": {
          "200": {
            "description": "A list of  Download request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/downloadRequest"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "storedownloadRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/downloadRequest"
              }
            }
          }
        },
        "description": "Store Download request object(s)",
        "responses": {
          "201": {
            "description": "Stored Download request object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/downloadRequest"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "patchdownloadRequest",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch download request (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching download request.",
        "responses": {
          "200": {
            "description": "A list of  Download request.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/downloadRequest"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/downloadRequest/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "searchdownloadRequest",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Download request objects.",
        "responses": {
          "200": {
            "description": "A list of  Download request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/downloadRequest"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/downloadRequest/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "getdownloadRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Download request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Download request.",
        "responses": {
          "200": {
            "description": "a Download request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/downloadRequest"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "updatedownloadRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Download request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/downloadRequest"
              }
            }
          }
        },
        "description": "Store Download request",
        "responses": {
          "200": {
            "description": "Stored Download request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/downloadRequest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "deletedownloadRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Download request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Download request",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/downloadRequest/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfdownloadRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Download request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "description": "Return a Download request.",
        "responses": {
          "200": {
            "description": "a Download request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/downloadRequest/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "downloadRequest"
        ],
        "operationId": "versiondownloadRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Download request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Download request",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Download request.",
        "responses": {
          "200": {
            "description": "a Download request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/downloadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/endangerment": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "listendangerment",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Endagerment object objects.",
        "responses": {
          "200": {
            "description": "A list of  Endagerment object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/endangerment"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "storeendangerment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/endangerment"
              }
            }
          }
        },
        "description": "Store Endagerment object object(s)",
        "responses": {
          "201": {
            "description": "Stored Endagerment object object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endangerment"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "patchendangerment",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch endagerment object (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching endagerment object.",
        "responses": {
          "200": {
            "description": "A list of  Endagerment object.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/endangerment"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/endangerment/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "searchendangerment",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Endagerment object objects.",
        "responses": {
          "200": {
            "description": "A list of  Endagerment object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/endangerment"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/endangerment/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "getendangerment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Endagerment object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Endagerment object.",
        "responses": {
          "200": {
            "description": "a Endagerment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endangerment"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "updateendangerment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Endagerment object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/endangerment"
              }
            }
          }
        },
        "description": "Store Endagerment object",
        "responses": {
          "200": {
            "description": "Stored Endagerment object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endangerment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "deleteendangerment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Endagerment object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Endagerment object",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/endangerment/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfendangerment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Endagerment object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "endangerment"
        ],
        "description": "Return a Endagerment object.",
        "responses": {
          "200": {
            "description": "a Endagerment object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/endangerment/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "endangerment"
        ],
        "operationId": "versionendangerment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Endagerment object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Endagerment object",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Endagerment object.",
        "responses": {
          "200": {
            "description": "a Endagerment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endangerment"
                }
              }
            }
          }
        }
      }
    },
    "/event": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "listevent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of event objects.",
        "responses": {
          "200": {
            "description": "A list of  event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/event"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "storeevent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/event"
              }
            }
          }
        },
        "description": "Store event object(s)",
        "responses": {
          "201": {
            "description": "Stored event object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "patchevent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch event (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching event.",
        "responses": {
          "200": {
            "description": "A list of  event.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/event"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/event/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "searchevent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of event objects.",
        "responses": {
          "200": {
            "description": "A list of  event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/event"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/event/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "getevent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a event.",
        "responses": {
          "200": {
            "description": "a event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "updateevent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/event"
              }
            }
          }
        },
        "description": "Store event",
        "responses": {
          "200": {
            "description": "Stored event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "deleteevent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete event",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfevent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "event"
        ],
        "description": "Return a event.",
        "responses": {
          "200": {
            "description": "a event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "event"
        ],
        "operationId": "versionevent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the event",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a event.",
        "responses": {
          "200": {
            "description": "a event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          }
        }
      }
    },
    "/field": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "listfield",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of field objects.",
        "responses": {
          "200": {
            "description": "A list of  field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/field"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "storefield",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/field"
              }
            }
          }
        },
        "description": "Store field object(s)",
        "responses": {
          "201": {
            "description": "Stored field object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "patchfield",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch field (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching field.",
        "responses": {
          "200": {
            "description": "A list of  field.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/field"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/field/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "searchfield",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of field objects.",
        "responses": {
          "200": {
            "description": "A list of  field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/field"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "getfield",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a field.",
        "responses": {
          "200": {
            "description": "a field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "updatefield",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/field"
              }
            }
          }
        },
        "description": "Store field",
        "responses": {
          "200": {
            "description": "Stored field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "deletefield",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete field",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOffield",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "field"
        ],
        "description": "Return a field.",
        "responses": {
          "200": {
            "description": "a field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "field"
        ],
        "operationId": "versionfield",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the field",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a field.",
        "responses": {
          "200": {
            "description": "a field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        }
      }
    },
    "/fieldset": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "listfieldset",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of fieldset objects.",
        "responses": {
          "200": {
            "description": "A list of  fieldset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/fieldset"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "storefieldset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fieldset"
              }
            }
          }
        },
        "description": "Store fieldset object(s)",
        "responses": {
          "201": {
            "description": "Stored fieldset object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fieldset"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "patchfieldset",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch fieldset (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching fieldset.",
        "responses": {
          "200": {
            "description": "A list of  fieldset.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/fieldset"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fieldset/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "searchfieldset",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of fieldset objects.",
        "responses": {
          "200": {
            "description": "A list of  fieldset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/fieldset"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/fieldset/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "getfieldset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the fieldset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a fieldset.",
        "responses": {
          "200": {
            "description": "a fieldset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fieldset"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "updatefieldset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the fieldset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fieldset"
              }
            }
          }
        },
        "description": "Store fieldset",
        "responses": {
          "200": {
            "description": "Stored fieldset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fieldset"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "deletefieldset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the fieldset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete fieldset",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fieldset/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOffieldset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the fieldset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "fieldset"
        ],
        "description": "Return a fieldset.",
        "responses": {
          "200": {
            "description": "a fieldset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fieldset/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "fieldset"
        ],
        "operationId": "versionfieldset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the fieldset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the fieldset",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a fieldset.",
        "responses": {
          "200": {
            "description": "a fieldset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fieldset"
                }
              }
            }
          }
        }
      }
    },
    "/form": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "listform",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of form objects.",
        "responses": {
          "200": {
            "description": "A list of  form.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/form"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "storeform",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/form"
              }
            }
          }
        },
        "description": "Store form object(s)",
        "responses": {
          "201": {
            "description": "Stored form object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "patchform",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch form (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching form.",
        "responses": {
          "200": {
            "description": "A list of  form.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/form"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/form/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "searchform",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of form objects.",
        "responses": {
          "200": {
            "description": "A list of  form.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/form"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/form/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "getform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a form.",
        "responses": {
          "200": {
            "description": "a form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "updateform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/form"
              }
            }
          }
        },
        "description": "Store form",
        "responses": {
          "200": {
            "description": "Stored form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "deleteform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete form",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/form/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "form"
        ],
        "description": "Return a form.",
        "responses": {
          "200": {
            "description": "a form.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/form/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "form"
        ],
        "operationId": "versionform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the form",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a form.",
        "responses": {
          "200": {
            "description": "a form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        }
      }
    },
    "/formFooter": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "listformFooter",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formFooter objects.",
        "responses": {
          "200": {
            "description": "A list of  formFooter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formFooter"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "storeformFooter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formFooter"
              }
            }
          }
        },
        "description": "Store formFooter object(s)",
        "responses": {
          "201": {
            "description": "Stored formFooter object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formFooter"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "patchformFooter",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch formfooter (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching formfooter.",
        "responses": {
          "200": {
            "description": "A list of  formFooter.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formFooter"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formFooter/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "searchformFooter",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formFooter objects.",
        "responses": {
          "200": {
            "description": "A list of  formFooter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formFooter"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formFooter/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "getformFooter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formFooter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formFooter.",
        "responses": {
          "200": {
            "description": "a formFooter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formFooter"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "updateformFooter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formFooter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formFooter"
              }
            }
          }
        },
        "description": "Store formFooter",
        "responses": {
          "200": {
            "description": "Stored formFooter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formFooter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "deleteformFooter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formFooter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formFooter",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formFooter/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformFooter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formFooter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formFooter"
        ],
        "description": "Return a formFooter.",
        "responses": {
          "200": {
            "description": "a formFooter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formFooter/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formFooter"
        ],
        "operationId": "versionformFooter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formFooter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formFooter",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formFooter.",
        "responses": {
          "200": {
            "description": "a formFooter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formFooter"
                }
              }
            }
          }
        }
      }
    },
    "/formInstructions": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "listformInstructions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formInstructions objects.",
        "responses": {
          "200": {
            "description": "A list of  formInstructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formInstructions"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "storeformInstructions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formInstructions"
              }
            }
          }
        },
        "description": "Store formInstructions object(s)",
        "responses": {
          "201": {
            "description": "Stored formInstructions object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formInstructions"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "patchformInstructions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch forminstructions (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching forminstructions.",
        "responses": {
          "200": {
            "description": "A list of  formInstructions.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formInstructions"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formInstructions/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "searchformInstructions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formInstructions objects.",
        "responses": {
          "200": {
            "description": "A list of  formInstructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formInstructions"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formInstructions/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "getformInstructions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formInstructions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formInstructions.",
        "responses": {
          "200": {
            "description": "a formInstructions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formInstructions"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "updateformInstructions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formInstructions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formInstructions"
              }
            }
          }
        },
        "description": "Store formInstructions",
        "responses": {
          "200": {
            "description": "Stored formInstructions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formInstructions"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "deleteformInstructions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formInstructions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formInstructions",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formInstructions/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformInstructions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formInstructions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "description": "Return a formInstructions.",
        "responses": {
          "200": {
            "description": "a formInstructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formInstructions/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formInstructions"
        ],
        "operationId": "versionformInstructions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formInstructions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formInstructions",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formInstructions.",
        "responses": {
          "200": {
            "description": "a formInstructions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formInstructions"
                }
              }
            }
          }
        }
      }
    },
    "/formNamedPlaceOptions": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "listformNamedPlaceOptions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formNamedPlaceOptions objects.",
        "responses": {
          "200": {
            "description": "A list of  formNamedPlaceOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formNamedPlaceOptions"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "storeformNamedPlaceOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formNamedPlaceOptions"
              }
            }
          }
        },
        "description": "Store formNamedPlaceOptions object(s)",
        "responses": {
          "201": {
            "description": "Stored formNamedPlaceOptions object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formNamedPlaceOptions"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "patchformNamedPlaceOptions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch formnamedplaceoptions (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching formnamedplaceoptions.",
        "responses": {
          "200": {
            "description": "A list of  formNamedPlaceOptions.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formNamedPlaceOptions"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formNamedPlaceOptions/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "searchformNamedPlaceOptions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formNamedPlaceOptions objects.",
        "responses": {
          "200": {
            "description": "A list of  formNamedPlaceOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formNamedPlaceOptions"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formNamedPlaceOptions/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "getformNamedPlaceOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formNamedPlaceOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formNamedPlaceOptions.",
        "responses": {
          "200": {
            "description": "a formNamedPlaceOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formNamedPlaceOptions"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "updateformNamedPlaceOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formNamedPlaceOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formNamedPlaceOptions"
              }
            }
          }
        },
        "description": "Store formNamedPlaceOptions",
        "responses": {
          "200": {
            "description": "Stored formNamedPlaceOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formNamedPlaceOptions"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "deleteformNamedPlaceOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formNamedPlaceOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formNamedPlaceOptions",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formNamedPlaceOptions/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformNamedPlaceOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formNamedPlaceOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "description": "Return a formNamedPlaceOptions.",
        "responses": {
          "200": {
            "description": "a formNamedPlaceOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formNamedPlaceOptions/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formNamedPlaceOptions"
        ],
        "operationId": "versionformNamedPlaceOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formNamedPlaceOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formNamedPlaceOptions",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formNamedPlaceOptions.",
        "responses": {
          "200": {
            "description": "a formNamedPlaceOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formNamedPlaceOptions"
                }
              }
            }
          }
        }
      }
    },
    "/formOptions": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "listformOptions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formOptions objects.",
        "responses": {
          "200": {
            "description": "A list of  formOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formOptions"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "storeformOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formOptions"
              }
            }
          }
        },
        "description": "Store formOptions object(s)",
        "responses": {
          "201": {
            "description": "Stored formOptions object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formOptions"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "patchformOptions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch formoptions (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching formoptions.",
        "responses": {
          "200": {
            "description": "A list of  formOptions.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formOptions"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formOptions/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "searchformOptions",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formOptions objects.",
        "responses": {
          "200": {
            "description": "A list of  formOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formOptions"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formOptions/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "getformOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formOptions.",
        "responses": {
          "200": {
            "description": "a formOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formOptions"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "updateformOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formOptions"
              }
            }
          }
        },
        "description": "Store formOptions",
        "responses": {
          "200": {
            "description": "Stored formOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formOptions"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "deleteformOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formOptions",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formOptions/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formOptions"
        ],
        "description": "Return a formOptions.",
        "responses": {
          "200": {
            "description": "a formOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formOptions/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formOptions"
        ],
        "operationId": "versionformOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formOptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formOptions",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formOptions.",
        "responses": {
          "200": {
            "description": "a formOptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formOptions"
                }
              }
            }
          }
        }
      }
    },
    "/formPermission": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "listformPermission",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formPermission objects.",
        "responses": {
          "200": {
            "description": "A list of  formPermission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermission"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "storeformPermission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formPermission"
              }
            }
          }
        },
        "description": "Store formPermission object(s)",
        "responses": {
          "201": {
            "description": "Stored formPermission object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermission"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "patchformPermission",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch formpermission (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching formpermission.",
        "responses": {
          "200": {
            "description": "A list of  formPermission.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermission"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formPermission/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "searchformPermission",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formPermission objects.",
        "responses": {
          "200": {
            "description": "A list of  formPermission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermission"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formPermission/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "getformPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermission",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formPermission.",
        "responses": {
          "200": {
            "description": "a formPermission.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermission"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "updateformPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermission",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formPermission"
              }
            }
          }
        },
        "description": "Store formPermission",
        "responses": {
          "200": {
            "description": "Stored formPermission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermission"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "deleteformPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermission",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formPermission",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formPermission/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermission",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formPermission"
        ],
        "description": "Return a formPermission.",
        "responses": {
          "200": {
            "description": "a formPermission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formPermission/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermission"
        ],
        "operationId": "versionformPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermission",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formPermission",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formPermission.",
        "responses": {
          "200": {
            "description": "a formPermission.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermission"
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionPerson": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "listformPermissionPerson",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formPermissionPerson objects.",
        "responses": {
          "200": {
            "description": "A list of  formPermissionPerson.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionPerson"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "storeformPermissionPerson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formPermissionPerson"
              }
            }
          }
        },
        "description": "Store formPermissionPerson object(s)",
        "responses": {
          "201": {
            "description": "Stored formPermissionPerson object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionPerson"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "patchformPermissionPerson",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch formpermissionperson (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching formpermissionperson.",
        "responses": {
          "200": {
            "description": "A list of  formPermissionPerson.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionPerson"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionPerson/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "searchformPermissionPerson",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formPermissionPerson objects.",
        "responses": {
          "200": {
            "description": "A list of  formPermissionPerson.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionPerson"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionPerson/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "getformPermissionPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionPerson",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formPermissionPerson.",
        "responses": {
          "200": {
            "description": "a formPermissionPerson.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionPerson"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "updateformPermissionPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionPerson",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formPermissionPerson"
              }
            }
          }
        },
        "description": "Store formPermissionPerson",
        "responses": {
          "200": {
            "description": "Stored formPermissionPerson",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionPerson"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "deleteformPermissionPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionPerson",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formPermissionPerson",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionPerson/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformPermissionPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionPerson",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "description": "Return a formPermissionPerson.",
        "responses": {
          "200": {
            "description": "a formPermissionPerson.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionPerson/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionPerson"
        ],
        "operationId": "versionformPermissionPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionPerson",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formPermissionPerson",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formPermissionPerson.",
        "responses": {
          "200": {
            "description": "a formPermissionPerson.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionPerson"
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionSingle": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "listformPermissionSingle",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formPermissionSingle objects.",
        "responses": {
          "200": {
            "description": "A list of  formPermissionSingle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionSingle"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "storeformPermissionSingle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formPermissionSingle"
              }
            }
          }
        },
        "description": "Store formPermissionSingle object(s)",
        "responses": {
          "201": {
            "description": "Stored formPermissionSingle object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionSingle"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "patchformPermissionSingle",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch formpermissionsingle (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching formpermissionsingle.",
        "responses": {
          "200": {
            "description": "A list of  formPermissionSingle.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionSingle"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionSingle/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "searchformPermissionSingle",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formPermissionSingle objects.",
        "responses": {
          "200": {
            "description": "A list of  formPermissionSingle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionSingle"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionSingle/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "getformPermissionSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionSingle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formPermissionSingle.",
        "responses": {
          "200": {
            "description": "a formPermissionSingle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionSingle"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "updateformPermissionSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionSingle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formPermissionSingle"
              }
            }
          }
        },
        "description": "Store formPermissionSingle",
        "responses": {
          "200": {
            "description": "Stored formPermissionSingle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionSingle"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "deleteformPermissionSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionSingle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formPermissionSingle",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionSingle/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformPermissionSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionSingle",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "description": "Return a formPermissionSingle.",
        "responses": {
          "200": {
            "description": "a formPermissionSingle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formPermissionSingle/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formPermissionSingle"
        ],
        "operationId": "versionformPermissionSingle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formPermissionSingle",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formPermissionSingle",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formPermissionSingle.",
        "responses": {
          "200": {
            "description": "a formPermissionSingle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formPermissionSingle"
                }
              }
            }
          }
        }
      }
    },
    "/formSeason": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "listformSeason",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of formSeason objects.",
        "responses": {
          "200": {
            "description": "A list of  formSeason.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formSeason"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "storeformSeason",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formSeason"
              }
            }
          }
        },
        "description": "Store formSeason object(s)",
        "responses": {
          "201": {
            "description": "Stored formSeason object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formSeason"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "patchformSeason",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch formseason (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching formseason.",
        "responses": {
          "200": {
            "description": "A list of  formSeason.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formSeason"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formSeason/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "searchformSeason",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of formSeason objects.",
        "responses": {
          "200": {
            "description": "A list of  formSeason.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formSeason"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/formSeason/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "getformSeason",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formSeason",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a formSeason.",
        "responses": {
          "200": {
            "description": "a formSeason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formSeason"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "updateformSeason",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formSeason",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/formSeason"
              }
            }
          }
        },
        "description": "Store formSeason",
        "responses": {
          "200": {
            "description": "Stored formSeason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formSeason"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "deleteformSeason",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formSeason",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete formSeason",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formSeason/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfformSeason",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formSeason",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "formSeason"
        ],
        "description": "Return a formSeason.",
        "responses": {
          "200": {
            "description": "a formSeason.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/formSeason/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "formSeason"
        ],
        "operationId": "versionformSeason",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the formSeason",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the formSeason",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a formSeason.",
        "responses": {
          "200": {
            "description": "a formSeason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formSeason"
                }
              }
            }
          }
        }
      }
    },
    "/gathering": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "listgathering",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Gathering event objects.",
        "responses": {
          "200": {
            "description": "A list of  Gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gathering"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "storegathering",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gathering"
              }
            }
          }
        },
        "description": "Store Gathering event object(s)",
        "responses": {
          "201": {
            "description": "Stored Gathering event object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gathering"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "patchgathering",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch gathering event (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching gathering event.",
        "responses": {
          "200": {
            "description": "A list of  Gathering event.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gathering"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/gathering/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "searchgathering",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Gathering event objects.",
        "responses": {
          "200": {
            "description": "A list of  Gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gathering"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/gathering/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "getgathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Gathering event.",
        "responses": {
          "200": {
            "description": "a Gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gathering"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "updategathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gathering"
              }
            }
          }
        },
        "description": "Store Gathering event",
        "responses": {
          "200": {
            "description": "Stored Gathering event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gathering"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "deletegathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Gathering event",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gathering/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfgathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "gathering"
        ],
        "description": "Return a Gathering event.",
        "responses": {
          "200": {
            "description": "a Gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gathering/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gathering"
        ],
        "operationId": "versiongathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Gathering event",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Gathering event.",
        "responses": {
          "200": {
            "description": "a Gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gathering"
                }
              }
            }
          }
        }
      }
    },
    "/gatheringEvent": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "listgatheringEvent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Global gathering event objects.",
        "responses": {
          "200": {
            "description": "A list of  Global gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringEvent"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "storegatheringEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gatheringEvent"
              }
            }
          }
        },
        "description": "Store Global gathering event object(s)",
        "responses": {
          "201": {
            "description": "Stored Global gathering event object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringEvent"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "patchgatheringEvent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch global gathering event (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching global gathering event.",
        "responses": {
          "200": {
            "description": "A list of  Global gathering event.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringEvent"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/gatheringEvent/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "searchgatheringEvent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Global gathering event objects.",
        "responses": {
          "200": {
            "description": "A list of  Global gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringEvent"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/gatheringEvent/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "getgatheringEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Global gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Global gathering event.",
        "responses": {
          "200": {
            "description": "a Global gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringEvent"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "updategatheringEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Global gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gatheringEvent"
              }
            }
          }
        },
        "description": "Store Global gathering event",
        "responses": {
          "200": {
            "description": "Stored Global gathering event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringEvent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "deletegatheringEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Global gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Global gathering event",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gatheringEvent/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfgatheringEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Global gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "description": "Return a Global gathering event.",
        "responses": {
          "200": {
            "description": "a Global gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gatheringEvent/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringEvent"
        ],
        "operationId": "versiongatheringEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Global gathering event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Global gathering event",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Global gathering event.",
        "responses": {
          "200": {
            "description": "a Global gathering event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringEvent"
                }
              }
            }
          }
        }
      }
    },
    "/gatheringFact": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "listgatheringFact",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Keruutapahtuman faktat objects.",
        "responses": {
          "200": {
            "description": "A list of  Keruutapahtuman faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringFact"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "storegatheringFact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gatheringFact"
              }
            }
          }
        },
        "description": "Store Keruutapahtuman faktat object(s)",
        "responses": {
          "201": {
            "description": "Stored Keruutapahtuman faktat object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringFact"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "patchgatheringFact",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch keruutapahtuman faktat (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching keruutapahtuman faktat.",
        "responses": {
          "200": {
            "description": "A list of  Keruutapahtuman faktat.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringFact"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/gatheringFact/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "searchgatheringFact",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Keruutapahtuman faktat objects.",
        "responses": {
          "200": {
            "description": "A list of  Keruutapahtuman faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringFact"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/gatheringFact/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "getgatheringFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Keruutapahtuman faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Keruutapahtuman faktat.",
        "responses": {
          "200": {
            "description": "a Keruutapahtuman faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringFact"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "updategatheringFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Keruutapahtuman faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gatheringFact"
              }
            }
          }
        },
        "description": "Store Keruutapahtuman faktat",
        "responses": {
          "200": {
            "description": "Stored Keruutapahtuman faktat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringFact"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "deletegatheringFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Keruutapahtuman faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Keruutapahtuman faktat",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gatheringFact/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfgatheringFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Keruutapahtuman faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "description": "Return a Keruutapahtuman faktat.",
        "responses": {
          "200": {
            "description": "a Keruutapahtuman faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gatheringFact/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "gatheringFact"
        ],
        "operationId": "versiongatheringFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Keruutapahtuman faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Keruutapahtuman faktat",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Keruutapahtuman faktat.",
        "responses": {
          "200": {
            "description": "a Keruutapahtuman faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatheringFact"
                }
              }
            }
          }
        }
      }
    },
    "/habitat": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "listhabitat",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of IUCN Red List Evaluation Habitat objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation Habitat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/habitat"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "storehabitat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/habitat"
              }
            }
          }
        },
        "description": "Store IUCN Red List Evaluation Habitat object(s)",
        "responses": {
          "201": {
            "description": "Stored IUCN Red List Evaluation Habitat object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/habitat"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "patchhabitat",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch iucn red list evaluation habitat (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching iucn red list evaluation habitat.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation Habitat.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/habitat"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/habitat/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "searchhabitat",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of IUCN Red List Evaluation Habitat objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation Habitat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/habitat"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/habitat/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "gethabitat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Habitat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a IUCN Red List Evaluation Habitat.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation Habitat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/habitat"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "updatehabitat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Habitat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/habitat"
              }
            }
          }
        },
        "description": "Store IUCN Red List Evaluation Habitat",
        "responses": {
          "200": {
            "description": "Stored IUCN Red List Evaluation Habitat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/habitat"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "deletehabitat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Habitat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete IUCN Red List Evaluation Habitat",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/habitat/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfhabitat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Habitat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "habitat"
        ],
        "description": "Return a IUCN Red List Evaluation Habitat.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation Habitat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/habitat/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "habitat"
        ],
        "operationId": "versionhabitat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Habitat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the IUCN Red List Evaluation Habitat",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a IUCN Red List Evaluation Habitat.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation Habitat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/habitat"
                }
              }
            }
          }
        }
      }
    },
    "/identification": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "listidentification",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Identification objects.",
        "responses": {
          "200": {
            "description": "A list of  Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/identification"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "storeidentification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identification"
              }
            }
          }
        },
        "description": "Store Identification object(s)",
        "responses": {
          "201": {
            "description": "Stored Identification object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identification"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "patchidentification",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch identification (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching identification.",
        "responses": {
          "200": {
            "description": "A list of  Identification.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/identification"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/identification/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "searchidentification",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Identification objects.",
        "responses": {
          "200": {
            "description": "A list of  Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/identification"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/identification/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "getidentification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Identification.",
        "responses": {
          "200": {
            "description": "a Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identification"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "updateidentification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identification"
              }
            }
          }
        },
        "description": "Store Identification",
        "responses": {
          "200": {
            "description": "Stored Identification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identification"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "deleteidentification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Identification",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/identification/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfidentification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "identification"
        ],
        "description": "Return a Identification.",
        "responses": {
          "200": {
            "description": "a Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/identification/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "identification"
        ],
        "operationId": "versionidentification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Identification",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Identification.",
        "responses": {
          "200": {
            "description": "a Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identification"
                }
              }
            }
          }
        }
      }
    },
    "/image": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "listimage",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Image objects.",
        "responses": {
          "200": {
            "description": "A list of  Image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/image"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "storeimage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/image"
              }
            }
          }
        },
        "description": "Store Image object(s)",
        "responses": {
          "201": {
            "description": "Stored Image object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "patchimage",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch image (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching image.",
        "responses": {
          "200": {
            "description": "A list of  Image.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/image"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/image/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "searchimage",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Image objects.",
        "responses": {
          "200": {
            "description": "A list of  Image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/image"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/image/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "getimage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Image.",
        "responses": {
          "200": {
            "description": "a Image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "updateimage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/image"
              }
            }
          }
        },
        "description": "Store Image",
        "responses": {
          "200": {
            "description": "Stored Image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "deleteimage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Image",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/image/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfimage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "image"
        ],
        "description": "Return a Image.",
        "responses": {
          "200": {
            "description": "a Image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/image/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "image"
        ],
        "operationId": "versionimage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Image",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Image.",
        "responses": {
          "200": {
            "description": "a Image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          }
        }
      }
    },
    "/individual": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "listindividual",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of individual objects.",
        "responses": {
          "200": {
            "description": "A list of  individual.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/individual"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "storeindividual",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/individual"
              }
            }
          }
        },
        "description": "Store individual object(s)",
        "responses": {
          "201": {
            "description": "Stored individual object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/individual"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "patchindividual",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch individual (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching individual.",
        "responses": {
          "200": {
            "description": "A list of  individual.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/individual"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/individual/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "searchindividual",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of individual objects.",
        "responses": {
          "200": {
            "description": "A list of  individual.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/individual"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/individual/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "getindividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the individual",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a individual.",
        "responses": {
          "200": {
            "description": "a individual.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/individual"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "updateindividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the individual",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/individual"
              }
            }
          }
        },
        "description": "Store individual",
        "responses": {
          "200": {
            "description": "Stored individual",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/individual"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "deleteindividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the individual",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete individual",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/individual/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfindividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the individual",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "individual"
        ],
        "description": "Return a individual.",
        "responses": {
          "200": {
            "description": "a individual.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/individual/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "individual"
        ],
        "operationId": "versionindividual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the individual",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the individual",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a individual.",
        "responses": {
          "200": {
            "description": "a individual.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/individual"
                }
              }
            }
          }
        }
      }
    },
    "/informalTaxonGroup": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "listinformalTaxonGroup",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Informal Taxon Group objects.",
        "responses": {
          "200": {
            "description": "A list of  Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informalTaxonGroup"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "storeinformalTaxonGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/informalTaxonGroup"
              }
            }
          }
        },
        "description": "Store Informal Taxon Group object(s)",
        "responses": {
          "201": {
            "description": "Stored Informal Taxon Group object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informalTaxonGroup"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "patchinformalTaxonGroup",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch informal taxon group (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching informal taxon group.",
        "responses": {
          "200": {
            "description": "A list of  Informal Taxon Group.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informalTaxonGroup"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/informalTaxonGroup/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "searchinformalTaxonGroup",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Informal Taxon Group objects.",
        "responses": {
          "200": {
            "description": "A list of  Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informalTaxonGroup"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/informalTaxonGroup/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "getinformalTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Informal Taxon Group.",
        "responses": {
          "200": {
            "description": "a Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informalTaxonGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "updateinformalTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/informalTaxonGroup"
              }
            }
          }
        },
        "description": "Store Informal Taxon Group",
        "responses": {
          "200": {
            "description": "Stored Informal Taxon Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informalTaxonGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "deleteinformalTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Informal Taxon Group",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/informalTaxonGroup/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfinformalTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "description": "Return a Informal Taxon Group.",
        "responses": {
          "200": {
            "description": "a Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/informalTaxonGroup/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informalTaxonGroup"
        ],
        "operationId": "versioninformalTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Informal Taxon Group.",
        "responses": {
          "200": {
            "description": "a Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informalTaxonGroup"
                }
              }
            }
          }
        }
      }
    },
    "/informationSystem": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "listinformationSystem",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Information System objects.",
        "responses": {
          "200": {
            "description": "A list of  Information System.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informationSystem"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "storeinformationSystem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/informationSystem"
              }
            }
          }
        },
        "description": "Store Information System object(s)",
        "responses": {
          "201": {
            "description": "Stored Information System object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informationSystem"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "patchinformationSystem",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch information system (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching information system.",
        "responses": {
          "200": {
            "description": "A list of  Information System.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informationSystem"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/informationSystem/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "searchinformationSystem",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Information System objects.",
        "responses": {
          "200": {
            "description": "A list of  Information System.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informationSystem"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/informationSystem/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "getinformationSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Information System",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Information System.",
        "responses": {
          "200": {
            "description": "a Information System.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informationSystem"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "updateinformationSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Information System",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/informationSystem"
              }
            }
          }
        },
        "description": "Store Information System",
        "responses": {
          "200": {
            "description": "Stored Information System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informationSystem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "deleteinformationSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Information System",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Information System",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/informationSystem/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfinformationSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Information System",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "description": "Return a Information System.",
        "responses": {
          "200": {
            "description": "a Information System.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/informationSystem/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "informationSystem"
        ],
        "operationId": "versioninformationSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Information System",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Information System",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Information System.",
        "responses": {
          "200": {
            "description": "a Information System.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/informationSystem"
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluation": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "listiucnRedListEvaluation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of IUCN Red List Evaluation objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluation"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "storeiucnRedListEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iucnRedListEvaluation"
              }
            }
          }
        },
        "description": "Store IUCN Red List Evaluation object(s)",
        "responses": {
          "201": {
            "description": "Stored IUCN Red List Evaluation object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluation"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "patchiucnRedListEvaluation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch iucn red list evaluation (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching iucn red list evaluation.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluation"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluation/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "searchiucnRedListEvaluation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of IUCN Red List Evaluation objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluation"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluation/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "getiucnRedListEvaluation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a IUCN Red List Evaluation.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluation"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "updateiucnRedListEvaluation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iucnRedListEvaluation"
              }
            }
          }
        },
        "description": "Store IUCN Red List Evaluation",
        "responses": {
          "200": {
            "description": "Stored IUCN Red List Evaluation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "deleteiucnRedListEvaluation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete IUCN Red List Evaluation",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluation/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfiucnRedListEvaluation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "description": "Return a IUCN Red List Evaluation.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluation/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluation"
        ],
        "operationId": "versioniucnRedListEvaluation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the IUCN Red List Evaluation",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a IUCN Red List Evaluation.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluation"
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluationYear": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "listiucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of IUCN Evaluation Year objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Evaluation Year.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "storeiucnRedListEvaluationYear",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iucnRedListEvaluationYear"
              }
            }
          }
        },
        "description": "Store IUCN Evaluation Year object(s)",
        "responses": {
          "201": {
            "description": "Stored IUCN Evaluation Year object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "patchiucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch iucn evaluation year (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching iucn evaluation year.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Evaluation Year.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluationYear/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "searchiucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of IUCN Evaluation Year objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Evaluation Year.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluationYear/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "getiucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Evaluation Year",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a IUCN Evaluation Year.",
        "responses": {
          "200": {
            "description": "a IUCN Evaluation Year.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "updateiucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Evaluation Year",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iucnRedListEvaluationYear"
              }
            }
          }
        },
        "description": "Store IUCN Evaluation Year",
        "responses": {
          "200": {
            "description": "Stored IUCN Evaluation Year",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "deleteiucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Evaluation Year",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete IUCN Evaluation Year",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluationYear/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfiucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Evaluation Year",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "description": "Return a IUCN Evaluation Year.",
        "responses": {
          "200": {
            "description": "a IUCN Evaluation Year.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListEvaluationYear/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListEvaluationYear"
        ],
        "operationId": "versioniucnRedListEvaluationYear",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Evaluation Year",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the IUCN Evaluation Year",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a IUCN Evaluation Year.",
        "responses": {
          "200": {
            "description": "a IUCN Evaluation Year.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListTaxonGroup": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "listiucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of IUCN Red List Evaluation Informal Taxon Group objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "storeiucnRedListTaxonGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iucnRedListTaxonGroup"
              }
            }
          }
        },
        "description": "Store IUCN Red List Evaluation Informal Taxon Group object(s)",
        "responses": {
          "201": {
            "description": "Stored IUCN Red List Evaluation Informal Taxon Group object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "patchiucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch iucn red list evaluation informal taxon group (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching iucn red list evaluation informal taxon group.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation Informal Taxon Group.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListTaxonGroup/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "searchiucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of IUCN Red List Evaluation Informal Taxon Group objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Red List Evaluation Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListTaxonGroup/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "getiucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a IUCN Red List Evaluation Informal Taxon Group.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "updateiucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iucnRedListTaxonGroup"
              }
            }
          }
        },
        "description": "Store IUCN Red List Evaluation Informal Taxon Group",
        "responses": {
          "200": {
            "description": "Stored IUCN Red List Evaluation Informal Taxon Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "deleteiucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete IUCN Red List Evaluation Informal Taxon Group",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListTaxonGroup/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfiucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "description": "Return a IUCN Red List Evaluation Informal Taxon Group.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iucnRedListTaxonGroup/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "iucnRedListTaxonGroup"
        ],
        "operationId": "versioniucnRedListTaxonGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Red List Evaluation Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the IUCN Red List Evaluation Informal Taxon Group",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a IUCN Red List Evaluation Informal Taxon Group.",
        "responses": {
          "200": {
            "description": "a IUCN Red List Evaluation Informal Taxon Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                }
              }
            }
          }
        }
      }
    },
    "/measurement": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "listmeasurement",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of measurement objects.",
        "responses": {
          "200": {
            "description": "A list of  measurement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/measurement"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "storemeasurement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/measurement"
              }
            }
          }
        },
        "description": "Store measurement object(s)",
        "responses": {
          "201": {
            "description": "Stored measurement object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/measurement"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "patchmeasurement",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch measurement (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching measurement.",
        "responses": {
          "200": {
            "description": "A list of  measurement.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/measurement"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/measurement/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "searchmeasurement",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of measurement objects.",
        "responses": {
          "200": {
            "description": "A list of  measurement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/measurement"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/measurement/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "getmeasurement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the measurement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a measurement.",
        "responses": {
          "200": {
            "description": "a measurement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/measurement"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "updatemeasurement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the measurement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/measurement"
              }
            }
          }
        },
        "description": "Store measurement",
        "responses": {
          "200": {
            "description": "Stored measurement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/measurement"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "deletemeasurement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the measurement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete measurement",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/measurement/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfmeasurement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the measurement",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "measurement"
        ],
        "description": "Return a measurement.",
        "responses": {
          "200": {
            "description": "a measurement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/measurement/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "measurement"
        ],
        "operationId": "versionmeasurement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the measurement",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the measurement",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a measurement.",
        "responses": {
          "200": {
            "description": "a measurement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/measurement"
                }
              }
            }
          }
        }
      }
    },
    "/multimedia": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "listmultimedia",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of multimedia objects.",
        "responses": {
          "200": {
            "description": "A list of  multimedia.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/multimedia"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "storemultimedia",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/multimedia"
              }
            }
          }
        },
        "description": "Store multimedia object(s)",
        "responses": {
          "201": {
            "description": "Stored multimedia object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/multimedia"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "patchmultimedia",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch multimedia (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching multimedia.",
        "responses": {
          "200": {
            "description": "A list of  multimedia.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/multimedia"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/multimedia/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "searchmultimedia",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of multimedia objects.",
        "responses": {
          "200": {
            "description": "A list of  multimedia.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/multimedia"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/multimedia/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "getmultimedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the multimedia",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a multimedia.",
        "responses": {
          "200": {
            "description": "a multimedia.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/multimedia"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "updatemultimedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the multimedia",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/multimedia"
              }
            }
          }
        },
        "description": "Store multimedia",
        "responses": {
          "200": {
            "description": "Stored multimedia",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/multimedia"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "deletemultimedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the multimedia",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete multimedia",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/multimedia/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfmultimedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the multimedia",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "multimedia"
        ],
        "description": "Return a multimedia.",
        "responses": {
          "200": {
            "description": "a multimedia.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/multimedia/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "multimedia"
        ],
        "operationId": "versionmultimedia",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the multimedia",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the multimedia",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a multimedia.",
        "responses": {
          "200": {
            "description": "a multimedia.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/multimedia"
                }
              }
            }
          }
        }
      }
    },
    "/namedPlace": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "listnamedPlace",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of namedPlace objects.",
        "responses": {
          "200": {
            "description": "A list of  namedPlace.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/namedPlace"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "storenamedPlace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/namedPlace"
              }
            }
          }
        },
        "description": "Store namedPlace object(s)",
        "responses": {
          "201": {
            "description": "Stored namedPlace object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namedPlace"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "patchnamedPlace",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch namedplace (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching namedplace.",
        "responses": {
          "200": {
            "description": "A list of  namedPlace.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/namedPlace"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/namedPlace/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "searchnamedPlace",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of namedPlace objects.",
        "responses": {
          "200": {
            "description": "A list of  namedPlace.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/namedPlace"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/namedPlace/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "getnamedPlace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the namedPlace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a namedPlace.",
        "responses": {
          "200": {
            "description": "a namedPlace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namedPlace"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "updatenamedPlace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the namedPlace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/namedPlace"
              }
            }
          }
        },
        "description": "Store namedPlace",
        "responses": {
          "200": {
            "description": "Stored namedPlace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namedPlace"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "deletenamedPlace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the namedPlace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete namedPlace",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/namedPlace/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfnamedPlace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the namedPlace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "description": "Return a namedPlace.",
        "responses": {
          "200": {
            "description": "a namedPlace.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/namedPlace/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "namedPlace"
        ],
        "operationId": "versionnamedPlace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the namedPlace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the namedPlace",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a namedPlace.",
        "responses": {
          "200": {
            "description": "a namedPlace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namedPlace"
                }
              }
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "listnews",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of News objects.",
        "responses": {
          "200": {
            "description": "A list of  News.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/news"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "storenews",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/news"
              }
            }
          }
        },
        "description": "Store News object(s)",
        "responses": {
          "201": {
            "description": "Stored News object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/news"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "patchnews",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch news (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching news.",
        "responses": {
          "200": {
            "description": "A list of  News.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/news"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/news/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "searchnews",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of News objects.",
        "responses": {
          "200": {
            "description": "A list of  News.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/news"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/news/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "getnews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the News",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a News.",
        "responses": {
          "200": {
            "description": "a News.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/news"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "updatenews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the News",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/news"
              }
            }
          }
        },
        "description": "Store News",
        "responses": {
          "200": {
            "description": "Stored News",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/news"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "deletenews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the News",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete News",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/news/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfnews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the News",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "news"
        ],
        "description": "Return a News.",
        "responses": {
          "200": {
            "description": "a News.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/news/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "news"
        ],
        "operationId": "versionnews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the News",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the News",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a News.",
        "responses": {
          "200": {
            "description": "a News.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/news"
                }
              }
            }
          }
        }
      }
    },
    "/notification": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "listnotification",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of notification objects.",
        "responses": {
          "200": {
            "description": "A list of  notification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/notification"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "storenotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            }
          }
        },
        "description": "Store notification object(s)",
        "responses": {
          "201": {
            "description": "Stored notification object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "patchnotification",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch notification (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching notification.",
        "responses": {
          "200": {
            "description": "A list of  notification.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/notification"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notification/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "searchnotification",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of notification objects.",
        "responses": {
          "200": {
            "description": "A list of  notification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/notification"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notification/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "getnotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a notification.",
        "responses": {
          "200": {
            "description": "a notification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "updatenotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            }
          }
        },
        "description": "Store notification",
        "responses": {
          "200": {
            "description": "Stored notification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "deletenotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete notification",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfnotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "notification"
        ],
        "description": "Return a notification.",
        "responses": {
          "200": {
            "description": "a notification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "notification"
        ],
        "operationId": "versionnotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the notification",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a notification.",
        "responses": {
          "200": {
            "description": "a notification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          }
        }
      }
    },
    "/occurrence": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "listoccurrence",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Occurrence objects.",
        "responses": {
          "200": {
            "description": "A list of  Occurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/occurrence"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "storeoccurrence",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/occurrence"
              }
            }
          }
        },
        "description": "Store Occurrence object(s)",
        "responses": {
          "201": {
            "description": "Stored Occurrence object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/occurrence"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "patchoccurrence",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch occurrence (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching occurrence.",
        "responses": {
          "200": {
            "description": "A list of  Occurrence.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/occurrence"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/occurrence/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "searchoccurrence",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Occurrence objects.",
        "responses": {
          "200": {
            "description": "A list of  Occurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/occurrence"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/occurrence/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "getoccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Occurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Occurrence.",
        "responses": {
          "200": {
            "description": "a Occurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/occurrence"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "updateoccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Occurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/occurrence"
              }
            }
          }
        },
        "description": "Store Occurrence",
        "responses": {
          "200": {
            "description": "Stored Occurrence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/occurrence"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "deleteoccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Occurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Occurrence",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/occurrence/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfoccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Occurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "occurrence"
        ],
        "description": "Return a Occurrence.",
        "responses": {
          "200": {
            "description": "a Occurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/occurrence/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "occurrence"
        ],
        "operationId": "versionoccurrence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Occurrence",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Occurrence",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Occurrence.",
        "responses": {
          "200": {
            "description": "a Occurrence.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/occurrence"
                }
              }
            }
          }
        }
      }
    },
    "/organization": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "listorganization",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Organization objects.",
        "responses": {
          "200": {
            "description": "A list of  Organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/organization"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "storeorganization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organization"
              }
            }
          }
        },
        "description": "Store Organization object(s)",
        "responses": {
          "201": {
            "description": "Stored Organization object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "patchorganization",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch organization (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching organization.",
        "responses": {
          "200": {
            "description": "A list of  Organization.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/organization"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "searchorganization",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Organization objects.",
        "responses": {
          "200": {
            "description": "A list of  Organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/organization"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "getorganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Organization.",
        "responses": {
          "200": {
            "description": "a Organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "updateorganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organization"
              }
            }
          }
        },
        "description": "Store Organization",
        "responses": {
          "200": {
            "description": "Stored Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "deleteorganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Organization",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organization/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOforganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "organization"
        ],
        "description": "Return a Organization.",
        "responses": {
          "200": {
            "description": "a Organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organization/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "organization"
        ],
        "operationId": "versionorganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Organization",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Organization.",
        "responses": {
          "200": {
            "description": "a Organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization"
                }
              }
            }
          }
        }
      }
    },
    "/permit": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "listpermit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of permit objects.",
        "responses": {
          "200": {
            "description": "A list of  permit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/permit"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "storepermit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/permit"
              }
            }
          }
        },
        "description": "Store permit object(s)",
        "responses": {
          "201": {
            "description": "Stored permit object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permit"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "patchpermit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch permit (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching permit.",
        "responses": {
          "200": {
            "description": "A list of  permit.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/permit"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/permit/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "searchpermit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of permit objects.",
        "responses": {
          "200": {
            "description": "A list of  permit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/permit"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/permit/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "getpermit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the permit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a permit.",
        "responses": {
          "200": {
            "description": "a permit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permit"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "updatepermit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the permit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/permit"
              }
            }
          }
        },
        "description": "Store permit",
        "responses": {
          "200": {
            "description": "Stored permit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "deletepermit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the permit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete permit",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/permit/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfpermit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the permit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "permit"
        ],
        "description": "Return a permit.",
        "responses": {
          "200": {
            "description": "a permit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/permit/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "permit"
        ],
        "operationId": "versionpermit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the permit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the permit",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a permit.",
        "responses": {
          "200": {
            "description": "a permit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permit"
                }
              }
            }
          }
        }
      }
    },
    "/person": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "listperson",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Person objects.",
        "responses": {
          "200": {
            "description": "A list of  Person.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/person"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "storeperson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/person"
              }
            }
          }
        },
        "description": "Store Person object(s)",
        "responses": {
          "201": {
            "description": "Stored Person object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "patchperson",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch person (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching person.",
        "responses": {
          "200": {
            "description": "A list of  Person.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/person"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/person/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "searchperson",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Person objects.",
        "responses": {
          "200": {
            "description": "A list of  Person.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/person"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/person/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "getperson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Person",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Person.",
        "responses": {
          "200": {
            "description": "a Person.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "updateperson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Person",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/person"
              }
            }
          }
        },
        "description": "Store Person",
        "responses": {
          "200": {
            "description": "Stored Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "deleteperson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Person",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Person",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/person/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfperson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Person",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "person"
        ],
        "description": "Return a Person.",
        "responses": {
          "200": {
            "description": "a Person.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/person/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "person"
        ],
        "operationId": "versionperson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Person",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Person",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Person.",
        "responses": {
          "200": {
            "description": "a Person.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            }
          }
        }
      }
    },
    "/preparation": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "listpreparation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of preparation objects.",
        "responses": {
          "200": {
            "description": "A list of  preparation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/preparation"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "storepreparation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/preparation"
              }
            }
          }
        },
        "description": "Store preparation object(s)",
        "responses": {
          "201": {
            "description": "Stored preparation object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preparation"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "patchpreparation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch preparation (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching preparation.",
        "responses": {
          "200": {
            "description": "A list of  preparation.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/preparation"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/preparation/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "searchpreparation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of preparation objects.",
        "responses": {
          "200": {
            "description": "A list of  preparation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/preparation"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/preparation/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "getpreparation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the preparation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a preparation.",
        "responses": {
          "200": {
            "description": "a preparation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preparation"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "updatepreparation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the preparation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/preparation"
              }
            }
          }
        },
        "description": "Store preparation",
        "responses": {
          "200": {
            "description": "Stored preparation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preparation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "deletepreparation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the preparation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete preparation",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preparation/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfpreparation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the preparation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "preparation"
        ],
        "description": "Return a preparation.",
        "responses": {
          "200": {
            "description": "a preparation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preparation/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "preparation"
        ],
        "operationId": "versionpreparation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the preparation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the preparation",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a preparation.",
        "responses": {
          "200": {
            "description": "a preparation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preparation"
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "listprofile",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of profile objects.",
        "responses": {
          "200": {
            "description": "A list of  profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/profile"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "storeprofile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/profile"
              }
            }
          }
        },
        "description": "Store profile object(s)",
        "responses": {
          "201": {
            "description": "Stored profile object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "patchprofile",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch profile (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching profile.",
        "responses": {
          "200": {
            "description": "A list of  profile.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/profile"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/profile/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "searchprofile",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of profile objects.",
        "responses": {
          "200": {
            "description": "A list of  profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/profile"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/profile/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "getprofile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a profile.",
        "responses": {
          "200": {
            "description": "a profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "updateprofile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/profile"
              }
            }
          }
        },
        "description": "Store profile",
        "responses": {
          "200": {
            "description": "Stored profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "deleteprofile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete profile",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfprofile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "profile"
        ],
        "description": "Return a profile.",
        "responses": {
          "200": {
            "description": "a profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "profile"
        ],
        "operationId": "versionprofile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the profile",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a profile.",
        "responses": {
          "200": {
            "description": "a profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          }
        }
      }
    },
    "/publication": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "listpublication",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Publication objects.",
        "responses": {
          "200": {
            "description": "A list of  Publication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/publication"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "storepublication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publication"
              }
            }
          }
        },
        "description": "Store Publication object(s)",
        "responses": {
          "201": {
            "description": "Stored Publication object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publication"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "patchpublication",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch publication (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching publication.",
        "responses": {
          "200": {
            "description": "A list of  Publication.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/publication"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/publication/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "searchpublication",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Publication objects.",
        "responses": {
          "200": {
            "description": "A list of  Publication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/publication"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/publication/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "getpublication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Publication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Publication.",
        "responses": {
          "200": {
            "description": "a Publication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publication"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "updatepublication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Publication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publication"
              }
            }
          }
        },
        "description": "Store Publication",
        "responses": {
          "200": {
            "description": "Stored Publication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publication"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "deletepublication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Publication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Publication",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/publication/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfpublication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Publication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "publication"
        ],
        "description": "Return a Publication.",
        "responses": {
          "200": {
            "description": "a Publication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/publication/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "publication"
        ],
        "operationId": "versionpublication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Publication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Publication",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Publication.",
        "responses": {
          "200": {
            "description": "a Publication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publication"
                }
              }
            }
          }
        }
      }
    },
    "/regionalStatus": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "listregionalStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Instances of this class tell endangerment of a certain area and notes about the area objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class tell endangerment of a certain area and notes about the area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/regionalStatus"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "storeregionalStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/regionalStatus"
              }
            }
          }
        },
        "description": "Store Instances of this class tell endangerment of a certain area and notes about the area object(s)",
        "responses": {
          "201": {
            "description": "Stored Instances of this class tell endangerment of a certain area and notes about the area object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/regionalStatus"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "patchregionalStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch instances of this class tell endangerment of a certain area and notes about the area (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching instances of this class tell endangerment of a certain area and notes about the area.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class tell endangerment of a certain area and notes about the area.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/regionalStatus"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/regionalStatus/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "searchregionalStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Instances of this class tell endangerment of a certain area and notes about the area objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class tell endangerment of a certain area and notes about the area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/regionalStatus"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/regionalStatus/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "getregionalStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class tell endangerment of a certain area and notes about the area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Instances of this class tell endangerment of a certain area and notes about the area.",
        "responses": {
          "200": {
            "description": "a Instances of this class tell endangerment of a certain area and notes about the area.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/regionalStatus"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "updateregionalStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class tell endangerment of a certain area and notes about the area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/regionalStatus"
              }
            }
          }
        },
        "description": "Store Instances of this class tell endangerment of a certain area and notes about the area",
        "responses": {
          "200": {
            "description": "Stored Instances of this class tell endangerment of a certain area and notes about the area",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/regionalStatus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "deleteregionalStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class tell endangerment of a certain area and notes about the area",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Instances of this class tell endangerment of a certain area and notes about the area",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/regionalStatus/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfregionalStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class tell endangerment of a certain area and notes about the area",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "description": "Return a Instances of this class tell endangerment of a certain area and notes about the area.",
        "responses": {
          "200": {
            "description": "a Instances of this class tell endangerment of a certain area and notes about the area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/regionalStatus/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "regionalStatus"
        ],
        "operationId": "versionregionalStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class tell endangerment of a certain area and notes about the area",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Instances of this class tell endangerment of a certain area and notes about the area",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Instances of this class tell endangerment of a certain area and notes about the area.",
        "responses": {
          "200": {
            "description": "a Instances of this class tell endangerment of a certain area and notes about the area.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/regionalStatus"
                }
              }
            }
          }
        }
      }
    },
    "/reserve": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "listreserve",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of reserve objects.",
        "responses": {
          "200": {
            "description": "A list of  reserve.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/reserve"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "storereserve",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reserve"
              }
            }
          }
        },
        "description": "Store reserve object(s)",
        "responses": {
          "201": {
            "description": "Stored reserve object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reserve"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "patchreserve",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch reserve (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching reserve.",
        "responses": {
          "200": {
            "description": "A list of  reserve.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/reserve"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reserve/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "searchreserve",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of reserve objects.",
        "responses": {
          "200": {
            "description": "A list of  reserve.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/reserve"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reserve/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "getreserve",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the reserve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a reserve.",
        "responses": {
          "200": {
            "description": "a reserve.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reserve"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "updatereserve",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the reserve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reserve"
              }
            }
          }
        },
        "description": "Store reserve",
        "responses": {
          "200": {
            "description": "Stored reserve",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reserve"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "deletereserve",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the reserve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete reserve",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reserve/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfreserve",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the reserve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "reserve"
        ],
        "description": "Return a reserve.",
        "responses": {
          "200": {
            "description": "a reserve.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reserve/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "reserve"
        ],
        "operationId": "versionreserve",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the reserve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the reserve",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a reserve.",
        "responses": {
          "200": {
            "description": "a reserve.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reserve"
                }
              }
            }
          }
        }
      }
    },
    "/sample": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "listsample",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Specimen sample objects.",
        "responses": {
          "200": {
            "description": "A list of  Specimen sample.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/sample"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "storesample",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sample"
              }
            }
          }
        },
        "description": "Store Specimen sample object(s)",
        "responses": {
          "201": {
            "description": "Stored Specimen sample object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sample"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "patchsample",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch specimen sample (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching specimen sample.",
        "responses": {
          "200": {
            "description": "A list of  Specimen sample.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/sample"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/sample/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "searchsample",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Specimen sample objects.",
        "responses": {
          "200": {
            "description": "A list of  Specimen sample.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/sample"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/sample/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "getsample",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen sample",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Specimen sample.",
        "responses": {
          "200": {
            "description": "a Specimen sample.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sample"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "updatesample",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen sample",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sample"
              }
            }
          }
        },
        "description": "Store Specimen sample",
        "responses": {
          "200": {
            "description": "Stored Specimen sample",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sample"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "deletesample",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen sample",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Specimen sample",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sample/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfsample",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen sample",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "sample"
        ],
        "description": "Return a Specimen sample.",
        "responses": {
          "200": {
            "description": "a Specimen sample.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sample/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "sample"
        ],
        "operationId": "versionsample",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen sample",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Specimen sample",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Specimen sample.",
        "responses": {
          "200": {
            "description": "a Specimen sample.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sample"
                }
              }
            }
          }
        }
      }
    },
    "/subUnit": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "listsubUnit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of subUnit objects.",
        "responses": {
          "200": {
            "description": "A list of  subUnit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subUnit"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "storesubUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subUnit"
              }
            }
          }
        },
        "description": "Store subUnit object(s)",
        "responses": {
          "201": {
            "description": "Stored subUnit object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subUnit"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "patchsubUnit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch subunit (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching subunit.",
        "responses": {
          "200": {
            "description": "A list of  subUnit.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subUnit"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subUnit/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "searchsubUnit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of subUnit objects.",
        "responses": {
          "200": {
            "description": "A list of  subUnit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subUnit"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subUnit/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "getsubUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the subUnit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a subUnit.",
        "responses": {
          "200": {
            "description": "a subUnit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subUnit"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "updatesubUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the subUnit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subUnit"
              }
            }
          }
        },
        "description": "Store subUnit",
        "responses": {
          "200": {
            "description": "Stored subUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subUnit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "deletesubUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the subUnit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete subUnit",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subUnit/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfsubUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the subUnit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "subUnit"
        ],
        "description": "Return a subUnit.",
        "responses": {
          "200": {
            "description": "a subUnit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subUnit/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "subUnit"
        ],
        "operationId": "versionsubUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the subUnit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the subUnit",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a subUnit.",
        "responses": {
          "200": {
            "description": "a subUnit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subUnit"
                }
              }
            }
          }
        }
      }
    },
    "/tag": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "listtag",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of tag objects.",
        "responses": {
          "200": {
            "description": "A list of  tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "storetag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          }
        },
        "description": "Store tag object(s)",
        "responses": {
          "201": {
            "description": "Stored tag object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "patchtag",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch tag (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching tag.",
        "responses": {
          "200": {
            "description": "A list of  tag.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tag/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "searchtag",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of tag objects.",
        "responses": {
          "200": {
            "description": "A list of  tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tag/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "gettag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a tag.",
        "responses": {
          "200": {
            "description": "a tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "updatetag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          }
        },
        "description": "Store tag",
        "responses": {
          "200": {
            "description": "Stored tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "deletetag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete tag",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tag/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "tag"
        ],
        "description": "Return a tag.",
        "responses": {
          "200": {
            "description": "a tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tag/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "tag"
        ],
        "operationId": "versiontag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the tag",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a tag.",
        "responses": {
          "200": {
            "description": "a tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        }
      }
    },
    "/taxon": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "listtaxon",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Taxon objects.",
        "responses": {
          "200": {
            "description": "A list of  Taxon.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxon"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "storetaxon",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxon"
              }
            }
          }
        },
        "description": "Store Taxon object(s)",
        "responses": {
          "201": {
            "description": "Stored Taxon object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxon"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "patchtaxon",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch taxon (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching taxon.",
        "responses": {
          "200": {
            "description": "A list of  Taxon.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxon"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxon/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "searchtaxon",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Taxon objects.",
        "responses": {
          "200": {
            "description": "A list of  Taxon.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxon"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxon/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "gettaxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Taxon.",
        "responses": {
          "200": {
            "description": "a Taxon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxon"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "updatetaxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxon"
              }
            }
          }
        },
        "description": "Store Taxon",
        "responses": {
          "200": {
            "description": "Stored Taxon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxon"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "deletetaxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Taxon",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxon/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftaxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "taxon"
        ],
        "description": "Return a Taxon.",
        "responses": {
          "200": {
            "description": "a Taxon.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxon/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxon"
        ],
        "operationId": "versiontaxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Taxon",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Taxon.",
        "responses": {
          "200": {
            "description": "a Taxon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxon"
                }
              }
            }
          }
        }
      }
    },
    "/taxonCensus": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "listtaxonCensus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Completeness of census objects.",
        "responses": {
          "200": {
            "description": "A list of  Completeness of census.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonCensus"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "storetaxonCensus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonCensus"
              }
            }
          }
        },
        "description": "Store Completeness of census object(s)",
        "responses": {
          "201": {
            "description": "Stored Completeness of census object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCensus"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "patchtaxonCensus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch completeness of census (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching completeness of census.",
        "responses": {
          "200": {
            "description": "A list of  Completeness of census.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonCensus"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonCensus/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "searchtaxonCensus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Completeness of census objects.",
        "responses": {
          "200": {
            "description": "A list of  Completeness of census.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonCensus"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonCensus/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "gettaxonCensus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Completeness of census",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Completeness of census.",
        "responses": {
          "200": {
            "description": "a Completeness of census.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCensus"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "updatetaxonCensus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Completeness of census",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonCensus"
              }
            }
          }
        },
        "description": "Store Completeness of census",
        "responses": {
          "200": {
            "description": "Stored Completeness of census",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCensus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "deletetaxonCensus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Completeness of census",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Completeness of census",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonCensus/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftaxonCensus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Completeness of census",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "description": "Return a Completeness of census.",
        "responses": {
          "200": {
            "description": "a Completeness of census.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonCensus/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonCensus"
        ],
        "operationId": "versiontaxonCensus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Completeness of census",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Completeness of census",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Completeness of census.",
        "responses": {
          "200": {
            "description": "a Completeness of census.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCensus"
                }
              }
            }
          }
        }
      }
    },
    "/taxonConcept": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "listtaxonConcept",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Taxon concept objects.",
        "responses": {
          "200": {
            "description": "A list of  Taxon concept.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonConcept"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "storetaxonConcept",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonConcept"
              }
            }
          }
        },
        "description": "Store Taxon concept object(s)",
        "responses": {
          "201": {
            "description": "Stored Taxon concept object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonConcept"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "patchtaxonConcept",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch taxon concept (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching taxon concept.",
        "responses": {
          "200": {
            "description": "A list of  Taxon concept.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonConcept"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonConcept/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "searchtaxonConcept",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Taxon concept objects.",
        "responses": {
          "200": {
            "description": "A list of  Taxon concept.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonConcept"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonConcept/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "gettaxonConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Taxon concept.",
        "responses": {
          "200": {
            "description": "a Taxon concept.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonConcept"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "updatetaxonConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonConcept"
              }
            }
          }
        },
        "description": "Store Taxon concept",
        "responses": {
          "200": {
            "description": "Stored Taxon concept",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonConcept"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "deletetaxonConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Taxon concept",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonConcept/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftaxonConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "description": "Return a Taxon concept.",
        "responses": {
          "200": {
            "description": "a Taxon concept.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonConcept/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonConcept"
        ],
        "operationId": "versiontaxonConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon concept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Taxon concept",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Taxon concept.",
        "responses": {
          "200": {
            "description": "a Taxon concept.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonConcept"
                }
              }
            }
          }
        }
      }
    },
    "/taxonGroupIucnEditors": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "listtaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of IUCN Editors objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Editors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonGroupIucnEditors"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "storetaxonGroupIucnEditors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonGroupIucnEditors"
              }
            }
          }
        },
        "description": "Store IUCN Editors object(s)",
        "responses": {
          "201": {
            "description": "Stored IUCN Editors object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGroupIucnEditors"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "patchtaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch iucn editors (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching iucn editors.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Editors.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonGroupIucnEditors"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonGroupIucnEditors/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "searchtaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of IUCN Editors objects.",
        "responses": {
          "200": {
            "description": "A list of  IUCN Editors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonGroupIucnEditors"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonGroupIucnEditors/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "gettaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Editors",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a IUCN Editors.",
        "responses": {
          "200": {
            "description": "a IUCN Editors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGroupIucnEditors"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "updatetaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Editors",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonGroupIucnEditors"
              }
            }
          }
        },
        "description": "Store IUCN Editors",
        "responses": {
          "200": {
            "description": "Stored IUCN Editors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGroupIucnEditors"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "deletetaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Editors",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete IUCN Editors",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonGroupIucnEditors/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Editors",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "description": "Return a IUCN Editors.",
        "responses": {
          "200": {
            "description": "a IUCN Editors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonGroupIucnEditors/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonGroupIucnEditors"
        ],
        "operationId": "versiontaxonGroupIucnEditors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the IUCN Editors",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the IUCN Editors",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a IUCN Editors.",
        "responses": {
          "200": {
            "description": "a IUCN Editors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGroupIucnEditors"
                }
              }
            }
          }
        }
      }
    },
    "/taxonInteraction": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "listtaxonInteraction",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Taxon interaction objects.",
        "responses": {
          "200": {
            "description": "A list of  Taxon interaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonInteraction"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "storetaxonInteraction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonInteraction"
              }
            }
          }
        },
        "description": "Store Taxon interaction object(s)",
        "responses": {
          "201": {
            "description": "Stored Taxon interaction object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonInteraction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "patchtaxonInteraction",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch taxon interaction (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching taxon interaction.",
        "responses": {
          "200": {
            "description": "A list of  Taxon interaction.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonInteraction"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonInteraction/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "searchtaxonInteraction",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Taxon interaction objects.",
        "responses": {
          "200": {
            "description": "A list of  Taxon interaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonInteraction"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonInteraction/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "gettaxonInteraction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon interaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Taxon interaction.",
        "responses": {
          "200": {
            "description": "a Taxon interaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonInteraction"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "updatetaxonInteraction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon interaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonInteraction"
              }
            }
          }
        },
        "description": "Store Taxon interaction",
        "responses": {
          "200": {
            "description": "Stored Taxon interaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonInteraction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "deletetaxonInteraction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon interaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Taxon interaction",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonInteraction/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftaxonInteraction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon interaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "description": "Return a Taxon interaction.",
        "responses": {
          "200": {
            "description": "a Taxon interaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonInteraction/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonInteraction"
        ],
        "operationId": "versiontaxonInteraction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Taxon interaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Taxon interaction",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Taxon interaction.",
        "responses": {
          "200": {
            "description": "a Taxon interaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonInteraction"
                }
              }
            }
          }
        }
      }
    },
    "/taxonSet": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "listtaxonSet",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Instances of this class are a taxon sets objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class are a taxon sets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonSet"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "storetaxonSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonSet"
              }
            }
          }
        },
        "description": "Store Instances of this class are a taxon sets object(s)",
        "responses": {
          "201": {
            "description": "Stored Instances of this class are a taxon sets object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonSet"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "patchtaxonSet",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch instances of this class are a taxon sets (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching instances of this class are a taxon sets.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class are a taxon sets.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonSet"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonSet/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "searchtaxonSet",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Instances of this class are a taxon sets objects.",
        "responses": {
          "200": {
            "description": "A list of  Instances of this class are a taxon sets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonSet"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/taxonSet/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "gettaxonSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are a taxon sets",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Instances of this class are a taxon sets.",
        "responses": {
          "200": {
            "description": "a Instances of this class are a taxon sets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonSet"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "updatetaxonSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are a taxon sets",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxonSet"
              }
            }
          }
        },
        "description": "Store Instances of this class are a taxon sets",
        "responses": {
          "200": {
            "description": "Stored Instances of this class are a taxon sets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonSet"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "deletetaxonSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are a taxon sets",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Instances of this class are a taxon sets",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonSet/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftaxonSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are a taxon sets",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "description": "Return a Instances of this class are a taxon sets.",
        "responses": {
          "200": {
            "description": "a Instances of this class are a taxon sets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonSet/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "taxonSet"
        ],
        "operationId": "versiontaxonSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Instances of this class are a taxon sets",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Instances of this class are a taxon sets",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Instances of this class are a taxon sets.",
        "responses": {
          "200": {
            "description": "a Instances of this class are a taxon sets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonSet"
                }
              }
            }
          }
        }
      }
    },
    "/transaction": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "listtransaction",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Transaction objects.",
        "responses": {
          "200": {
            "description": "A list of  Transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "storetransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transaction"
              }
            }
          }
        },
        "description": "Store Transaction object(s)",
        "responses": {
          "201": {
            "description": "Stored Transaction object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "patchtransaction",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch transaction (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching transaction.",
        "responses": {
          "200": {
            "description": "A list of  Transaction.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transaction/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "searchtransaction",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Transaction objects.",
        "responses": {
          "200": {
            "description": "A list of  Transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transaction/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "gettransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Transaction.",
        "responses": {
          "200": {
            "description": "a Transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "updatetransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transaction"
              }
            }
          }
        },
        "description": "Store Transaction",
        "responses": {
          "200": {
            "description": "Stored Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "deletetransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Transaction",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transaction/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "transaction"
        ],
        "description": "Return a Transaction.",
        "responses": {
          "200": {
            "description": "a Transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transaction/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transaction"
        ],
        "operationId": "versiontransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Transaction",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Transaction.",
        "responses": {
          "200": {
            "description": "a Transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          }
        }
      }
    },
    "/transactionEvent": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "listtransactionEvent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Transaction Event objects.",
        "responses": {
          "200": {
            "description": "A list of  Transaction Event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionEvent"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "storetransactionEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionEvent"
              }
            }
          }
        },
        "description": "Store Transaction Event object(s)",
        "responses": {
          "201": {
            "description": "Stored Transaction Event object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionEvent"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "patchtransactionEvent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch transaction event (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching transaction event.",
        "responses": {
          "200": {
            "description": "A list of  Transaction Event.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionEvent"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactionEvent/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "searchtransactionEvent",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Transaction Event objects.",
        "responses": {
          "200": {
            "description": "A list of  Transaction Event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionEvent"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactionEvent/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "gettransactionEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Transaction Event.",
        "responses": {
          "200": {
            "description": "a Transaction Event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionEvent"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "updatetransactionEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionEvent"
              }
            }
          }
        },
        "description": "Store Transaction Event",
        "responses": {
          "200": {
            "description": "Stored Transaction Event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionEvent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "deletetransactionEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Transaction Event",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactionEvent/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftransactionEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "description": "Return a Transaction Event.",
        "responses": {
          "200": {
            "description": "a Transaction Event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactionEvent/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionEvent"
        ],
        "operationId": "versiontransactionEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Transaction Event",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Transaction Event.",
        "responses": {
          "200": {
            "description": "a Transaction Event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionEvent"
                }
              }
            }
          }
        }
      }
    },
    "/transactionItem": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "listtransactionItem",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Transaction Item objects.",
        "responses": {
          "200": {
            "description": "A list of  Transaction Item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionItem"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "storetransactionItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionItem"
              }
            }
          }
        },
        "description": "Store Transaction Item object(s)",
        "responses": {
          "201": {
            "description": "Stored Transaction Item object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionItem"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "patchtransactionItem",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch transaction item (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching transaction item.",
        "responses": {
          "200": {
            "description": "A list of  Transaction Item.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionItem"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactionItem/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "searchtransactionItem",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Transaction Item objects.",
        "responses": {
          "200": {
            "description": "A list of  Transaction Item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionItem"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactionItem/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "gettransactionItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Transaction Item.",
        "responses": {
          "200": {
            "description": "a Transaction Item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "updatetransactionItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionItem"
              }
            }
          }
        },
        "description": "Store Transaction Item",
        "responses": {
          "200": {
            "description": "Stored Transaction Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "deletetransactionItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Transaction Item",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactionItem/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftransactionItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "description": "Return a Transaction Item.",
        "responses": {
          "200": {
            "description": "a Transaction Item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactionItem/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "transactionItem"
        ],
        "operationId": "versiontransactionItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Transaction Item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Transaction Item",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Transaction Item.",
        "responses": {
          "200": {
            "description": "a Transaction Item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionItem"
                }
              }
            }
          }
        }
      }
    },
    "/translation": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "listtranslation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of translation objects.",
        "responses": {
          "200": {
            "description": "A list of  translation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/translation"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "storetranslation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/translation"
              }
            }
          }
        },
        "description": "Store translation object(s)",
        "responses": {
          "201": {
            "description": "Stored translation object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translation"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "patchtranslation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch translation (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching translation.",
        "responses": {
          "200": {
            "description": "A list of  translation.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/translation"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/translation/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "searchtranslation",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of translation objects.",
        "responses": {
          "200": {
            "description": "A list of  translation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/translation"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/translation/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "gettranslation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a translation.",
        "responses": {
          "200": {
            "description": "a translation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translation"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "updatetranslation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/translation"
              }
            }
          }
        },
        "description": "Store translation",
        "responses": {
          "200": {
            "description": "Stored translation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "deletetranslation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete translation",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/translation/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftranslation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "translation"
        ],
        "description": "Return a translation.",
        "responses": {
          "200": {
            "description": "a translation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/translation/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "translation"
        ],
        "operationId": "versiontranslation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the translation",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a translation.",
        "responses": {
          "200": {
            "description": "a translation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translation"
                }
              }
            }
          }
        }
      }
    },
    "/typeSpecimen": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "listtypeSpecimen",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Identification objects.",
        "responses": {
          "200": {
            "description": "A list of  Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/typeSpecimen"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "storetypeSpecimen",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/typeSpecimen"
              }
            }
          }
        },
        "description": "Store Identification object(s)",
        "responses": {
          "201": {
            "description": "Stored Identification object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimen"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "patchtypeSpecimen",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch identification (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching identification.",
        "responses": {
          "200": {
            "description": "A list of  Identification.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/typeSpecimen"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/typeSpecimen/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "searchtypeSpecimen",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Identification objects.",
        "responses": {
          "200": {
            "description": "A list of  Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/typeSpecimen"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/typeSpecimen/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "gettypeSpecimen",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Identification.",
        "responses": {
          "200": {
            "description": "a Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimen"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "updatetypeSpecimen",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/typeSpecimen"
              }
            }
          }
        },
        "description": "Store Identification",
        "responses": {
          "200": {
            "description": "Stored Identification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimen"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "deletetypeSpecimen",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Identification",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/typeSpecimen/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOftypeSpecimen",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "description": "Return a Identification.",
        "responses": {
          "200": {
            "description": "a Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/typeSpecimen/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "typeSpecimen"
        ],
        "operationId": "versiontypeSpecimen",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Identification",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Identification.",
        "responses": {
          "200": {
            "description": "a Identification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimen"
                }
              }
            }
          }
        }
      }
    },
    "/unit": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "listunit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Specimen objects.",
        "responses": {
          "200": {
            "description": "A list of  Specimen.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unit"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "storeunit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unit"
              }
            }
          }
        },
        "description": "Store Specimen object(s)",
        "responses": {
          "201": {
            "description": "Stored Specimen object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "patchunit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch specimen (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching specimen.",
        "responses": {
          "200": {
            "description": "A list of  Specimen.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unit"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/unit/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "searchunit",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Specimen objects.",
        "responses": {
          "200": {
            "description": "A list of  Specimen.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unit"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/unit/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "getunit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Specimen.",
        "responses": {
          "200": {
            "description": "a Specimen.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "updateunit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unit"
              }
            }
          }
        },
        "description": "Store Specimen",
        "responses": {
          "200": {
            "description": "Stored Specimen",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "deleteunit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Specimen",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unit/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfunit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "unit"
        ],
        "description": "Return a Specimen.",
        "responses": {
          "200": {
            "description": "a Specimen.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unit/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unit"
        ],
        "operationId": "versionunit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Specimen",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Specimen",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Specimen.",
        "responses": {
          "200": {
            "description": "a Specimen.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            }
          }
        }
      }
    },
    "/unitFact": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "listunitFact",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Näytteen / havainnon faktat objects.",
        "responses": {
          "200": {
            "description": "A list of  Näytteen / havainnon faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitFact"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "storeunitFact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unitFact"
              }
            }
          }
        },
        "description": "Store Näytteen / havainnon faktat object(s)",
        "responses": {
          "201": {
            "description": "Stored Näytteen / havainnon faktat object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitFact"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "patchunitFact",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch näytteen / havainnon faktat (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching näytteen / havainnon faktat.",
        "responses": {
          "200": {
            "description": "A list of  Näytteen / havainnon faktat.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitFact"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/unitFact/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "searchunitFact",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Näytteen / havainnon faktat objects.",
        "responses": {
          "200": {
            "description": "A list of  Näytteen / havainnon faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitFact"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/unitFact/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "getunitFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Näytteen / havainnon faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Näytteen / havainnon faktat.",
        "responses": {
          "200": {
            "description": "a Näytteen / havainnon faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitFact"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "updateunitFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Näytteen / havainnon faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unitFact"
              }
            }
          }
        },
        "description": "Store Näytteen / havainnon faktat",
        "responses": {
          "200": {
            "description": "Stored Näytteen / havainnon faktat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitFact"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "deleteunitFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Näytteen / havainnon faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Näytteen / havainnon faktat",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unitFact/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfunitFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Näytteen / havainnon faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "unitFact"
        ],
        "description": "Return a Näytteen / havainnon faktat.",
        "responses": {
          "200": {
            "description": "a Näytteen / havainnon faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unitFact/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitFact"
        ],
        "operationId": "versionunitFact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Näytteen / havainnon faktat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Näytteen / havainnon faktat",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Näytteen / havainnon faktat.",
        "responses": {
          "200": {
            "description": "a Näytteen / havainnon faktat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitFact"
                }
              }
            }
          }
        }
      }
    },
    "/unitGathering": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "listunitGathering",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Havainnon keruutiedot objects.",
        "responses": {
          "200": {
            "description": "A list of  Havainnon keruutiedot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitGathering"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "storeunitGathering",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unitGathering"
              }
            }
          }
        },
        "description": "Store Havainnon keruutiedot object(s)",
        "responses": {
          "201": {
            "description": "Stored Havainnon keruutiedot object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitGathering"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "patchunitGathering",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch havainnon keruutiedot (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching havainnon keruutiedot.",
        "responses": {
          "200": {
            "description": "A list of  Havainnon keruutiedot.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitGathering"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/unitGathering/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "searchunitGathering",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Havainnon keruutiedot objects.",
        "responses": {
          "200": {
            "description": "A list of  Havainnon keruutiedot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitGathering"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/unitGathering/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "getunitGathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Havainnon keruutiedot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Havainnon keruutiedot.",
        "responses": {
          "200": {
            "description": "a Havainnon keruutiedot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitGathering"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "updateunitGathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Havainnon keruutiedot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unitGathering"
              }
            }
          }
        },
        "description": "Store Havainnon keruutiedot",
        "responses": {
          "200": {
            "description": "Stored Havainnon keruutiedot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitGathering"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "deleteunitGathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Havainnon keruutiedot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Havainnon keruutiedot",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unitGathering/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfunitGathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Havainnon keruutiedot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "description": "Return a Havainnon keruutiedot.",
        "responses": {
          "200": {
            "description": "a Havainnon keruutiedot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unitGathering/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "unitGathering"
        ],
        "operationId": "versionunitGathering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Havainnon keruutiedot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Havainnon keruutiedot",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Havainnon keruutiedot.",
        "responses": {
          "200": {
            "description": "a Havainnon keruutiedot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unitGathering"
                }
              }
            }
          }
        }
      }
    },
    "/validator": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "listvalidator",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of validator objects.",
        "responses": {
          "200": {
            "description": "A list of  validator.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/validator"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "storevalidator",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validator"
              }
            }
          }
        },
        "description": "Store validator object(s)",
        "responses": {
          "201": {
            "description": "Stored validator object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validator"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "patchvalidator",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch validator (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching validator.",
        "responses": {
          "200": {
            "description": "A list of  validator.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/validator"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/validator/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "searchvalidator",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of validator objects.",
        "responses": {
          "200": {
            "description": "A list of  validator.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/validator"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/validator/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "getvalidator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the validator",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a validator.",
        "responses": {
          "200": {
            "description": "a validator.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validator"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "updatevalidator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the validator",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validator"
              }
            }
          }
        },
        "description": "Store validator",
        "responses": {
          "200": {
            "description": "Stored validator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validator"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "deletevalidator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the validator",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete validator",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/validator/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfvalidator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the validator",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "validator"
        ],
        "description": "Return a validator.",
        "responses": {
          "200": {
            "description": "a validator.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/validator/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "validator"
        ],
        "operationId": "versionvalidator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the validator",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the validator",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a validator.",
        "responses": {
          "200": {
            "description": "a validator.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validator"
                }
              }
            }
          }
        }
      }
    },
    "/video": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "listvideo",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return list of Video objects.",
        "responses": {
          "200": {
            "description": "A list of  Video.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/video"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "storevideo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/video"
              }
            }
          }
        },
        "description": "Store Video object(s)",
        "responses": {
          "201": {
            "description": "Stored Video object(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "patchvideo",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Show result only without saving it",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the change to this many items (MAX 10000)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/esSearchObj"
              }
            }
          }
        },
        "description": "Patch video (MAX 10000).\n        You can use Elasticsearch [search query](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/search-your-data.html) with property patch for json patch [operations](http://jsonpatch.com/)\n        to update every matching video.",
        "responses": {
          "200": {
            "description": "A list of  Video.",
            "content": {
              "application/json": {
                "example": {
                  "affected": 0
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "affected": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/video"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/video/_search": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "searchvideo",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string to search by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Elasticsearch search query"
              }
            }
          }
        },
        "description": "Return list of Video objects.",
        "responses": {
          "200": {
            "description": "A list of  Video.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "@type": {
                      "type": "string"
                    },
                    "view": {
                      "$ref": "#/components/schemas/pagedView"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "lastPage": {
                      "type": "integer"
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/video"
                      }
                    },
                    "aggregations": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "@context",
                    "@type",
                    "member",
                    "view",
                    "totalItems",
                    "pageSize",
                    "lastPage"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/video/{id}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "getvideo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Video",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a Video.",
        "responses": {
          "200": {
            "description": "a Video.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "updatevideo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Video",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/video"
              }
            }
          }
        },
        "description": "Store Video",
        "responses": {
          "200": {
            "description": "Stored Video",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "deletevideo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Video",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Video",
        "responses": {
          "200": {
            "description": "Deletion succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "affected": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/video/{id}/_ver": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "operationId": "versionsOfvideo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_diff",
            "in": "query",
            "description": "If this is true then the response will include json-patch that was generated by comparing the previous version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "video"
        ],
        "description": "Return a Video.",
        "responses": {
          "200": {
            "description": "a Video.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "created"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "patch": {
                        "$ref": "#/components/schemas/patchObj"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/video/{id}/_ver/{number}": {
      "get": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "video"
        ],
        "operationId": "versionvideo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the Video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Version number for the Video",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "description": "Return a Video.",
        "responses": {
          "200": {
            "description": "a Video.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          }
        }
      }
    },
    "/_bulk": {
      "post": {
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "Utilities"
        ],
        "operationId": "bulk",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {},
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "BibliographicResource": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BibliographicResource"
                    }
                  },
                  "Concept": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Concept"
                    }
                  },
                  "Pinkka": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Pinkka"
                    }
                  },
                  "administrativeStatus": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/administrativeStatus"
                    }
                  },
                  "agent": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/agent"
                    }
                  },
                  "annotation": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/annotation"
                    }
                  },
                  "annotationOccurrence": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/annotationOccurrence"
                    }
                  },
                  "area": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/area"
                    }
                  },
                  "audio": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/audio"
                    }
                  },
                  "birdSongRecognitionSkillLevel": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                    }
                  },
                  "branch": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/branch"
                    }
                  },
                  "checklist": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/checklist"
                    }
                  },
                  "checklistVersion": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/checklistVersion"
                    }
                  },
                  "collection": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/collection"
                    }
                  },
                  "completeList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/completeList"
                    }
                  },
                  "contentContextDescription": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/contentContextDescription"
                    }
                  },
                  "dataField": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dataField"
                    }
                  },
                  "dataset": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dataset"
                    }
                  },
                  "dateRange": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dateRange"
                    }
                  },
                  "device": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/device"
                    }
                  },
                  "deviceIndividual": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/deviceIndividual"
                    }
                  },
                  "document": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/document"
                    }
                  },
                  "downloadRequest": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/downloadRequest"
                    }
                  },
                  "endangerment": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/endangerment"
                    }
                  },
                  "event": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/event"
                    }
                  },
                  "field": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/field"
                    }
                  },
                  "fieldset": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/fieldset"
                    }
                  },
                  "form": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/form"
                    }
                  },
                  "formFooter": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formFooter"
                    }
                  },
                  "formInstructions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formInstructions"
                    }
                  },
                  "formNamedPlaceOptions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formNamedPlaceOptions"
                    }
                  },
                  "formOptions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formOptions"
                    }
                  },
                  "formPermission": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formPermission"
                    }
                  },
                  "formPermissionPerson": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formPermissionPerson"
                    }
                  },
                  "formPermissionSingle": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formPermissionSingle"
                    }
                  },
                  "formSeason": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/formSeason"
                    }
                  },
                  "gathering": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/gathering"
                    }
                  },
                  "gatheringEvent": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/gatheringEvent"
                    }
                  },
                  "gatheringFact": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/gatheringFact"
                    }
                  },
                  "habitat": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/habitat"
                    }
                  },
                  "identification": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/identification"
                    }
                  },
                  "image": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/image"
                    }
                  },
                  "individual": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/individual"
                    }
                  },
                  "informalTaxonGroup": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/informalTaxonGroup"
                    }
                  },
                  "informationSystem": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/informationSystem"
                    }
                  },
                  "iucnRedListEvaluation": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/iucnRedListEvaluation"
                    }
                  },
                  "iucnRedListEvaluationYear": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                    }
                  },
                  "iucnRedListTaxonGroup": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                    }
                  },
                  "measurement": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/measurement"
                    }
                  },
                  "multimedia": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/multimedia"
                    }
                  },
                  "namedPlace": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/namedPlace"
                    }
                  },
                  "news": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/news"
                    }
                  },
                  "notification": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/notification"
                    }
                  },
                  "occurrence": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/occurrence"
                    }
                  },
                  "organization": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/organization"
                    }
                  },
                  "permit": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/permit"
                    }
                  },
                  "person": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/person"
                    }
                  },
                  "preparation": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/preparation"
                    }
                  },
                  "profile": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/profile"
                    }
                  },
                  "publication": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/publication"
                    }
                  },
                  "regionalStatus": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/regionalStatus"
                    }
                  },
                  "reserve": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/reserve"
                    }
                  },
                  "sample": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sample"
                    }
                  },
                  "subUnit": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/subUnit"
                    }
                  },
                  "tag": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/tag"
                    }
                  },
                  "taxon": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taxon"
                    }
                  },
                  "taxonCensus": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taxonCensus"
                    }
                  },
                  "taxonConcept": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taxonConcept"
                    }
                  },
                  "taxonGroupIucnEditors": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taxonGroupIucnEditors"
                    }
                  },
                  "taxonInteraction": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taxonInteraction"
                    }
                  },
                  "taxonSet": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taxonSet"
                    }
                  },
                  "transaction": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  },
                  "transactionEvent": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/transactionEvent"
                    }
                  },
                  "transactionItem": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/transactionItem"
                    }
                  },
                  "translation": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/translation"
                    }
                  },
                  "typeSpecimen": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/typeSpecimen"
                    }
                  },
                  "unit": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/unit"
                    }
                  },
                  "unitFact": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/unitFact"
                    }
                  },
                  "unitGathering": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/unitGathering"
                    }
                  },
                  "validator": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/validator"
                    }
                  },
                  "video": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/video"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Bulk insert objects.",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {},
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "BibliographicResource": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BibliographicResource"
                      }
                    },
                    "Concept": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Concept"
                      }
                    },
                    "Pinkka": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pinkka"
                      }
                    },
                    "administrativeStatus": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/administrativeStatus"
                      }
                    },
                    "agent": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/agent"
                      }
                    },
                    "annotation": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotation"
                      }
                    },
                    "annotationOccurrence": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/annotationOccurrence"
                      }
                    },
                    "area": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/area"
                      }
                    },
                    "audio": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/audio"
                      }
                    },
                    "birdSongRecognitionSkillLevel": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
                      }
                    },
                    "branch": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/branch"
                      }
                    },
                    "checklist": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklist"
                      }
                    },
                    "checklistVersion": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/checklistVersion"
                      }
                    },
                    "collection": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/collection"
                      }
                    },
                    "completeList": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/completeList"
                      }
                    },
                    "contentContextDescription": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/contentContextDescription"
                      }
                    },
                    "dataField": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataField"
                      }
                    },
                    "dataset": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dataset"
                      }
                    },
                    "dateRange": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/dateRange"
                      }
                    },
                    "device": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/device"
                      }
                    },
                    "deviceIndividual": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/deviceIndividual"
                      }
                    },
                    "document": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/document"
                      }
                    },
                    "downloadRequest": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/downloadRequest"
                      }
                    },
                    "endangerment": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/endangerment"
                      }
                    },
                    "event": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/event"
                      }
                    },
                    "field": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/field"
                      }
                    },
                    "fieldset": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/fieldset"
                      }
                    },
                    "form": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/form"
                      }
                    },
                    "formFooter": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formFooter"
                      }
                    },
                    "formInstructions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formInstructions"
                      }
                    },
                    "formNamedPlaceOptions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formNamedPlaceOptions"
                      }
                    },
                    "formOptions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formOptions"
                      }
                    },
                    "formPermission": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermission"
                      }
                    },
                    "formPermissionPerson": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionPerson"
                      }
                    },
                    "formPermissionSingle": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formPermissionSingle"
                      }
                    },
                    "formSeason": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/formSeason"
                      }
                    },
                    "gathering": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gathering"
                      }
                    },
                    "gatheringEvent": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringEvent"
                      }
                    },
                    "gatheringFact": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/gatheringFact"
                      }
                    },
                    "habitat": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/habitat"
                      }
                    },
                    "identification": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/identification"
                      }
                    },
                    "image": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/image"
                      }
                    },
                    "individual": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/individual"
                      }
                    },
                    "informalTaxonGroup": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informalTaxonGroup"
                      }
                    },
                    "informationSystem": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/informationSystem"
                      }
                    },
                    "iucnRedListEvaluation": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluation"
                      }
                    },
                    "iucnRedListEvaluationYear": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListEvaluationYear"
                      }
                    },
                    "iucnRedListTaxonGroup": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/iucnRedListTaxonGroup"
                      }
                    },
                    "measurement": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/measurement"
                      }
                    },
                    "multimedia": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/multimedia"
                      }
                    },
                    "namedPlace": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/namedPlace"
                      }
                    },
                    "news": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/news"
                      }
                    },
                    "notification": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/notification"
                      }
                    },
                    "occurrence": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/occurrence"
                      }
                    },
                    "organization": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/organization"
                      }
                    },
                    "permit": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/permit"
                      }
                    },
                    "person": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/person"
                      }
                    },
                    "preparation": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/preparation"
                      }
                    },
                    "profile": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/profile"
                      }
                    },
                    "publication": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/publication"
                      }
                    },
                    "regionalStatus": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/regionalStatus"
                      }
                    },
                    "reserve": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/reserve"
                      }
                    },
                    "sample": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/sample"
                      }
                    },
                    "subUnit": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subUnit"
                      }
                    },
                    "tag": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      }
                    },
                    "taxon": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxon"
                      }
                    },
                    "taxonCensus": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonCensus"
                      }
                    },
                    "taxonConcept": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonConcept"
                      }
                    },
                    "taxonGroupIucnEditors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonGroupIucnEditors"
                      }
                    },
                    "taxonInteraction": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonInteraction"
                      }
                    },
                    "taxonSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/taxonSet"
                      }
                    },
                    "transaction": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    },
                    "transactionEvent": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionEvent"
                      }
                    },
                    "transactionItem": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionItem"
                      }
                    },
                    "translation": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/translation"
                      }
                    },
                    "typeSpecimen": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/typeSpecimen"
                      }
                    },
                    "unit": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unit"
                      }
                    },
                    "unitFact": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitFact"
                      }
                    },
                    "unitGathering": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/unitGathering"
                      }
                    },
                    "validator": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/validator"
                      }
                    },
                    "video": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/video"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BibliographicResource": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Bibliographic Resource"
          },
          "id": {
            "type": "string",
            "title": "Id for the Bibliographic Resource"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Bibliographic Resource"
          },
          "isPublic": {
            "type": "boolean",
            "title": "isPublic"
          },
          "owner": {
            "type": "string",
            "title": "owner"
          }
        },
        "required": [
          "isPublic",
          "owner"
        ]
      },
      "Concept": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the skos:Concept"
          },
          "id": {
            "type": "string",
            "title": "Id for the skos:Concept"
          },
          "@type": {
            "type": "string",
            "title": "Type for the skos:Concept"
          },
          "skos:broader": {
            "type": "string",
            "title": "skos:broader"
          },
          "skos:definition": {
            "type": "string",
            "title": "skos:definition"
          },
          "skos:example": {
            "type": "string",
            "title": "skos:example"
          },
          "skos:inScheme": {
            "type": "string",
            "title": "skos:inScheme"
          },
          "skos:narrower": {
            "type": "string",
            "title": "skos:narrower"
          },
          "skos:note": {
            "type": "string",
            "title": "skos:note"
          }
        },
        "required": [
          "skos:broader",
          "skos:definition",
          "skos:example",
          "skos:inScheme",
          "skos:narrower",
          "skos:note"
        ]
      },
      "Pinkka": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)"
          },
          "id": {
            "type": "string",
            "title": "Id for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Instances of this describe one taxon description context (Pinkka eLearning enviroment)"
          }
        }
      },
      "administrativeStatus": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Administrative status"
          },
          "id": {
            "type": "string",
            "title": "Id for the Administrative status"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Administrative status"
          },
          "administrativeStatusDescription": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "en": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "fi": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "sv": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              }
            },
            "title": "Description"
          },
          "administrativeStatusLink": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "en": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "fi": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "sv": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              }
            },
            "title": "Link"
          }
        }
      },
      "agent": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MY.agent"
          },
          "id": {
            "type": "string",
            "title": "Id for the MY.agent"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MY.agent"
          }
        }
      },
      "annotation": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MAN.annotation"
          },
          "id": {
            "type": "string",
            "title": "Id for the MAN.annotation"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MAN.annotation"
          },
          "addedTags": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Added tags"
          },
          "annotationByPerson": {
            "type": "string",
            "title": "Person Id"
          },
          "annotationBySystem": {
            "type": "string",
            "title": "System Id"
          },
          "annotationClass": {
            "type": "string",
            "enum": [
              "",
              "MAN.annotationClassReliable",
              "MAN.annotationClassLikely",
              "MAN.annotationClassNeutral",
              "MAN.annotationClassSuspicious",
              "MAN.annotationClassUnreliable",
              "MAN.annotationClassAcknowledged",
              "MAN.annotationClassSpam"
            ],
            "title": "My evaluation of the observation"
          },
          "byRole": {
            "type": "string",
            "enum": [
              "",
              "MMAN.expert",
              "MMAN.basic",
              "MMAN.owner",
              "MMAN.formAdmin",
              "MMAN.ictAdmin"
            ],
            "title": "Annotators role"
          },
          "censusAnnotation": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MAN.countError",
                "MAN.innerCountError",
                "MAN.otherError"
              ]
            },
            "minItems": 0,
            "title": "Census annotation"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time"
          },
          "createdTimestamp": {
            "type": "integer",
            "minimum": 0,
            "title": "Created timestamp"
          },
          "deletedTimestamp": {
            "type": "integer",
            "minimum": 0,
            "title": "Deleted timestamp"
          },
          "identification": {
            "$ref": "#/components/schemas/identification"
          },
          "invasiveControlEffectiveness": {
            "type": "string",
            "enum": [
              "",
              "MY.invasiveControlEffectivenessFull",
              "MY.invasiveControlEffectivenessPartial",
              "MY.invasiveControlEffectivenessNone",
              "MY.invasiveControlEffectivenessNotFound"
            ],
            "title": "Annotation type for invasive control"
          },
          "lineTransectAnnotation": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MAN.birdCountError",
                "MAN.innerCountError",
                "MAN.otherError"
              ]
            },
            "minItems": 0,
            "title": "Line transect annotation"
          },
          "notes": {
            "type": "string",
            "title": "Comment"
          },
          "occurrenceAtTimeOfAnnotation": {
            "$ref": "#/components/schemas/annotationOccurrence"
          },
          "opinion": {
            "type": "string",
            "title": "Suggested identification"
          },
          "removedTags": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Removed tags"
          },
          "rootID": {
            "type": "string",
            "title": "Root ID"
          },
          "targetID": {
            "type": "string",
            "title": "Target Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "",
              "MAN.typeOpinion",
              "MAN.typeInvasiveControlEffectiveness",
              "MAN.typeUnidentifiable",
              "MAN.typeAdmin"
            ],
            "title": "My evaluation of the observation"
          },
          "createdBySystem": {
            "type": "string",
            "title": "Deleted by system"
          },
          "deleted": {
            "type": "boolean",
            "title": "Soft delete"
          },
          "deletedByPerson": {
            "type": "string",
            "title": "Deleted by person"
          },
          "deletedDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted at"
          }
        }
      },
      "annotationOccurrence": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MAN.annotationOccurrenceClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MAN.annotationOccurrenceClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MAN.annotationOccurrenceClass"
          },
          "countryVerbatim": {
            "type": "string",
            "title": "Country verbatim"
          },
          "dateBegin": {
            "type": "string",
            "title": "Date begin"
          },
          "dateEnd": {
            "type": "string",
            "title": "Date end"
          },
          "locality": {
            "type": "string",
            "title": "Locality"
          },
          "municipalityVerbatim": {
            "type": "string",
            "title": "Municipality verbatim"
          },
          "taxonId": {
            "type": "string",
            "title": "Taxon ID"
          },
          "taxonVerbatim": {
            "type": "string",
            "title": "Taxon verbatim"
          },
          "wgs84centerPointLat": {
            "type": "number",
            "title": "Latitude (center point)"
          },
          "wgs84centerPointLon": {
            "type": "number",
            "title": "Longitude (center point)"
          }
        }
      },
      "area": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Area"
          },
          "id": {
            "type": "string",
            "title": "Id for the Area"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Area"
          },
          "areaType": {
            "type": "string",
            "enum": [
              "ML.country",
              "ML.biogeographicalProvince",
              "ML.municipality",
              "ML.oldMunicipality",
              "ML.elyCentre",
              "ML.province",
              "ML.continent",
              "ML.iucnEvaluationArea",
              "ML.birdAssociationArea"
            ],
            "description": "Aluetyyppi",
            "title": "Area type"
          },
          "countryCodeISOalpha2": {
            "type": "string",
            "description": "Country code ISO alpha 2",
            "title": "Country code"
          },
          "countryCodeISOalpha3": {
            "type": "string",
            "description": "country code ISO alpha 3",
            "title": "country code"
          },
          "isPartOf": {
            "type": "string",
            "title": "Part of"
          },
          "isPartOfBirdAssociationArea": {
            "type": "string",
            "title": "Is part of bird assocation area"
          },
          "isPartOfEnvironmentalELY": {
            "type": "string",
            "title": "Is part of Environmental ELY"
          },
          "isPartOfProvince": {
            "type": "string",
            "title": "Is part of province"
          },
          "name": {
            "$ref": "#/components/schemas/multiLang"
          },
          "previouslyOfficialName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Previously used name"
          },
          "provinceCodeAlpha": {
            "$ref": "#/components/schemas/multiLang"
          },
          "provinceCodeNumeric": {
            "type": "string",
            "title": "Province code numeric"
          },
          "ringingDepartmentBirdAssociationAreaCode": {
            "type": "string",
            "title": "ringingDepartmentBirdAssociationAreaCode"
          },
          "ringingDepartmentMunicipalityCode": {
            "type": "string",
            "title": "ringingDepartmentMunicipalityCode"
          }
        },
        "required": [
          "areaType",
          "name"
        ]
      },
      "audio": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Audio recording"
          },
          "id": {
            "type": "string",
            "title": "Id for the Audio recording"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Audio recording"
          },
          "LuomusIntellectualRights": {
            "type": "string",
            "enum": [
              "",
              "MM.LuomusRightsFreeToUse",
              "MM.LuomusRightsInternalOnly"
            ],
            "title": "Intellectual rights given to LUOMUS"
          },
          "caption": {
            "type": "string",
            "title": "Caption"
          },
          "captureDateTime": {
            "type": "string",
            "title": "Date taken"
          },
          "capturerVerbatim": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Photographer/recorder (Forename Surname)"
          },
          "documentURI": {
            "type": "string",
            "title": "documentURI"
          },
          "fullURL": {
            "type": "string",
            "title": "URL of full size version of the image (converted to JPG)"
          },
          "keyword": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Keywords"
          },
          "mp3URL": {
            "type": "string",
            "title": "URL of mp3 audio file (stripped original or compressed from original)"
          },
          "originalFilename": {
            "type": "string",
            "title": "Original filename"
          },
          "sourceSystem": {
            "type": "string",
            "title": "Source information system of the multimedia object"
          },
          "taxonDescriptionCaption": {
            "$ref": "#/components/schemas/multiLang"
          },
          "taxonURI": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Taxon ID"
          },
          "taxonVerbatim": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Verbatim taxon name"
          },
          "thumbnailURL": {
            "type": "string",
            "title": "URL of a thumbnail version of the image (maintains aspect ratio, max. 200px height or width)"
          },
          "uploadedBy": {
            "type": "string",
            "title": "Uploaded by"
          },
          "wavURL": {
            "type": "string",
            "title": "URL of wav audio file (stripped original)"
          },
          "intellectualOwner": {
            "type": "string",
            "title": "Tillverkare"
          },
          "intellectualRights": {
            "type": "string",
            "enum": [
              "MZ.intellectualRightsCC-BY-SA-4.0",
              "MZ.intellectualRightsCC-BY-NC-4.0",
              "MZ.intellectualRightsCC-BY-NC-SA-4.0",
              "MZ.intellectualRightsCC-BY-4.0",
              "MZ.intellectualRightsCC0-4.0",
              "MZ.intellectualRightsODBL-1.0",
              "MZ.intellectualRightsPD",
              "MZ.intellectualRightsARR",
              "MZ.intellectualRightsCC-BY-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.0-DE",
              "MZ.intellectualRightsCC-BY-NC-2.0",
              "MZ.intellectualRightsCC-BY-NC-SA-2.0",
              "MZ.intellectualRightsCC-BY-NC-ND-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.5",
              "MZ.intellectualRightsCC-BY-SA-2.5-SE",
              "MZ.intellectualRightsCC-BY-3.0",
              "MZ.intellectualRightsCC-BY-SA-3.0",
              "MZ.intellectualRightsCC-BY-NC-SA-3.0",
              "MZ.intellectualRightsCC-BY-ND-4.0",
              "MZ.intellectualRightsCC-BY-NC-ND-4.0"
            ],
            "title": "License"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          }
        },
        "required": [
          "fullURL",
          "mp3URL",
          "originalFilename",
          "sourceSystem",
          "thumbnailURL",
          "uploadedBy",
          "intellectualOwner",
          "intellectualRights"
        ]
      },
      "birdSongRecognitionSkillLevel": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Instances of this class are bird song recognition skill levels of a certain area"
          },
          "id": {
            "type": "string",
            "title": "Id for the Instances of this class are bird song recognition skill levels of a certain area"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Instances of this class are bird song recognition skill levels of a certain area"
          },
          "birdSongRecognitionArea": {
            "type": "string",
            "title": "Area"
          },
          "birdSongRecognitionSkillLevel": {
            "type": "string",
            "enum": [
              "MA.birdSongRecognitionSkillLevelEnum1",
              "MA.birdSongRecognitionSkillLevelEnum2",
              "MA.birdSongRecognitionSkillLevelEnum3",
              "MA.birdSongRecognitionSkillLevelEnum4"
            ],
            "title": "Skill level"
          }
        },
        "required": [
          "birdSongRecognitionArea",
          "birdSongRecognitionSkillLevel"
        ]
      },
      "branch": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Branch"
          },
          "id": {
            "type": "string",
            "title": "Id for the Branch"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Branch"
          },
          "accessionID": {
            "type": "string",
            "title": "Accession ID"
          },
          "collectionID": {
            "type": "string",
            "description": "Garden area",
            "title": "Location"
          },
          "exists": {
            "type": "boolean",
            "description": "Is the branch alive or not?",
            "title": "Exists"
          },
          "location": {
            "type": "string",
            "description": "Sublocation within the garden area, free-text",
            "title": "Sublocation"
          },
          "notes": {
            "type": "string",
            "title": "Notes"
          }
        },
        "required": [
          "accessionID",
          "collectionID"
        ]
      },
      "checklist": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Checklist"
          },
          "id": {
            "type": "string",
            "title": "Id for the Checklist"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Checklist"
          },
          "dc:bibliographicCitation": {
            "$ref": "#/components/schemas/multiLang"
          },
          "isPublic": {
            "type": "boolean",
            "title": "isPublic"
          },
          "owner": {
            "type": "string",
            "title": "owner"
          },
          "rootTaxon": {
            "type": "string",
            "title": "rootTaxon"
          },
          "rdfs:comment": {
            "type": "string",
            "title": "Notes"
          }
        },
        "required": [
          "isPublic",
          "owner",
          "rootTaxon"
        ]
      },
      "checklistVersion": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Checklist version"
          },
          "id": {
            "type": "string",
            "title": "Id for the Checklist version"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Checklist version"
          },
          "versionChecklist": {
            "type": "string",
            "title": "Checklist id"
          },
          "versionDate": {
            "type": "string",
            "format": "date",
            "title": "Frozen at"
          },
          "versionDescription": {
            "$ref": "#/components/schemas/multiLang"
          },
          "versionName": {
            "$ref": "#/components/schemas/multiLang"
          }
        }
      },
      "collection": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Collection"
          },
          "id": {
            "type": "string",
            "title": "Id for the Collection"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Collection"
          },
          "secureLevel": {
            "type": "string",
            "enum": [
              "",
              "MX.secureLevelNone",
              "MX.secureLevelKM1",
              "MX.secureLevelKM5",
              "MX.secureLevelKM10",
              "MX.secureLevelKM25",
              "MX.secureLevelKM50",
              "MX.secureLevelKM100",
              "MX.secureLevelHighest",
              "MX.secureLevelNoShow"
            ],
            "description": "Secure level (salaus-/karkeistustaso) for the data",
            "title": "Secure level"
          },
          "abbreviation": {
            "type": "string",
            "description": "Official abbreviation (or acronym) for this collection",
            "title": "Collection code"
          },
          "allowedForDwStatistics": {
            "type": "boolean",
            "description": "Admin field. Is it allowed to use collection with data warehouse /statistic endpoints.",
            "title": "Allowed for DW statistics"
          },
          "citation": {
            "type": "string",
            "description": "Example how to cite this collection in a scientific article, if using organization, name and abbreviation is not enough.",
            "title": "Citation recommendation"
          },
          "collectionLocation": {
            "$ref": "#/components/schemas/multiLang"
          },
          "collectionName": {
            "$ref": "#/components/schemas/multiLang"
          },
          "collectionQuality": {
            "type": "string",
            "enum": [
              "MY.collectionQualityEnum3",
              "MY.collectionQualityEnum2",
              "MY.collectionQualityEnum1"
            ],
            "description": "Quality classification for the collection.",
            "title": "Collection quality"
          },
          "collectionSize": {
            "type": "string",
            "description": "How many specimens, records or such does the collection contain? Fill in approximate number, describe more in notes if necessary.",
            "title": "Size (approx.)"
          },
          "collectionType": {
            "type": "string",
            "enum": [
              "MY.collectionTypeSpecimens",
              "MY.collectionTypeLiving",
              "MY.collectionTypeMonitoring",
              "MY.collectionTypeObservations",
              "MY.collectionTypePublicationdata",
              "MY.collectionTypePublication",
              "MY.collectionTypeMixed",
              "MY.collectionTypeOther",
              "MY.collectionTypeGardenArea",
              "MY.collectionTypeIndoorGardenArea",
              "MY.collectionTypeOutdoorGardenArea",
              "MY.collectionTypeGardenSublocation"
            ],
            "description": "Type of the collection (specimen, monitoring etc).",
            "title": "Type"
          },
          "concealmentBasis": {
            "$ref": "#/components/schemas/multiLang"
          },
          "contactEmail": {
            "type": "string",
            "description": "Personal or general (e.g. group of people in the organisation) email address to reach the person(s) responsible.",
            "title": "Contact email"
          },
          "coverageBasis": {
            "$ref": "#/components/schemas/multiLang"
          },
          "dataLocation": {
            "$ref": "#/components/schemas/multiLang"
          },
          "dataNotes": {
            "type": "string",
            "description": "Diary-like notes about the data, with date/time. For example \"2020-08-19: Changed country names Fönland to Finland\", or \"Specimens collected during 2019 are missing coordinates due to malfunctioning GPS\"",
            "title": "Notes about the data"
          },
          "dataQuality": {
            "type": "string",
            "enum": [
              "",
              "MY.dataQuality1",
              "MY.dataQuality2",
              "MY.dataQuality3",
              "MY.dataQuality4",
              "MY.dataQuality5",
              "MY.dataQualityNA"
            ],
            "description": "Quality estimation for the data in this collection",
            "title": "Data quality"
          },
          "dataQualityDescription": {
            "$ref": "#/components/schemas/multiLang"
          },
          "dataQuarantinePeriod": {
            "type": "integer",
            "description": "Embargo period in years after which data is opened",
            "title": "Embargo in years"
          },
          "dataUseTerms": {
            "$ref": "#/components/schemas/multiLang"
          },
          "description": {
            "$ref": "#/components/schemas/multiLang"
          },
          "digitizedSize": {
            "type": "string",
            "description": "How many percent of the collection is in digital form, e.g. in a database or Excel file? Fill in approximate number, describe more in notes if necessary.",
            "title": "% digitized (approx.)"
          },
          "downloadRequestHandler": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Admin field. The identifier of the person responsible for handling requests for restricted data for this set (typically same person who's responsible for the collection)",
            "title": "Download request handler"
          },
          "editNotes": {
            "type": "string",
            "description": "Reason for this edit or notes about it.",
            "title": "Notes about this edit"
          },
          "gbifDoi": {
            "type": "string",
            "description": "Admin field. DOI received from GBIF after the collection has been published.",
            "title": "Collection DOI from GBIF"
          },
          "geographicCoverage": {
            "$ref": "#/components/schemas/multiLang"
          },
          "intellectualDescription": {
            "$ref": "#/components/schemas/multiLang"
          },
          "intellectualOwner": {
            "type": "string",
            "description": "Name of the institution or organisation publishing the data.",
            "title": "Publisher name (en)"
          },
          "intellectualRights": {
            "type": "string",
            "enum": [
              "MY.intellectualRightsCC-BY",
              "MY.intellectualRightsCC0",
              "MY.intellectualRightsPD",
              "MY.intellectualRightsARR"
            ],
            "description": "License which is used when publishing data that belongs to this collection.",
            "title": "License for use"
          },
          "internalUseOnly": {
            "type": "boolean",
            "description": "Is the data to be used only within Kotka?",
            "title": "Internal use only"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          },
          "language": {
            "type": "string",
            "description": "Language the data is (mainly) written in, if applicable.",
            "title": "Language"
          },
          "metadataCreator": {
            "type": "string",
            "title": "Person responsible for this metadata"
          },
          "metadataStatus": {
            "type": "string",
            "enum": [
              "",
              "MY.metadataStatusPreliminary",
              "MY.metadataStatusSatisfactory",
              "MY.metadataStatusComprehensive",
              "MY.metadataStatusHidden"
            ],
            "description": "Indication of how comprehensive the information on this form is.",
            "title": "Status of this metadata"
          },
          "methods": {
            "$ref": "#/components/schemas/multiLang"
          },
          "notes": {
            "type": "string",
            "description": "Additional information to the data in each section.",
            "title": "Notes"
          },
          "onlineUrl": {
            "$ref": "#/components/schemas/multiLang"
          },
          "personResponsible": {
            "type": "string",
            "description": "Person(s) responsible for the collection (Lastname, Firstname; Lastname, Firstname).",
            "title": "Person responsible"
          },
          "publicAccess": {
            "type": "boolean",
            "description": "Used for botanic garden collections. Is the collection/garden area accessible to public or not.",
            "title": "Accessibility to public"
          },
          "publicationDescription": {
            "$ref": "#/components/schemas/multiLang"
          },
          "publicationTerms": {
            "type": "string",
            "enum": [
              "",
              "MY.publicationTermsFree",
              "MY.publicationTermsOfficial",
              "MY.publicationTermsInternal",
              "MY.publicationTermsNone"
            ],
            "description": "How can Luomus publish the data, if it is owned by third party?",
            "title": "Publication terms"
          },
          "publisherShortname": {
            "$ref": "#/components/schemas/multiLang"
          },
          "shareToGbif": {
            "type": "string",
            "description": "Admin field. Can the data be shared to GBIF or not: Given collection ID means data is shared under that collection.",
            "title": "Share to GBIF"
          },
          "taxonomicCoverage": {
            "$ref": "#/components/schemas/multiLang"
          },
          "temporalCoverage": {
            "$ref": "#/components/schemas/multiLang"
          },
          "typesSize": {
            "type": "string",
            "description": "How many TYPE specimens does the collection contain?  Fill in approximate number, describe more in notes if necessary.",
            "title": "Amount of type specimens (approx.)"
          },
          "creator": {
            "type": "string",
            "title": "Creator"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "dateEdited": {
            "type": "string",
            "format": "date-time",
            "title": "Edited"
          },
          "editor": {
            "type": "string",
            "title": "Editor"
          },
          "owner": {
            "type": "string",
            "description": "Team or organisation that owns the record and can edit it.",
            "title": "Owner of record"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          }
        },
        "required": [
          "collectionName",
          "collectionQuality",
          "collectionType",
          "contactEmail",
          "description",
          "intellectualRights",
          "personResponsible"
        ]
      },
      "completeList": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MY.completeListClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MY.completeListClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MY.completeListClass"
          },
          "completeListTaxonID": {
            "type": "string",
            "title": "Species"
          },
          "completeListType": {
            "type": "string",
            "enum": [
              "",
              "MY.completeListTypeCompleteWithBreedingStatus",
              "MY.completeListTypeComplete",
              "MY.completeListTypeIncomplete"
            ],
            "title": "Species list completeness"
          }
        }
      },
      "contentContextDescription": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Instances of this describe one taxon description context"
          },
          "id": {
            "type": "string",
            "title": "Id for the Instances of this describe one taxon description context"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Instances of this describe one taxon description context"
          }
        }
      },
      "dataField": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Data field"
          },
          "id": {
            "type": "string",
            "title": "Id for the Data field"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Data field"
          },
          "apiName": {
            "type": "string",
            "title": "Name in API /warehouse/unit endpoint"
          },
          "description": {
            "type": "string",
            "description": "Information for data users about the contents/source/etc of the field",
            "title": "Description of the field"
          },
          "example": {
            "type": "string",
            "title": "Example values"
          },
          "includeFull": {
            "type": "boolean",
            "title": "Include field to full downloads"
          },
          "includeSecurePortalUI": {
            "type": "boolean",
            "title": "Include field to PAP UI"
          },
          "includeUI": {
            "type": "boolean",
            "title": "Include field to Laji.fi UI"
          },
          "name": {
            "type": "string",
            "title": "Human readable name"
          },
          "rPackageName": {
            "type": "string",
            "title": "Name in R-package"
          },
          "shortName": {
            "type": "string",
            "description": "Short name for shapefiles",
            "title": "Short name"
          },
          "techicalNotes": {
            "type": "string",
            "description": "Internal notes for us developers",
            "title": "Technical notes"
          },
          "technicalName": {
            "type": "string",
            "description": "Short dwc or other term for the field (for example \"collectionID\"); usually the same as subjectname (without the \"DDF.\")",
            "title": "Technical name"
          },
          "sortOrder": {
            "type": "integer",
            "title": "sortOrder"
          }
        },
        "required": [
          "name",
          "shortName",
          "technicalName"
        ]
      },
      "dataset": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Tag"
          },
          "id": {
            "type": "string",
            "title": "Id for the Tag"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Tag"
          },
          "benefitsDerivedAndShared": {
            "type": "string",
            "description": "What monetary or non-monetary benefits arised from the project and how they were shared. (Related to the monitoring of the utilisation of genetic resources and Nagoya compliance).",
            "title": "Benefits derived and shared"
          },
          "datasetName": {
            "$ref": "#/components/schemas/multiLang"
          },
          "datasetType": {
            "type": "string",
            "enum": [
              "",
              "GX.datasetTypeBasic",
              "GX.datasetTypeProject"
            ],
            "description": "Type of the dataset. Usually basic, project type is generally used only to give information on project Nagoya compliance.",
            "title": "Dataset type"
          },
          "description": {
            "$ref": "#/components/schemas/multiLang"
          },
          "personsResponsible": {
            "type": "string",
            "description": "Person(s) responsible for the dataset.",
            "title": "Person(s) responsible"
          },
          "researchCollaborator": {
            "type": "string",
            "description": "Institutions or persons collaborating in the project.",
            "title": "Research collaborator(s)"
          },
          "researchFundingDuration": {
            "type": "string",
            "description": "Duration of the project funding (dates from and to). (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).",
            "title": "Research funding duration"
          },
          "researchFundingRecipient": {
            "type": "string",
            "description": "Which person or institution received the project funding (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).",
            "title": "Research funding recipient"
          },
          "researchFundingSource": {
            "type": "string",
            "description": "Who funded the project (related to the monitoring of the utilisation of genetic resources and Nagoya compliance).",
            "title": "Research funding source"
          },
          "creator": {
            "type": "string",
            "title": "Creator"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "dateEdited": {
            "type": "string",
            "format": "date-time",
            "title": "Edited"
          },
          "editor": {
            "type": "string",
            "title": "Editor"
          },
          "owner": {
            "type": "string",
            "description": "Team or organisation that owns the record and can edit it.",
            "title": "Owner of record"
          }
        },
        "required": [
          "datasetName",
          "personsResponsible"
        ]
      },
      "dateRange": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MNP.dateRange"
          },
          "id": {
            "type": "string",
            "title": "Id for the MNP.dateRange"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MNP.dateRange"
          },
          "end": {
            "type": "string",
            "format": "date",
            "title": "End"
          },
          "start": {
            "type": "string",
            "format": "date",
            "title": "Start"
          }
        }
      },
      "device": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MXC.device"
          },
          "id": {
            "type": "string",
            "title": "Id for the MXC.device"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MXC.device"
          },
          "deviceManufacturer": {
            "type": "string",
            "title": "Device manufacturer"
          },
          "deviceManufacturerID": {
            "type": "string",
            "title": "Manufacturers device ID"
          },
          "deviceType": {
            "type": "string",
            "title": "Type of the device"
          },
          "creator": {
            "type": "string",
            "title": "Creator"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "dateEdited": {
            "type": "string",
            "format": "date-time",
            "title": "Edited"
          },
          "editor": {
            "type": "string",
            "title": "Editor"
          },
          "ownerPerson": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Has permissions to modify"
          }
        },
        "required": [
          "deviceManufacturerID"
        ]
      },
      "deviceIndividual": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MXC.deviceIndividual"
          },
          "id": {
            "type": "string",
            "title": "Id for the MXC.deviceIndividual"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MXC.deviceIndividual"
          },
          "attached": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when attached to the individual",
            "title": "Attached"
          },
          "deviceID": {
            "type": "string",
            "description": "Id for the device",
            "title": "Devices ID"
          },
          "individualID": {
            "type": "string",
            "description": "Id for the individual",
            "title": "Individuals ID"
          },
          "removed": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when removed from to the individua",
            "title": "Removed"
          }
        },
        "required": [
          "attached",
          "deviceID",
          "individualID"
        ]
      },
      "document": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Submissions"
          },
          "id": {
            "type": "string",
            "title": "Id for the Submissions"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Submissions"
          },
          "secureLevel": {
            "type": "string",
            "enum": [
              "",
              "MX.secureLevelNone",
              "MX.secureLevelKM1",
              "MX.secureLevelKM5",
              "MX.secureLevelKM10",
              "MX.secureLevelKM25",
              "MX.secureLevelKM50",
              "MX.secureLevelKM100",
              "MX.secureLevelHighest",
              "MX.secureLevelNoShow"
            ],
            "description": "Secure level (salaus-/karkeistustaso) for the data",
            "title": "Secure level"
          },
          "DNASampleLocation": {
            "type": "string",
            "description": "Leave empty if no sample taken, or if the sample is recorded separately",
            "title": "DNA sample location"
          },
          "IPEN": {
            "type": "string",
            "description": "IPEN Number for the accession",
            "title": "IPEN"
          },
          "URL": {
            "type": "string",
            "description": "URL where more information is available about the specimen",
            "title": "URL"
          },
          "acknowledgedWarnings": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "object"
            },
            "minItems": 0,
            "title": "Acknowledged warnings"
          },
          "acquiredFrom": {
            "type": "string",
            "description": "From who/where the specimen was acquired (if not recorded as a transaction)",
            "title": "Acquired from"
          },
          "acquiredFromOrganization": {
            "type": "string",
            "description": "Organization where the accession was acquired from. If the organization is not on the list, add it first.",
            "title": "Acquired from organization"
          },
          "acquisitionDate": {
            "type": "string",
            "description": "Date (d.m.yyyy) or year (yyyy) on which the specimen was acquired to the collection. Empty means an old specimen acquired on an unknown date.",
            "title": "Acquisition date"
          },
          "additionalIDs": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)",
            "title": "Additional ID's"
          },
          "bold": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "BOLD identifier, usually BOLD Sample ID. You can include additonal comment by separating them with colon, e.g. \"AY123456:comments here\"",
            "title": "BOLD"
          },
          "caption": {
            "type": "string",
            "title": "Document caption"
          },
          "cladBookID": {
            "type": "string",
            "description": "Clad book id number or such",
            "title": "Clad book id"
          },
          "cladSpecimenID": {
            "type": "string",
            "description": "Clad specimen id: usually color description and a number",
            "title": "Clad specimen id"
          },
          "cladVerbatim": {
            "type": "string",
            "description": "Verbatim specimen data from clad book",
            "title": "Clad data verbatim"
          },
          "collectionID": {
            "type": "string",
            "description": "The collection which this specimen belongs to",
            "title": "Collection"
          },
          "condition": {
            "type": "string",
            "description": "Notes on the defects of the specimen (missing parts or such). Empty value means same as \"good\" or \"hyvä\" - that there is nothing special to mention about the condition.",
            "title": "Condition (defects)"
          },
          "cultivationInformation": {
            "type": "string",
            "description": "Annuality/perenniality or other specialities about cultivation in our conditions.",
            "title": "Cultivation information"
          },
          "dataOrigin": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.dataOriginPaperForm",
                "MY.dataOriginWebForm",
                "MY.dataOriginSpreadsheetFile"
              ]
            },
            "minItems": 0,
            "title": "Data origin"
          },
          "dataSource": {
            "type": "string",
            "description": "Where the data about this specimen or observation is from, in addition to labels. Eg. reference to a publication, field notes or an expedition.",
            "title": "Data source"
          },
          "datasetID": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "The dataset(s) this specimen belongs to",
            "title": "Datasets"
          },
          "datatype": {
            "type": "string",
            "title": "Datatype"
          },
          "deviceID": {
            "type": "string",
            "title": "Device ID"
          },
          "documentLocation": {
            "type": "string",
            "description": "Location of the specimen so that museum personnel can find it. E.g. taxon under which it is stored (if not clear from the identification), or shelf number",
            "title": "Specimen location"
          },
          "duplicatesIn": {
            "type": "string",
            "description": "Description where duplicates (specimens of the same individual) are located or have been sent to and by which ID's.",
            "title": "Duplicates"
          },
          "editNotes": {
            "type": "string",
            "description": "Reason for this edit or notes about it.",
            "title": "Notes about this edit"
          },
          "editor": {
            "type": "string",
            "title": "Editor"
          },
          "entered": {
            "type": "string",
            "description": "Date the data was first transcribed into electronic format or paper registry",
            "title": "Date transcribed"
          },
          "event": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Free-text diary-style information about what has been done to the specimen and when.",
            "title": "Event"
          },
          "exsiccatum": {
            "type": "string",
            "description": "Name of the exsiccatum this specimen belongs to and possible exsiccatum number.",
            "title": "Exsiccatum"
          },
          "formID": {
            "type": "string",
            "description": "Id of the form that was used for the document",
            "title": "Form id"
          },
          "gatheringEvent": {
            "$ref": "#/components/schemas/gatheringEvent"
          },
          "genbank": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Genbank identifier. You can include additonal comment by separating them with colon, e.g. \"AY123456:comments here\"",
            "title": "Genbank"
          },
          "hasGathering": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "hasGathering"
          },
          "isTemplate": {
            "type": "boolean",
            "title": "Use document as template"
          },
          "keywords": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Keywords"
          },
          "labelsVerbatim": {
            "type": "string",
            "description": "All text from labels word-for-word, including spelling errors. Separate each label on its own row, starting from topmost label.",
            "title": "Verbatim labels"
          },
          "language": {
            "type": "string",
            "description": "Language the data is (mainly) written in, if applicable.",
            "title": "Language"
          },
          "legID": {
            "type": "string",
            "description": "Collector's identifier (field identifier, keruunumero) for the specimen",
            "title": "Collector's ID"
          },
          "locked": {
            "type": "boolean",
            "title": "Locked"
          },
          "namedPlaceID": {
            "type": "string",
            "title": "Named place"
          },
          "notes": {
            "type": "string",
            "description": "Additional information to the data in each section.",
            "title": "Notes"
          },
          "originalSpecimenID": {
            "type": "string",
            "description": "Original catalogue number or other  original identifier of the specimen. E.g. H9000000",
            "title": "Original catalogue number"
          },
          "plannedLocation": {
            "type": "string",
            "description": "Garden area where this accession is planned to be located.",
            "title": "Planned location"
          },
          "preservation": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.preservationPressed",
                "MY.preservationDry",
                "MY.preservationCriticalPointDrying",
                "MY.preservationPinned",
                "MY.preservationGlued",
                "MY.preservationLiquid",
                "MY.preservationEthanol",
                "MY.preservationEthanolPure",
                "MY.preservationEthanol70",
                "MY.preservationEthanol80",
                "MY.preservationEthanol80Pure",
                "MY.preservationEthanol96",
                "MY.preservationEthanolDenatured",
                "MY.preservationEthanolFormalin",
                "MY.preservationEthanolExFormalin",
                "MY.preservationFormalin",
                "MY.preservationBouinSolution",
                "MY.preservationPampelsFluid",
                "MY.preservationGlycerol",
                "MY.preservationParaffin",
                "MY.preservationMercuricChloride",
                "MY.preservationCryopreserved",
                "MY.preservationFrozen",
                "MY.preservationFrozenMinus80C",
                "MY.preservationFreezeDried",
                "MY.preservationGoldPlated",
                "MY.preservationActiveCulture",
                "MY.preservationLiving",
                "MY.preservationSlide",
                "MY.preservationSlideCanadaBalsam",
                "MY.preservationSlideEuparal",
                "MY.preservationSlidePolyviol",
                "MY.preservationStuffed",
                "MY.preservationCast",
                "MY.preservationPlastinated",
                "MY.preservationFrozenMinus80CAndEthanolMinus20C"
              ]
            },
            "minItems": 0,
            "description": "Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.",
            "title": "Preservation"
          },
          "primaryDataLocation": {
            "type": "string",
            "description": "Location of the primary data if not Kotka.",
            "title": "Primary data location"
          },
          "privateNotes": {
            "type": "string",
            "description": "Notes shown within the system for users signed in but not shown publicly anywhere. Use only for notes that absolutely need to be hidden from public view.",
            "title": "Nonpublic notes"
          },
          "publication": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Publication references or doi's that refer to this specimen",
            "title": "Publications"
          },
          "relationship": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Relationship to another taxon OR specimen. Choose relationship type as prefix and give taxon name or specimen identifier thereafter, e.g. \"parasite: Parasiticus specius\" OR \"host:http://tun.fi/JAA.123\"",
            "title": "Relationship"
          },
          "sampleHistory": {
            "type": "string",
            "description": "The history of the specimen, for example how it was acquired or in which museums it has been before.",
            "title": "Specimen history"
          },
          "separatedFrom": {
            "type": "string",
            "description": "ID of the specimen from which this has been separated",
            "title": "Separated from specimen"
          },
          "separatedTo": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "ID's of those new specimens that have been separated from this specimen",
            "title": "Separated to specimen(s)"
          },
          "serialNumber": {
            "type": "string",
            "title": "Serial number"
          },
          "sourceID": {
            "type": "string",
            "title": "Source system id"
          },
          "status": {
            "type": "string",
            "enum": [
              "",
              "MY.statusOk",
              "MY.statusMissing",
              "MY.statusUnrecoverable",
              "MY.statusLost",
              "MY.statusDonated",
              "MY.statusDeposited",
              "MY.statusDeaccessioned",
              "MY.statusDiscarded",
              "MY.statusSpent",
              "MY.statusDestroyed",
              "MY.statusUndefined",
              "MY.statusAxenic",
              "MY.statusNonAxenic",
              "MY.statusNotAvailable",
              "MY.statusDead",
              "MY.statusNoVoucherRetained"
            ],
            "description": "Empty value means same as \"ok\" - that there is not anything special about the status of the specimen.",
            "title": "Status"
          },
          "temp": {
            "type": "boolean",
            "title": "Temporary document"
          },
          "templateDescription": {
            "type": "string",
            "title": "Template description"
          },
          "templateName": {
            "type": "string",
            "title": "Template name"
          },
          "transcriberNotes": {
            "type": "string",
            "description": "Additional information regarding the data entry or transcription process, e.g. unclarities, explanations for interpretations,",
            "title": "Transcriber's notes"
          },
          "transferAgreement": {
            "type": "string",
            "description": "Common name of agreement concerning the transfer, if any.",
            "title": "Transfer agreement"
          },
          "unreliableFields": {
            "type": "string",
            "description": "List of those fields that contain unreliable data. The list is created automatically.",
            "title": "Unreliable fields"
          },
          "verificationStatus": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.verificationStatusOk",
                "MY.verificationStatusVerify",
                "MY.verificationStatusComplete",
                "MY.verificationStatusGeoreference",
                "MY.verificationStatusDet",
                "MY.verificationStatusCheckID",
                "MY.verificationStatusVerifyCoordinates"
              ]
            },
            "minItems": 0,
            "description": "Information about the quality of the specimen data. Possible to select several. Empty value means same as OK.",
            "title": "Verification status"
          },
          "voucherSpecimenID": {
            "type": "string",
            "description": "Identifier of the herbarium voucher specimen or information about it if the identifier is unknown.",
            "title": "Voucher specimen ID"
          },
          "creator": {
            "type": "string",
            "title": "Creator"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "dateEdited": {
            "type": "string",
            "format": "date-time",
            "title": "Edited"
          },
          "editors": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Editors"
          },
          "images": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Images"
          },
          "owner": {
            "type": "string",
            "description": "Team or organisation that owns the record and can edit it.",
            "title": "Owner of record"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          },
          "scheduledForDeletion": {
            "type": "boolean",
            "title": "Scheduled for deletion"
          },
          "gatherings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gathering"
            }
          }
        },
        "required": [
          "gatherings"
        ]
      },
      "downloadRequest": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Download request"
          },
          "id": {
            "type": "string",
            "title": "Id for the Download request"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Download request"
          },
          "apiKeyExpires": {
            "type": "string",
            "title": "API-key expires"
          },
          "approximateResultSize": {
            "type": "integer",
            "title": "Approximate result size"
          },
          "collectionId": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "collectionId"
          },
          "completed": {
            "type": "boolean",
            "title": "completed"
          },
          "created": {
            "type": "string",
            "format": "date",
            "title": "Created date"
          },
          "createdFile": {
            "type": "string",
            "title": "Created file name"
          },
          "createdFileSize": {
            "type": "string",
            "title": "Size in MB"
          },
          "dataUsePurpose": {
            "type": "string",
            "title": "Purpose of data use"
          },
          "downloadFormat": {
            "type": "string",
            "title": "Download format"
          },
          "downloadInclude": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Include to download"
          },
          "downloadType": {
            "type": "string",
            "title": "Download type"
          },
          "downloaded": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "format": "date"
            },
            "minItems": 0,
            "title": "Download date"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "failed": {
            "type": "boolean",
            "title": "Has failed"
          },
          "failureReason": {
            "type": "string",
            "title": "Failure reason"
          },
          "filter": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "title": "Filter"
          },
          "locale": {
            "type": "string",
            "title": "Locale"
          },
          "person": {
            "type": "string",
            "title": "Person id"
          },
          "requested": {
            "type": "string",
            "format": "date",
            "title": "Request date"
          },
          "source": {
            "type": "string",
            "title": "source"
          },
          "warehouse": {
            "type": "string",
            "title": "Warehouse type"
          }
        },
        "required": [
          "approximateResultSize",
          "completed",
          "downloadType",
          "filter",
          "requested",
          "source",
          "warehouse"
        ]
      },
      "endangerment": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Endagerment object"
          },
          "id": {
            "type": "string",
            "title": "Id for the Endagerment object"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Endagerment object"
          },
          "herbo:sortOrder": {
            "type": "integer",
            "title": "herbo:sortOrder"
          },
          "endangerment": {
            "type": "string",
            "enum": [
              "MKV.endangermentReasonP",
              "MKV.endangermentReasonKe",
              "MKV.endangermentReasonH",
              "MKV.endangermentReasonKu",
              "MKV.endangermentReasonR",
              "MKV.endangermentReasonKs",
              "MKV.endangermentReasonPm",
              "MKV.endangermentReasonPr",
              "MKV.endangermentReasonN",
              "MKV.endangermentReasonM",
              "MKV.endangermentReasonMp",
              "MKV.endangermentReasonMv",
              "MKV.endangermentReasonMk",
              "MKV.endangermentReasonMl",
              "MKV.endangermentReasonO",
              "MKV.endangermentReasonVr",
              "MKV.endangermentReasonKh",
              "MKV.endangermentReasonI",
              "MKV.endangermentReasonS",
              "MKV.endangermentReasonKil",
              "MKV.endangermentReasonRis",
              "MKV.endangermentReasonKv",
              "MKV.endangermentReasonU",
              "MKV.endangermentReasonVie",
              "MKV.endangermentReasonMuu",
              "MKV.endangermentReasonT"
            ],
            "title": "Endangerment"
          },
          "sortOrder": {
            "type": "integer",
            "title": "sortOrder"
          }
        },
        "required": [
          "endangerment"
        ]
      },
      "event": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the PUU.event"
          },
          "id": {
            "type": "string",
            "title": "Id for the PUU.event"
          },
          "@type": {
            "type": "string",
            "title": "Type for the PUU.event"
          },
          "agent": {
            "type": "string",
            "title": "Doer"
          },
          "amount": {
            "type": "string",
            "description": "Enter the amount in the branch as n, addition to the previously given amount as +n or reduction as -n",
            "title": "Amount"
          },
          "amountEstimationUnit": {
            "type": "string",
            "title": "Unit"
          },
          "branchID": {
            "type": "string",
            "description": "ID for the accossiated branch",
            "title": "Branch ID"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "eRH": {
            "type": "string",
            "title": "eRH"
          },
          "estimatedSeedQuantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "MY.eventTypeDiscarded",
              "MY.eventTypeDonating",
              "MY.eventTypeInventory",
              "MY.eventTypeMarkedDead",
              "MY.eventTypeOccasionalRemark",
              "MY.eventTypeTemporaryPlacement",
              "MY.eventTypePlanting",
              "MY.eventTypePlantedBackToWild",
              "MY.eventTypePollination",
              "MY.eventTypePrickingOut",
              "MY.eventTypePotting",
              "MY.eventTypePropagation",
              "MY.eventTypePropagationMaterialCollected",
              "MY.eventTypePruning",
              "MY.eventTypeSowing",
              "MY.eventTypeStoring",
              "MY.eventTypeTransferring",
              "MY.eventTypeOther",
              "MY.eventTypeAtlantis",
              "MY.eventTypeCleaning",
              "MY.eventTypeQuantityEstimation",
              "MY.eventTypeCutTesting",
              "MY.eventTypeDrying",
              "MY.eventTypeGerminationTesting",
              "MY.eventTypeGerminationRetesting",
              "MY.eventTypeGerminationControlling",
              "MY.eventTypeTZTesting",
              "MY.eventTypeSeedExchange"
            ],
            "title": "Event type"
          },
          "germinationConditions": {
            "type": "string",
            "title": "Germination conditions"
          },
          "germinationPercentage": {
            "type": "integer",
            "title": "Germination percentage"
          },
          "germinationRate": {
            "type": "number",
            "title": "Germination rate"
          },
          "lifeStage": {
            "type": "string",
            "enum": [
              "",
              "MY.plantLifeStageSterile",
              "MY.plantLifeStageFertile",
              "MY.plantLifeStageSeed",
              "MY.plantLifeStageSprout",
              "MY.plantLifeStageBud",
              "MY.plantLifeStageFlower",
              "MY.plantLifeStageWitheredFlower",
              "MY.plantLifeStageRipeningFruit",
              "MY.plantLifeStageRipeFruit",
              "MY.plantLifeStageDeadSprout",
              "MY.plantLifeStageSubterranean",
              "MY.plantLifeStageLivingPlant",
              "MY.plantLifeStageDeadPlant"
            ],
            "title": "Life stage"
          },
          "notes": {
            "type": "string",
            "title": "Notes"
          },
          "numberOfSeedsEmpty": {
            "type": "integer",
            "title": "Number seeds empty"
          },
          "numberOfSeedsFull": {
            "type": "integer",
            "title": "Number seed full"
          },
          "numberOfSeedsInfested": {
            "type": "integer",
            "title": "Number seed infested"
          },
          "numberOfSeedsMouldy": {
            "type": "integer",
            "title": "Number seed mouldy"
          },
          "numberOfSeedsPartFull": {
            "type": "integer",
            "title": "Number seed part-full"
          },
          "numberOfSeedsTested": {
            "type": "integer",
            "title": "Number seed tested"
          },
          "percentageSeedsFull": {
            "type": "integer",
            "title": "Test result (%)"
          },
          "seedsExchangedInstitution": {
            "type": "string",
            "title": "Institution"
          },
          "testPassed": {
            "type": "boolean",
            "title": "Test passed"
          },
          "viabilityPercentage": {
            "type": "integer",
            "title": "Viability percentage"
          }
        },
        "required": [
          "branchID",
          "eventType"
        ]
      },
      "field": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHLA.field"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHLA.field"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHLA.field"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/field"
            }
          },
          "filters": {
            "type": "object",
            "title": "filters"
          },
          "formID": {
            "type": "string",
            "title": "form id to be extended"
          },
          "label": {
            "type": "string",
            "title": "label"
          },
          "notices": {
            "type": "object",
            "title": "Notice validators"
          },
          "options": {
            "type": "object",
            "title": "Options"
          },
          "required": {
            "type": "boolean",
            "title": "Required field"
          },
          "type": {
            "type": "string",
            "title": "field type"
          },
          "ui": {
            "type": "object",
            "title": "UI instructions to field"
          },
          "validators": {
            "type": "object",
            "title": "validators"
          },
          "value": {
            "type": "string",
            "title": "value"
          },
          "warnings": {
            "type": "object",
            "title": "warning validators"
          }
        }
      },
      "fieldset": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.fieldset"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.fieldset"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.fieldset"
          }
        }
      },
      "form": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.form"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.form"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.form"
          },
          "baseFormID": {
            "type": "string",
            "title": "Base form"
          },
          "category": {
            "type": "string",
            "enum": [
              "",
              "MHL.categoryGeneric",
              "MHL.categorySurvey",
              "MHL.categoryTaxonomicGroup",
              "MHL.categoryBirdMonitoringSchemes",
              "MHL.categoryCitizenScience"
            ],
            "title": "Category"
          },
          "collectionID": {
            "type": "string",
            "description": "Id for the collection to where observation useing this form are connected",
            "title": "Collection ID"
          },
          "context": {
            "type": "string",
            "description": "The schema context of the form (e.g. MY.document, MNP.namedPlace...)",
            "title": "Context"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/field"
            }
          },
          "fieldsFormID": {
            "type": "string",
            "description": "Use fields, uiSchema and translations from the form",
            "title": "Fields form ID"
          },
          "language": {
            "type": "string",
            "enum": [
              "",
              "en",
              "fi",
              "sv"
            ],
            "title": "Form language"
          },
          "logo": {
            "type": "string",
            "title": "Logo address"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "options": {
            "$ref": "#/components/schemas/formOptions"
          },
          "patch": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "object"
            },
            "minItems": 0,
            "title": "Patch form data"
          },
          "shortDescription": {
            "type": "string",
            "title": "Short description"
          },
          "shortTitle": {
            "type": "string",
            "description": "Shown at sidebar and & as browser title",
            "title": "Short title"
          },
          "supportedLanguage": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "en",
                "fi",
                "sv"
              ]
            },
            "minItems": 0,
            "title": "Supported language"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "translations": {
            "type": "object",
            "title": "Translations"
          },
          "uiSchema": {
            "type": "object",
            "title": "Specification for ui schema"
          }
        }
      },
      "formFooter": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.formFooterClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.formFooterClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.formFooterClass"
          },
          "footerDescription": {
            "type": "string",
            "description": "Text to show for footer",
            "title": "Description"
          },
          "footerLogos": {
            "type": "object",
            "description": "Key is an image URI, value is the URI of the page clicking the image opens",
            "title": "Logos"
          }
        }
      },
      "formInstructions": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.formInstructionsClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.formInstructionsClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.formInstructionsClass"
          }
        }
      },
      "formNamedPlaceOptions": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.formNamedPlaceOptionsClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.formNamedPlaceOptionsClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.formNamedPlaceOptionsClass"
          },
          "adminShowCopyLink": {
            "type": "boolean",
            "description": "Named place viewer shows button to copy the URL for the named place viewer",
            "title": "Show copy link for admin"
          },
          "allowAddingPublic": {
            "type": "boolean",
            "description": "Form users can create new named places for the form",
            "title": "Allow adding public named places"
          },
          "birdAssociationAreaHelp": {
            "type": "string",
            "description": "Help text for bird association filter",
            "title": "Bird association area help"
          },
          "chooseDescription": {
            "type": "string",
            "description": "Description shown at named place choose page. Allows HTML.",
            "title": "Choose page description"
          },
          "copyLatestDocumentToNamedPlace": {
            "type": "boolean",
            "description": "The latest document is copied to named place's prepopulatedDocument. if documents date is same or after the current prepopulated document's date, or if prepopulated document doesn't have date. Date is checked from gatheringEvent or from gatherings",
            "title": "Copy latest document to named place"
          },
          "createDescription": {
            "type": "string",
            "description": "Description shown above named place form when creating new named place. Allows HTML.",
            "title": "Create new description"
          },
          "createNewButtonLabel": {
            "type": "string",
            "description": "Label for new named place creation button at named place choose page",
            "title": "Create new button label"
          },
          "createNewButtonPrependingTextLabel": {
            "type": "string",
            "description": "Label for text before new named place creation button at named place choose page",
            "title": "Text prepending create new button"
          },
          "documentListUseLocalDocumentViewer": {
            "type": "boolean",
            "description": "Theme own submissions page uses local document viewer (that shows more accurate data)",
            "title": "Use local document viewer for own submissions"
          },
          "documentViewerForcedFields": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Forces local document viewer to show these fields",
            "title": "Document viewer forced fields"
          },
          "documentViewerGatheringGeometryJSONPath": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "The path of geometry that document viewer should show",
            "title": "Document viewer gathering geometry JSON path"
          },
          "documentViewerZoomToData": {
            "type": "boolean",
            "description": "Document viewer zooms to data instead of locked zoom level",
            "title": "Document viewer zoom to data"
          },
          "earlierLabel": {
            "type": "string",
            "description": "Admin label for named place viewer's document list",
            "title": "Earlier document label (ADMIN)"
          },
          "editDescription": {
            "type": "string",
            "description": "Description shown at top of page when editing named place",
            "title": "Edit page description"
          },
          "filterByBirdAssociationArea": {
            "type": "boolean",
            "description": "The named place UI allows filtering by bird association area",
            "title": "Filter named places by bird association area"
          },
          "filterByMunicipality": {
            "type": "boolean",
            "description": "The named place UI allows filtering by municipality",
            "title": "Filter named places by municipality"
          },
          "filterByTags": {
            "type": "boolean",
            "description": "The named place UI allows filtering by tags",
            "title": "Filter named places by tags"
          },
          "headerFields": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "When recording a document for a named place, the named place's data of these fields will be shown at the top of the page (defaults to [\"alternativeIDs\", \"name\", \"municipality\"]",
            "title": "Document header fields of place"
          },
          "hideMapTab": {
            "type": "boolean",
            "description": "On named place chooser view, map tab is hidden",
            "title": "Hide map tab"
          },
          "includeUnits": {
            "type": "boolean",
            "description": "Named places will be fetched with units included (hard coded to work only for HR.2049)",
            "title": "Include units in named place query"
          },
          "infoFields": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Fields that named place viewer shows (if not defined will be digged from uiSchema[\"ui:options\"].fieldsScopes[form collectionID])",
            "title": "Info fields for viewer"
          },
          "lastCensusLabel": {
            "type": "string",
            "description": "Label for named place viewer last census",
            "title": "Last census label"
          },
          "listColumnNameMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Overrides labels for named place list column headers",
            "title": "List column names"
          },
          "listColumns": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "List of columns visible in the list view",
            "title": "Columns in list"
          },
          "listColumnsMultisort": {
            "type": "boolean",
            "title": "Columns multisort"
          },
          "listLabel": {
            "type": "string",
            "description": "Label for named place chooser list tab",
            "title": "List label"
          },
          "mapCluster": {
            "type": "boolean",
            "title": "Cluster the map points"
          },
          "mapOverlayNames": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Overlays that named place chooser map should show",
            "title": "Map overlays"
          },
          "mapTileLayerName": {
            "type": "string",
            "description": "Tilelayer name that named place chooser map should show",
            "title": "Map tilelayer"
          },
          "myEarlierLabel": {
            "type": "string",
            "description": "User label for named place viewer's document list",
            "title": "Earlier document label (USER)"
          },
          "namedPlaceFormID": {
            "type": "string",
            "description": "Form ID of named place form (defaults to MHL.36)",
            "title": "Form ID"
          },
          "namedPlaceList": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Fields that named places list shows.",
            "title": "Named place list fields"
          },
          "prepopulatedDocumentFields": {
            "type": "object",
            "description": "When a new named place is created, the prepopulatedDocument will be populated according to this.",
            "title": "Prepopulated document initialization"
          },
          "printLabel": {
            "type": "string",
            "description": "Label for print button of named place viewer",
            "title": "Print button label"
          },
          "releaseLabel": {
            "type": "string",
            "title": "Release reservation label"
          },
          "reservableLabel": {
            "type": "string",
            "title": "Reservable label"
          },
          "reservationUntil": {
            "type": "string",
            "description": "Places are reservable if defined. Value defines when the reservation should expire in ISO-8601. Example: ${year}-10-12",
            "title": "Reservation expiration"
          },
          "reservedLabel": {
            "type": "string",
            "title": "Reserved label"
          },
          "showLegendList": {
            "type": "boolean",
            "description": "Named place list shows legend for the row colors",
            "title": "Show list colors legend"
          },
          "startWithMap": {
            "type": "boolean",
            "description": "Named place chooser view starts with map tab instead of list",
            "title": "Start with map tab"
          },
          "useAcceptedDocument": {
            "type": "boolean",
            "description": "Instead of populating observation form with prepopulatedDocument, it is populated with acceptedDocument. Admin can change the acceptedDocument from observation list",
            "title": "use accepted document"
          },
          "useLabel": {
            "type": "string",
            "description": "Named place viewer label for button for recording new observation",
            "title": "Use place label"
          },
          "zoomToData": {
            "type": "boolean",
            "description": "Named place chooser map is initialized with data fitted in view.",
            "title": "Zoom to data"
          }
        }
      },
      "formOptions": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.formOptionsClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.formOptionsClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.formOptionsClass"
          },
          "about": {
            "$ref": "#/components/schemas/multiLang"
          },
          "adminLockable": {
            "type": "boolean",
            "description": "Form admin can lock documents. Locked documents can't be edited",
            "title": "Document are lockable by admin"
          },
          "allowAddingPublicNamedPlaces": {
            "type": "boolean",
            "description": "Form users can create new named places for the form",
            "title": "Allow adding public named places"
          },
          "allowExcel": {
            "type": "boolean",
            "description": "Allows usage in spreadsheet upload component",
            "title": "Allow excel"
          },
          "allowTemplate": {
            "type": "boolean",
            "description": "Allows creating templates from documents",
            "title": "Allow templates"
          },
          "cancelLabel": {
            "type": "string",
            "description": "Label for the cancel button at the form footer",
            "title": "Footer cancel button label"
          },
          "copyLatestDocumentToNamedPlace": {
            "type": "boolean",
            "description": "The latest document is copied to named place's prepopulatedDocument. if documents date is same or after the current prepopulated document's date, or if prepopulated document doesn't have date. Date is checked from gatheringEvent or from gatherings",
            "title": "Copy latest document to named place"
          },
          "dataset": {
            "type": "boolean",
            "description": "Has dataset about page",
            "title": "Dataset form"
          },
          "disableRequestDescription": {
            "type": "boolean",
            "description": "Theme form introduction page doesn't show description for the form permission request button",
            "title": "Disable form permissionrequest description"
          },
          "disabled": {
            "type": "boolean",
            "description": "Prevent sending documents & named places",
            "title": "Disabled"
          },
          "displayOwnSubmissions": {
            "type": "boolean",
            "description": "Only if has named places. All documents for admin",
            "title": "Display own submissions"
          },
          "documentsViewableForAll": {
            "type": "boolean",
            "description": "The users can see all the documents with the form's collection ID instead of just their own",
            "title": "Documents are viewable for all users"
          },
          "draftLabel": {
            "type": "string",
            "description": "Label for the draft button at the form footer",
            "title": "Footer draft button label"
          },
          "editLabel": {
            "type": "string",
            "title": "Edit button label"
          },
          "emptyOnNoCount": {
            "type": "boolean",
            "description": "Units without count aren't considered in laji.fi viewer (including document viewers and datatables)",
            "title": "Consider unit without count empty"
          },
          "excludeFromGlobalExcel": {
            "type": "boolean",
            "description": "Excludes from the Vihko excel tools",
            "title": "Exclude from global excel tools"
          },
          "filterNamedPlacesByBirdAssociationArea": {
            "type": "boolean",
            "description": "The named place UI allows filtering by bird association area",
            "title": "Filter named places by bird association area"
          },
          "filterNamedPlacesByMunicipality": {
            "type": "boolean",
            "description": "The named place UI allows filtering by municipality",
            "title": "Filter named places by municipality"
          },
          "filterNamedPlacesByTags": {
            "type": "boolean",
            "description": "The named place UI allows filtering by tags",
            "title": "Filter named places by tags"
          },
          "footer": {
            "$ref": "#/components/schemas/formFooter"
          },
          "formOwnSubmissionsLabel": {
            "type": "string",
            "description": "Label for the own submissions list at the header of document form",
            "title": "Own submissions page title"
          },
          "formPermissionDescription": {
            "type": "string",
            "description": "Shown at form permission intro page. Allows HTML",
            "title": "Form permissions page description"
          },
          "forms": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Sub forms"
          },
          "hasAdmins": {
            "type": "boolean",
            "description": "The form has administrators. Administrators can handle user access permissions and admin roles for all forms with the collectionID of the form.",
            "title": "Has admins"
          },
          "hideCancelButton": {
            "type": "boolean",
            "description": "Hides the cancel button at form footer",
            "title": "Hide cancel button"
          },
          "hideDraftButton": {
            "type": "boolean",
            "title": "hideDraftButton"
          },
          "hideSaveButton": {
            "type": "boolean",
            "description": "Hides the save/edit button at form footer",
            "title": "Hide save button"
          },
          "hideTES": {
            "type": "boolean",
            "description": "Terms of Service is hidden at the header of observation form",
            "title": "Hide TES"
          },
          "hideTempButton": {
            "type": "boolean",
            "description": "Hides the draft button at form footer",
            "title": "Hide draft button"
          },
          "instructions": {
            "$ref": "#/components/schemas/multiLang"
          },
          "mobile": {
            "type": "boolean",
            "description": "Form UI has a greeting page for convenient mobile usage",
            "title": "Use mobile UI"
          },
          "namedPlaceOptions": {
            "$ref": "#/components/schemas/formNamedPlaceOptions"
          },
          "navigationTitle": {
            "type": "string",
            "description": "The title label for theme form sidebar",
            "title": "Navigation title"
          },
          "ownSubmissionsActions": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Available actions for own submissions (only on the own submissions page). Defaults to ['edit', 'view', 'download', 'stats', 'delete']",
            "title": "Own submissions row actions"
          },
          "ownSubmissionsAdminTitle": {
            "type": "string",
            "description": "Shown at sidebar link and title of all submissions page",
            "title": "Own submissions title"
          },
          "ownSubmissionsColumns": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Columns for own submissions (only on the own submissions page). Defaults to ['dateEdited', 'dateObserved', 'taxon', 'namedPlaceName', 'observer', 'id']",
            "title": "Own submissions table column"
          },
          "ownSubmissionsTitle": {
            "type": "string",
            "description": "Shown at sidebar link and title of all submissions page",
            "title": "Own submissions title"
          },
          "periods": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Periods that the \"NoExistingGatheringsInNamedPlace\" validation uses",
            "title": "Periods"
          },
          "prepopulateWithInformalTaxonGroups": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Prepopulate form data with data from informal taxon group"
          },
          "prepopulatedDocument": {
            "$ref": "#/components/schemas/document"
          },
          "printType": {
            "type": "string",
            "enum": [
              "",
              "MHL.printTypeLineTransect"
            ],
            "title": "Print type"
          },
          "restrictAccess": {
            "type": "string",
            "enum": [
              "",
              "MHL.restrictAccessStrict",
              "MHL.restrictAccessLoose"
            ],
            "description": "Users need to have permission to access the form",
            "title": "Restrict access"
          },
          "resultServiceType": {
            "type": "string",
            "enum": [
              "",
              "MHL.resultServiceTypeLineTransect",
              "MHL.resultServiceTypeNafi",
              "MHL.resultServiceTypeBirdPointCount",
              "MHL.resultServiceTypeWinterBirdCount",
              "MHL.resultServiceTypeSykeInsectProjects"
            ],
            "title": "Type of result service"
          },
          "saveErrorMessage": {
            "type": "string",
            "description": "Message shown when document save failed",
            "title": "Save error message"
          },
          "saveLabel": {
            "type": "string",
            "description": "Label for the save button at the form footer",
            "title": "Footer save button label"
          },
          "saveSuccessMessage": {
            "type": "string",
            "description": "Message shown when document was successfully saved",
            "title": "Save success message"
          },
          "saveTempSuccessMessage": {
            "type": "string",
            "description": "Message shown when document draft was successfully saved",
            "title": "Save draft success message"
          },
          "season": {
            "$ref": "#/components/schemas/formSeason"
          },
          "secondaryCopy": {
            "type": "boolean",
            "description": "Makes the documents reported with the form secondary",
            "title": "Secondary copy"
          },
          "shortTitleFromCollectionName": {
            "type": "boolean",
            "description": "Overrides MHL.shortTitle usage",
            "title": "Short title from collection name"
          },
          "sidebarFormLabel": {
            "type": "string",
            "description": "Sub forms are shown only if they have this property",
            "title": "Sidebar label for form"
          },
          "simple": {
            "type": "boolean",
            "description": "Has only a form page, no sidebar",
            "title": "Simple form"
          },
          "strict": {
            "type": "boolean",
            "description": "Documents can't have data not defined in form fields.",
            "title": "Strict"
          },
          "tempLabel": {
            "type": "string",
            "description": "Label for the draft button at the form footer",
            "title": "Footer draft button label"
          },
          "useNamedPlaces": {
            "type": "boolean",
            "description": "Makes the form use named places",
            "title": "Use named places"
          },
          "useSchemaCommentsAsHelpTexts": {
            "type": "boolean",
            "description": "Uses schema comments as form help texts",
            "title": "Use schema comments as help texts"
          },
          "viewerType": {
            "type": "string",
            "enum": [
              "",
              "MHL.viewerTypeLineTransect",
              "MHL.viewerTypeBirdPointCount"
            ],
            "title": "Document viewer type"
          },
          "warnEditingOldDocument": {
            "type": "boolean",
            "title": "warnEditingOldDocument"
          },
          "warnEditingOldDocumentDuration": {
            "type": "boolean",
            "description": "Duration in ISO 8601 duration format. Defaults to P1W (one week)",
            "title": "Duration of editing old document warning"
          }
        }
      },
      "formPermission": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MFP.formPermission"
          },
          "id": {
            "type": "string",
            "title": "Id for the MFP.formPermission"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MFP.formPermission"
          },
          "admins": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "List persons who are admins"
          },
          "collectionID": {
            "type": "string",
            "title": "Collection id for which permission handled"
          },
          "editors": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "List persons who have access to this form"
          },
          "permissionRequests": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "List of persons who requested permission"
          }
        },
        "required": [
          "collectionID"
        ]
      },
      "formPermissionPerson": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MFP.formPermissionPerson"
          },
          "id": {
            "type": "string",
            "title": "Id for the MFP.formPermissionPerson"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MFP.formPermissionPerson"
          },
          "personID": {
            "type": "string",
            "title": "Users person id"
          },
          "admins": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "List of collections where person is admin"
          },
          "editors": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "List of collections where person is editor"
          },
          "permissionRequests": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "List of collections where person has permission requests"
          }
        },
        "required": [
          "personID"
        ]
      },
      "formPermissionSingle": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MFP.formPermissionSingle"
          },
          "id": {
            "type": "string",
            "title": "Id for the MFP.formPermissionSingle"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MFP.formPermissionSingle"
          },
          "collectionID": {
            "type": "string",
            "title": "Collection id for which permission handled"
          },
          "type": {
            "type": "string",
            "enum": [
              "",
              "MFP.typeAdmin",
              "MFP.typeEditor",
              "MFP.typeAccessRequest"
            ],
            "title": "Type of the permission"
          },
          "userID": {
            "type": "string",
            "title": "For who this permission is for"
          }
        },
        "required": [
          "collectionID"
        ]
      },
      "formSeason": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.formSeasonClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.formSeasonClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.formSeasonClass"
          },
          "end": {
            "type": "string",
            "description": "End of season",
            "title": "end"
          },
          "start": {
            "type": "string",
            "description": "Start of season",
            "title": "Start"
          }
        }
      },
      "gathering": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Gathering event"
          },
          "id": {
            "type": "string",
            "title": "Id for the Gathering event"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Gathering event"
          },
          "AFEQuadrat": {
            "type": "string",
            "description": "AFE grid name",
            "title": "AFE grid"
          },
          "UTMQuadrat": {
            "type": "string",
            "description": "UTM grid name",
            "title": "UTM grid"
          },
          "acknowledgeNoUnitsInCensus": {
            "type": "boolean",
            "title": "No units in census"
          },
          "administrativeProvince": {
            "type": "string",
            "description": "Regions, rayons, provinces and other administrative areas. Separate multiple names with commas, from generic to specific. (E.g. Etelä-Suomen lääni, Uusimaa)",
            "title": "Administrative province"
          },
          "alt": {
            "type": "string",
            "description": "Altitude form sea level in meters, single value or range (E.g. 90, or 80-100). No GPS altitude here.",
            "title": "Alt in meters"
          },
          "areaDetail": {
            "type": "string",
            "title": "Area details"
          },
          "associatedObservationTaxa": {
            "type": "string",
            "description": "Write associated observation taxa names here, separated by a semicolon (;). E.g.: \"Betula pendula; Betula pubescens; Poaceae\". These will form their own units of the type observation.",
            "title": "Associated observation taxa"
          },
          "associatedSpecimenTaxa": {
            "type": "string",
            "description": "Write associated specimen taxa names here, separated by a semicolon (;). E.g.: \"Betula pendula; Betula pubescens; Poaceae\". These will form their own units of the type Preserved specimen.",
            "title": "Associated specimen taxa"
          },
          "batHabitat": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.batHabitatYardCityCentre",
                "MY.batHabitatYardSuburbs",
                "MY.batHabitatYardRural",
                "MY.batHabitatRoadSide",
                "MY.batHabitatStandOfTreesCloseToBuildings",
                "MY.batHabitatParkWIthFewTrees",
                "MY.batHabitatParkAbundantInTrees",
                "MY.batHabitatSparseForest",
                "MY.batHabitatDenseForest",
                "MY.batHabitatEdgeOfShoreCoppice",
                "MY.batHabitatLakeShore",
                "MY.batHabitatSeaShore",
                "MY.batHabitatArchipelago",
                "MY.batHabitatStreamOrRiverBank",
                "MY.batHabitatOldBuildingOrRuins",
                "MY.batHabitatCountryside"
              ]
            },
            "minItems": 0,
            "description": "Bat habitat",
            "title": "Habitat"
          },
          "binocularsUsed": {
            "type": "boolean",
            "title": "Binoculars"
          },
          "biologicalProvince": {
            "type": "string",
            "description": "Formal abbreviation. For Finnish eliömaakunnat, use Finnish abbreviation.",
            "title": "Biogeographical province"
          },
          "censusHinderedByEnviromentalFactors": {
            "type": "boolean",
            "title": "Weather (etc) hindered the census"
          },
          "censusHinderedByFog": {
            "type": "boolean",
            "title": "Fog hindered the census"
          },
          "censusHinderedByRain": {
            "type": "boolean",
            "title": "Rain hindered the census"
          },
          "censusHinderedByWind": {
            "type": "boolean",
            "title": "Wind hindered the census"
          },
          "collectingEventName": {
            "type": "string",
            "description": "Name of an expedition or such.",
            "title": "Collecting event name"
          },
          "controlActivitiesNotes": {
            "type": "string",
            "title": "Prevention measures"
          },
          "coordinateNotes": {
            "type": "string",
            "description": "Free-text notes about the coordinates.",
            "title": "Coordinate notes"
          },
          "coordinateRadius": {
            "type": "string",
            "description": "Maximum error of coordinates in meters",
            "title": "Error radius in meters"
          },
          "coordinateSource": {
            "type": "string",
            "enum": [
              "",
              "MY.coordinateSourceGps",
              "MY.coordinateSourcePeruskartta",
              "MY.coordinateSourcePapermap",
              "MY.coordinateSourceKotkamap",
              "MY.coordinateSourceKarttapaikka",
              "MY.coordinateSourceRetkikartta",
              "MY.coordinateSourceGoogle",
              "MY.coordinateSourceOther",
              "MY.coordinateSourceUnknown"
            ],
            "description": "Use for NEW SPECIMENS: Where the coordinates have been acquired",
            "title": "Coord source"
          },
          "coordinateSystem": {
            "type": "string",
            "enum": [
              "",
              "MY.coordinateSystemYkj",
              "MY.coordinateSystemWgs84",
              "MY.coordinateSystemWgs84dms",
              "MY.coordinateSystemKkj",
              "MY.coordinateSystemEtrs-tm35fin",
              "MY.coordinateSystemDd",
              "MY.coordinateSystemDms"
            ],
            "description": "More information about the coordinate systems: https://wiki.helsinki.fi/display/digit/Entering+specimen+data",
            "title": "Coordinate system"
          },
          "coordinatesGridYKJ": {
            "type": "string",
            "title": "Finnish uniform grid coordinates"
          },
          "coordinatesVerbatim": {
            "type": "string",
            "description": "Coordinates, possible coordinate system and error radius word-to-word as they appear on the label or other original source, errors and all.",
            "title": "Verbatim coordinates from label or other original source"
          },
          "country": {
            "type": "string",
            "description": "Country name in English, or 2-letter country code, or name from label",
            "title": "Country"
          },
          "county": {
            "type": "string",
            "description": "County (piirikunta, kreivikunta etc.)",
            "title": "County"
          },
          "dateBegin": {
            "type": "string",
            "title": "Start date"
          },
          "dateEnd": {
            "type": "string",
            "title": "End date"
          },
          "dateVerbatim": {
            "type": "string",
            "description": "Date just as it appears on the label or other original source, no interpretation, errors and all",
            "title": "Verbatim date from original source"
          },
          "depth": {
            "type": "string",
            "description": "Depth in meters, single value or range (E.g. 0.9, or 0.8-1.0)",
            "title": "Depth in meters"
          },
          "dynamicProperties": {
            "type": "string",
            "title": "dynamicProperties"
          },
          "eventDate": {
            "type": "string",
            "title": "Event Date"
          },
          "forestVegetationZone": {
            "type": "string",
            "enum": [
              "",
              "MY.forestVegetationZone1a",
              "MY.forestVegetationZone1b",
              "MY.forestVegetationZone2a",
              "MY.forestVegetationZone2b",
              "MY.forestVegetationZone3a",
              "MY.forestVegetationZone3b",
              "MY.forestVegetationZone3c",
              "MY.forestVegetationZone4a",
              "MY.forestVegetationZone4b",
              "MY.forestVegetationZone4c",
              "MY.forestVegetationZone4d"
            ],
            "description": "Finnish forest vegetation zone",
            "title": "Forest vegetation zone"
          },
          "gatheringFact": {
            "$ref": "#/components/schemas/gatheringFact"
          },
          "gatheringType": {
            "type": "string",
            "enum": [
              "",
              "MY.gatheringTypeForagingArea",
              "MY.gatheringTypeBreedingAndRestingArea",
              "MY.gatheringTypeCavityTree",
              "MY.gatheringTypeDroppingsTree",
              "MY.gatheringTypeNestTree",
              "MY.gatheringTypeLolifeAccess",
              "MY.gatheringTypeLolifeCoreZone",
              "MY.gatheringTypeLolifeHabitatZone",
              "MY.gatheringTypeLolifeApplicableZone",
              "MY.gatheringTypeWaterbirdPoint",
              "MY.gatheringTypeWaterbirdRound"
            ],
            "title": "Gathering event type"
          },
          "geometry": {
            "$ref": "#/components/schemas/geometry"
          },
          "georeferenceSource": {
            "type": "string",
            "enum": [
              "",
              "MY.georeferenceSourceKotka",
              "MY.georeferenceSourceKarttapaikka",
              "MY.georeferenceSourcePaikkatietoikkuna",
              "MY.georeferenceSourceKarjalankartat",
              "MY.georeferenceSourceRetkikartta",
              "MY.georeferenceSourceGoogle",
              "MY.georeferenceSourcePeruskartta",
              "MY.georeferenceSourcePapermap",
              "MY.georeferenceSourceOtherpaper",
              "MY.georeferenceSourceOtherweb",
              "MY.georeferenceSourceCatalogue",
              "MY.georeferenceSourceBiogeomancer",
              "MY.georeferenceSourceGeolocate",
              "MY.georeferenceSourceOther",
              "MY.georeferenceSourceUnknown"
            ],
            "description": "Use for OLD SPECIMENS: What source was used to get coordinates based on locality names",
            "title": "Georeferencing source"
          },
          "habitat": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.habitatEnumValue1",
                "MY.habitatEnumValue2",
                "MY.habitatEnumValue3",
                "MY.habitatEnumValue4",
                "MY.habitatEnumValue5",
                "MY.habitatEnumValue6",
                "MY.habitatEnumValue7",
                "MY.habitatEnumValue8",
                "MY.habitatEnumValue9",
                "MY.habitatEnumValue10",
                "MY.habitatEnumValue11",
                "MY.habitatEnumValue12",
                "MY.habitatEnumValue13",
                "MY.habitatEnumValue14",
                "MY.habitatEnumValue15",
                "MY.habitatEnumValue16",
                "MY.habitatEnumValue17",
                "MY.habitatEnumValue18",
                "MY.habitatEnumValue19",
                "MY.habitatEnumValue20",
                "MY.habitatEnumValue21",
                "MY.habitatEnumValue22",
                "MY.habitatEnumValue23",
                "MY.habitatEnumValue24",
                "MY.habitatEnumValue25",
                "MY.habitatEnumValue26",
                "MY.habitatEnumValue27",
                "MY.habitatEnumValue28",
                "MY.habitatEnumValue29",
                "MY.habitatEnumValue30",
                "MY.habitatEnumValue31",
                "MY.habitatEnumValue32",
                "MY.habitatEnumValue33",
                "MY.habitatEnumValue34",
                "MY.habitatEnumValue35",
                "MY.habitatEnumValue36",
                "MY.habitatEnumValue87",
                "MY.habitatEnumValue37",
                "MY.habitatEnumValue38",
                "MY.habitatEnumValue39",
                "MY.habitatEnumValue40",
                "MY.habitatEnumValue41",
                "MY.habitatEnumValue42",
                "MY.habitatEnumValue43",
                "MY.habitatEnumValue44",
                "MY.habitatEnumValue45",
                "MY.habitatEnumValue46",
                "MY.habitatEnumValue47",
                "MY.habitatEnumValue48",
                "MY.habitatEnumValue49",
                "MY.habitatEnumValue50",
                "MY.habitatEnumValue51",
                "MY.habitatEnumValue52",
                "MY.habitatEnumValue53",
                "MY.habitatEnumValue54",
                "MY.habitatEnumValue55",
                "MY.habitatEnumValue56",
                "MY.habitatEnumValue57",
                "MY.habitatEnumValue58",
                "MY.habitatEnumValue59",
                "MY.habitatEnumValue60",
                "MY.habitatEnumValue61",
                "MY.habitatEnumValue62",
                "MY.habitatEnumValue63",
                "MY.habitatEnumValue64",
                "MY.habitatEnumValue65",
                "MY.habitatEnumValue66",
                "MY.habitatEnumValue67",
                "MY.habitatEnumValue68",
                "MY.habitatEnumValue69",
                "MY.habitatEnumValue70",
                "MY.habitatEnumValue71",
                "MY.habitatEnumValue72",
                "MY.habitatEnumValue73",
                "MY.habitatEnumValue74",
                "MY.habitatEnumValue75",
                "MY.habitatEnumValue76",
                "MY.habitatEnumValue77",
                "MY.habitatEnumValue78",
                "MY.habitatEnumValue79",
                "MY.habitatEnumValue80",
                "MY.habitatEnumValue81",
                "MY.habitatEnumValue82",
                "MY.habitatEnumValue83",
                "MY.habitatEnumValue84",
                "MY.habitatEnumValue85",
                "MY.habitatEnumValue86",
                "MY.habitatEnumValue88",
                "MY.habitatEnumValue89",
                "MY.habitatEnumValue90",
                "MY.habitatEnumValue91",
                "MY.habitatEnumValue92",
                "MY.habitatEnumValue93",
                "MY.habitatEnumValue94"
              ]
            },
            "minItems": 0,
            "title": "Habitat"
          },
          "habitatAttributes": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.habitatAttributesEnumValue1",
                "MY.habitatAttributesEnumValue2",
                "MY.habitatAttributesEnumValue3",
                "MY.habitatAttributesEnumValue4",
                "MY.habitatAttributesEnumValue5",
                "MY.habitatAttributesEnumValue6",
                "MY.habitatAttributesEnumValue7",
                "MY.habitatAttributesEnumValue8",
                "MY.habitatAttributesEnumValue9",
                "MY.habitatAttributesEnumValue10",
                "MY.habitatAttributesEnumValue11",
                "MY.habitatAttributesEnumValue12",
                "MY.habitatAttributesEnumValue13",
                "MY.habitatAttributesEnumValue14",
                "MY.habitatAttributesEnumValue15",
                "MY.habitatAttributesEnumValue16",
                "MY.habitatAttributesEnumValue17",
                "MY.habitatAttributesEnumValue18",
                "MY.habitatAttributesEnumValue19",
                "MY.habitatAttributesEnumValue20",
                "MY.habitatAttributesEnumValue21",
                "MY.habitatAttributesEnumValue22"
              ]
            },
            "minItems": 0,
            "title": "Additional information of habitat"
          },
          "habitatClassification": {
            "type": "string",
            "description": "Formal habitat name or abbreviation. If several, separate with semicolons (E.g. 'OMT; OMaT').",
            "title": "Habitat classification"
          },
          "habitatDescription": {
            "type": "string",
            "description": "Informal description of the habitat.",
            "title": "Habitat description"
          },
          "hasUnit": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "hasUnit"
          },
          "higherGeography": {
            "type": "string",
            "description": "If country is not known or not applicable, for example continent, ocean or large island",
            "title": "Higher geography"
          },
          "invasiveControlAreaKnown": {
            "type": "boolean",
            "title": "Esiintymän koko / laajuus tiedossa"
          },
          "invasiveControlDangerous": {
            "type": "boolean",
            "title": "Is the occurrence a direct threat to e.g. endangered species, biotopes or humans?"
          },
          "invasiveControlDangerousDescription": {
            "type": "string",
            "title": "Description of threats"
          },
          "invasiveControlEffectiveness": {
            "type": "string",
            "enum": [
              "",
              "MY.invasiveControlEffectivenessFull",
              "MY.invasiveControlEffectivenessPartial",
              "MY.invasiveControlEffectivenessNone",
              "MY.invasiveControlEffectivenessNotFound"
            ],
            "title": "Control level"
          },
          "invasiveControlEffectivenessNotes": {
            "type": "string",
            "title": "Notes of control level"
          },
          "invasiveControlMethods": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.invasiveControlMethodsMechanical",
                "MY.invasiveControlMethodsChemical",
                "MY.invasiveControlMethodsBiological",
                "MY.invasiveControlMethodsOther"
              ]
            },
            "minItems": 0,
            "title": "Control methods"
          },
          "invasiveControlMethodsDescription": {
            "type": "string",
            "title": "Description of control methods"
          },
          "invasiveControlOpen": {
            "type": "boolean",
            "title": "Are follow-up controls needed?"
          },
          "invasiveControlOpenDescription": {
            "type": "string",
            "title": "Description of follow-up controls?"
          },
          "invasiveControlOtherExpensesInEuros": {
            "type": "integer",
            "minimum": 0,
            "title": "Estimated of other expenses in euros"
          },
          "invasiveControlTaxon": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Control target taxon"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          },
          "keywords": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Keywords"
          },
          "latitude": {
            "type": "string",
            "description": "Latitude. For southern latitudes, use negative value.",
            "title": "Lat (N)"
          },
          "leg": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Name of the collector(s), in format 'Lastname, Firstname; Lastname Firstname'",
            "title": "Leg"
          },
          "legUserID": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Alkuperäislähteen käyttäjätunnus",
            "title": "Käyttäjätunnus"
          },
          "legVerbatim": {
            "type": "string",
            "description": "Leg just as it appears in the label or other original source, no interpretation, errors and all.",
            "title": "Verbatim leg from orginal source"
          },
          "locality": {
            "type": "string",
            "description": "Official name of the locality in basic form. Separate multiple names with commas, from generic to specific. No informal description here.",
            "title": "Locality names"
          },
          "localityDescription": {
            "type": "string",
            "description": "Informal description of the exact locality, e.g. '5 km NE of city X, under stone bridge'",
            "title": "Locality description"
          },
          "localityID": {
            "type": "string",
            "description": "An unique identifier or code for the locality, if the locality has one (e.g. from SAPO-ontology).",
            "title": "Locality ID"
          },
          "localityVerbatim": {
            "type": "string",
            "description": "Locality word-to-word as it appears on the label or other original source, errors and all",
            "title": "Verbatim locality from label or other original source"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude. For western longitudes, use negative value.",
            "title": "Lon (E)"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality, commune, town, city or civil parish",
            "title": "Municipality"
          },
          "namedPlaceID": {
            "type": "string",
            "title": "Named place"
          },
          "notes": {
            "type": "string",
            "description": "Additional information to the data in each section.",
            "title": "Notes"
          },
          "numberOfSampledIndividuals": {
            "type": "string",
            "description": "For garden accessions/seed bank, number of individuals from which seeds were collected",
            "title": "Number of sampled individuals"
          },
          "observationDays": {
            "type": "integer",
            "title": "Observation days"
          },
          "observationMinutes": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Observation minutes",
            "minimum": 0
          },
          "percentageGivingSeeds": {
            "type": "integer",
            "description": "For garden accessions/seed bank, what proportion of the population sampled was giving seeds",
            "title": "% of plant population giving seeds"
          },
          "predominantTree": {
            "type": "string",
            "enum": [
              "",
              "MX.37819",
              "MX.37812",
              "MX.37992",
              "MX.38004",
              "MX.38590",
              "MX.38686",
              "MX.38563",
              "MX.38527",
              "MX.41344",
              "MX.38016",
              "MX.39331",
              "MX.37990",
              "MX.38008",
              "MX.38010",
              "MX.37975",
              "MX.37976",
              "MX.39122",
              "MX.37815"
            ],
            "title": "Predominant tree"
          },
          "projectTitle": {
            "type": "string",
            "title": "projectTitle"
          },
          "province": {
            "type": "string",
            "title": "province"
          },
          "relativeHumidity": {
            "type": "integer",
            "minimum": 0,
            "description": "Relative humidity %",
            "title": "Relative humidity"
          },
          "samplingAreaSizeInSquareMeters": {
            "type": "number",
            "description": "For garden accessions/seed bank, estimated size of the area sampled, in square meters",
            "title": "Size of sampling area (m2)"
          },
          "samplingMethod": {
            "type": "string",
            "enum": [
              "",
              "MY.samplingMethodCarnet",
              "MY.samplingMethodFeromonetrap",
              "MY.samplingMethodNet",
              "MY.samplingMethodDrag",
              "MY.samplingMethodWindowtrap",
              "MY.samplingMethodDigging",
              "MY.samplingMethodFishNet",
              "MY.samplingMethodHand",
              "MY.samplingMethodReared",
              "MY.samplingMethodEpupa",
              "MY.samplingMethodExovo",
              "MY.samplingMethodElarva",
              "MY.samplingMethodFishTrap",
              "MY.samplingMethodYellowWindowTrap",
              "MY.samplingMethodYellowpan",
              "MY.samplingMethodTriangleDrag",
              "MY.samplingMethodPitfall",
              "MY.samplingMethodEclectortrap",
              "MY.samplingMethodDungTrap",
              "MY.samplingMethodBoard",
              "MY.samplingMethodYellowtrap",
              "MY.samplingMethodMistnet",
              "MY.samplingMethodSweeping",
              "MY.samplingMethodSoilsample",
              "MY.samplingMethodWashing",
              "MY.samplingMethodMalaise",
              "MY.samplingMethodPantrap",
              "MY.samplingMethodSeine",
              "MY.samplingMethodAngleFishing",
              "MY.samplingMethodTrampling",
              "MY.samplingMethodBeamTrawl",
              "MY.samplingMethodTrap",
              "MY.samplingMethodDropping",
              "MY.samplingMethodTrunkWindowTrap",
              "MY.samplingMethodElectrofishing",
              "MY.samplingMethodSifting",
              "MY.samplingMethodDiverInsectTrap",
              "MY.samplingMethodDiving",
              "MY.samplingMethodBait",
              "MY.samplingMethodBaittrap",
              "MY.samplingMethodTrawling",
              "MY.samplingMethodLight",
              "MY.samplingMethodLightTrap",
              "MY.samplingMethodWaterBucket",
              "MY.samplingMethodAquaticNet",
              "MY.samplingMethodAquaticEmergenceTrap",
              "MY.samplingMethodWaterSieve",
              "MY.samplingMethodOther"
            ],
            "description": "Main method for (usually intentional) sampling",
            "title": "Sampling method"
          },
          "samplingMethodNotes": {
            "type": "string",
            "title": "Sampling method notes"
          },
          "section": {
            "type": "integer",
            "minimum": 0,
            "title": "Section"
          },
          "skipped": {
            "type": "boolean",
            "title": "Skipped"
          },
          "spottingScopeUsed": {
            "type": "boolean",
            "title": "Spotting scope"
          },
          "substrate": {
            "type": "string",
            "description": "Type of substrate or name of substrate species.",
            "title": "Substrate"
          },
          "taxonCensus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxonCensus"
            }
          },
          "temperature": {
            "type": "integer",
            "title": "Temperature in celsius"
          },
          "timeEnd": {
            "type": "string",
            "title": "End time"
          },
          "timeStart": {
            "type": "string",
            "title": "Start time"
          },
          "trapCount": {
            "type": "integer",
            "title": "Trap count"
          },
          "weather": {
            "type": "string",
            "title": "Weather"
          },
          "wgs84Latitude": {
            "type": "string",
            "title": "WGS84 Latitude"
          },
          "wgs84Longitude": {
            "type": "string",
            "title": "WGS84 Longitude"
          },
          "images": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Images"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/unit"
            }
          }
        }
      },
      "gatheringEvent": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Global gathering event"
          },
          "id": {
            "type": "string",
            "title": "Id for the Global gathering event"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Global gathering event"
          },
          "acknowledgeNoUnitsInCensus": {
            "type": "boolean",
            "title": "No units in census"
          },
          "artificialLight": {
            "type": "string",
            "enum": [
              "",
              "MY.artificialLightEnum1",
              "MY.artificialLightEnum2",
              "MY.artificialLightEnum3",
              "MY.artificialLightEnum4",
              "MY.artificialLightEnum5"
            ],
            "title": "Artificial light"
          },
          "breaksDuringCensusInMinutes": {
            "type": "integer",
            "minimum": 0,
            "title": "Breaks kept in minutes"
          },
          "censusHinderedByEnviromentalFactors": {
            "type": "boolean",
            "title": "Weather (etc) hindered the census"
          },
          "censusHinderedByFog": {
            "type": "boolean",
            "title": "Fog hindered the census"
          },
          "censusHinderedByRain": {
            "type": "boolean",
            "title": "Rain hindered the census"
          },
          "censusHinderedByWind": {
            "type": "boolean",
            "title": "Wind hindered the census"
          },
          "censusPrematurelyAborted": {
            "type": "boolean",
            "title": "Was the census prematurely aborted?"
          },
          "cloudCover": {
            "type": "string",
            "enum": [
              "",
              "MY.cloudCoverOktaEnumUnknown",
              "MY.cloudCoverOktaEnum0",
              "MY.cloudCoverOktaEnum1",
              "MY.cloudCoverOktaEnum2",
              "MY.cloudCoverOktaEnum3",
              "MY.cloudCoverOktaEnum4",
              "MY.cloudCoverOktaEnum5",
              "MY.cloudCoverOktaEnum6",
              "MY.cloudCoverOktaEnum7",
              "MY.cloudCoverOktaEnum8"
            ],
            "title": "Cloudiness"
          },
          "cloudCoverEnd": {
            "type": "string",
            "enum": [
              "",
              "MY.cloudCoverOktaEnumUnknown",
              "MY.cloudCoverOktaEnum0",
              "MY.cloudCoverOktaEnum1",
              "MY.cloudCoverOktaEnum2",
              "MY.cloudCoverOktaEnum3",
              "MY.cloudCoverOktaEnum4",
              "MY.cloudCoverOktaEnum5",
              "MY.cloudCoverOktaEnum6",
              "MY.cloudCoverOktaEnum7",
              "MY.cloudCoverOktaEnum8"
            ],
            "title": "End cloud cover"
          },
          "cloudCoverStart": {
            "type": "string",
            "enum": [
              "",
              "MY.cloudCoverOktaEnumUnknown",
              "MY.cloudCoverOktaEnum0",
              "MY.cloudCoverOktaEnum1",
              "MY.cloudCoverOktaEnum2",
              "MY.cloudCoverOktaEnum3",
              "MY.cloudCoverOktaEnum4",
              "MY.cloudCoverOktaEnum5",
              "MY.cloudCoverOktaEnum6",
              "MY.cloudCoverOktaEnum7",
              "MY.cloudCoverOktaEnum8"
            ],
            "title": "Start cloud cover"
          },
          "completeList": {
            "$ref": "#/components/schemas/completeList"
          },
          "dateBegin": {
            "type": "string",
            "title": "Start date"
          },
          "dateEnd": {
            "type": "string",
            "title": "End date"
          },
          "gatheringFact": {
            "$ref": "#/components/schemas/gatheringFact"
          },
          "geometry": {
            "$ref": "#/components/schemas/geometry"
          },
          "gpsUsed": {
            "type": "boolean",
            "title": "GPS used"
          },
          "leg": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Name of the collector(s), in format 'Lastname, Firstname; Lastname Firstname'",
            "title": "Leg"
          },
          "legPublic": {
            "type": "boolean",
            "title": "Display names publically?"
          },
          "legUserID": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Alkuperäislähteen käyttäjätunnus",
            "title": "Käyttäjätunnus"
          },
          "namedPlaceNotes": {
            "type": "string",
            "title": "Info about this route"
          },
          "notes": {
            "type": "string",
            "description": "Additional information to the data in each section.",
            "title": "Notes"
          },
          "rainIntensity": {
            "type": "string",
            "enum": [
              "",
              "MY.rainIntensityEnumNoRain",
              "MY.rainIntensityEnumLightRain",
              "MY.rainIntensityEnumModerateRain",
              "MY.rainIntensityEnumHeavyRain",
              "MY.rainIntensityEnumTorrentialRain"
            ],
            "title": "Rain intensity"
          },
          "routeDirectionAdhered": {
            "type": "boolean",
            "title": "Adhered route direction"
          },
          "spottingScopeUsed": {
            "type": "boolean",
            "title": "Spotting scope"
          },
          "startDistanceFromNECorner": {
            "type": "string",
            "title": "Start distance from NE corner (m)"
          },
          "startPointDeviation": {
            "type": "integer",
            "title": "Start point deviation (m)"
          },
          "taxonCensus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxonCensus"
            }
          },
          "temperature": {
            "type": "integer",
            "title": "Temperature in celsius"
          },
          "temperatureEnd": {
            "type": "number",
            "title": "End temperature / °C"
          },
          "temperatureStart": {
            "type": "number",
            "title": "Start temperature / °C"
          },
          "timeEnd": {
            "type": "string",
            "title": "End time"
          },
          "timeStart": {
            "type": "string",
            "title": "Start time"
          }
        }
      },
      "gatheringFact": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Keruutapahtuman faktat"
          },
          "id": {
            "type": "string",
            "title": "Id for the Keruutapahtuman faktat"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Keruutapahtuman faktat"
          },
          "batCollector": {
            "type": "string",
            "enum": [
              "",
              "MY.batCollectorAlone",
              "MY.batCollectorWithProjectGroupMember",
              "MY.batCollectorSomeoneElse"
            ],
            "title": "I placed the sound recorder to the terrain"
          },
          "binocularsUsed": {
            "type": "boolean",
            "title": "Binoculars"
          },
          "censusAreaHectares": {
            "type": "integer",
            "minimum": 0,
            "title": "Census area/ha"
          },
          "invasiveControlOtherExpensesInEuros": {
            "type": "integer",
            "minimum": 0,
            "title": "Estimated of other expenses in euros"
          },
          "invasiveControlWorkHours": {
            "type": "integer",
            "minimum": 0,
            "title": "Work hours spent during the control"
          },
          "lineTransectSegmentCounted": {
            "type": "boolean",
            "title": "Biotope counted"
          },
          "lineTransectSegmentMetersEnd": {
            "type": "integer",
            "minimum": 0,
            "title": "Biotope's end meter amount from the start of the line"
          },
          "lineTransectSegmentMetersStart": {
            "type": "integer",
            "minimum": 0,
            "title": "Biotope's start meter amount from the start of the line"
          },
          "observedAreaHectares": {
            "type": "integer",
            "minimum": 0,
            "title": "Observed area/ha"
          },
          "pointCountHabitat": {
            "type": "string",
            "enum": [
              "",
              "MY.pointCountHabitat0",
              "MY.pointCountHabitat1",
              "MY.pointCountHabitat2",
              "MY.pointCountHabitat3",
              "MY.pointCountHabitat4",
              "MY.pointCountHabitat5",
              "MY.pointCountHabitat6",
              "MY.pointCountHabitat7",
              "MY.pointCountHabitat8",
              "MY.pointCountHabitat9",
              "MY.pointCountHabitat10",
              "MY.pointCountHabitat11",
              "MY.pointCountHabitat12",
              "MY.pointCountHabitat13",
              "MY.pointCountHabitat14",
              "MY.pointCountHabitat15",
              "MY.pointCountHabitat16",
              "MY.pointCountHabitat17"
            ],
            "title": "Biotooppi"
          },
          "shorelineLengthMeters": {
            "type": "integer",
            "minimum": 0,
            "title": "Shoreline length/m"
          },
          "spottingScopeUsed": {
            "type": "boolean",
            "title": "Spotting scope"
          },
          "sunniness": {
            "type": "integer",
            "minimum": 0,
            "title": "Sunniness %"
          },
          "sykeButterFlyCensusWind": {
            "type": "string",
            "enum": [
              "",
              "MY.sykeButterFlyCensusWindEnumUnknown",
              "MY.sykeButterFlyCensusWindEnum0",
              "MY.sykeButterFlyCensusWindEnum1",
              "MY.sykeButterFlyCensusWindEnum2",
              "MY.sykeButterFlyCensusWindEnum3",
              "MY.sykeButterFlyCensusWindEnum4",
              "MY.sykeButterFlyCensusWindEnum5",
              "MY.sykeButterFlyCensusWindEnum6"
            ],
            "title": "Windiness"
          },
          "sykeButterFlyCensusWindEnd": {
            "type": "string",
            "enum": [
              "",
              "MY.sykeButterFlyCensusWindEnumUnknown",
              "MY.sykeButterFlyCensusWindEnum0",
              "MY.sykeButterFlyCensusWindEnum1",
              "MY.sykeButterFlyCensusWindEnum2",
              "MY.sykeButterFlyCensusWindEnum3",
              "MY.sykeButterFlyCensusWindEnum4",
              "MY.sykeButterFlyCensusWindEnum5",
              "MY.sykeButterFlyCensusWindEnum6"
            ],
            "title": "End windiness"
          },
          "sykeButterFlyCensusWindStart": {
            "type": "string",
            "enum": [
              "",
              "MY.sykeButterFlyCensusWindEnumUnknown",
              "MY.sykeButterFlyCensusWindEnum0",
              "MY.sykeButterFlyCensusWindEnum1",
              "MY.sykeButterFlyCensusWindEnum2",
              "MY.sykeButterFlyCensusWindEnum3",
              "MY.sykeButterFlyCensusWindEnum4",
              "MY.sykeButterFlyCensusWindEnum5",
              "MY.sykeButterFlyCensusWindEnum6"
            ],
            "title": "Start windiness"
          },
          "waterbirdCensusPeriod": {
            "type": "string",
            "enum": [
              "",
              "MY.waterbirdCensusPeriodEnum1",
              "MY.waterbirdCensusPeriodEnum2",
              "MY.waterbirdCensusPeriodEnumJuvenile",
              "MY.waterbirdCensusPeriodEnumAdditional",
              "MY.waterbirdCensusPeriodEnumCombined"
            ],
            "title": "Census period"
          },
          "waterbirdHabitat": {
            "type": "string",
            "enum": [
              "",
              "MY.waterbirdHabitatEnum1",
              "MY.waterbirdHabitatEnum2",
              "MY.waterbirdHabitatEnum3",
              "MY.waterbirdHabitatEnum4",
              "MY.waterbirdHabitatEnum5",
              "MY.waterbirdHabitatEnum6",
              "MY.waterbirdHabitatEnum7",
              "MY.waterbirdHabitatEnum8",
              "MY.waterbirdHabitatEnum9",
              "MY.waterbirdHabitatEnum10"
            ],
            "title": "Habitat"
          },
          "ykjSquareNumber": {
            "type": "string",
            "title": "Atlas grid"
          },
          "ACAFLAonAlder": {
            "type": "integer",
            "minimum": 0,
            "title": "Urpiaisten ruokailut lepällä"
          },
          "ACAFLAonBirch": {
            "type": "integer",
            "minimum": 0,
            "title": "Urpiaisten ruokailut koivulla"
          },
          "ACAFLAonGround": {
            "type": "integer",
            "minimum": 0,
            "title": "Urpiaisten ruokailut maassa"
          },
          "ACAFLAonPine": {
            "type": "integer",
            "minimum": 0,
            "title": "Urpiaisten ruokailut männyllä"
          },
          "ACAFLAonSpruce": {
            "type": "integer",
            "minimum": 0,
            "title": "Urpiaisten ruokailut kuusella"
          },
          "CARSPIonAlder": {
            "type": "integer",
            "minimum": 0,
            "title": "Vihervarpusten ruokailut lepällä"
          },
          "CARSPIonBirch": {
            "type": "integer",
            "minimum": 0,
            "title": "Vihervarpusten ruokailut koivulla"
          },
          "CARSPIonGround": {
            "type": "integer",
            "minimum": 0,
            "title": "Vihervarpusten ruokailut maassa"
          },
          "CARSPIonPine": {
            "type": "integer",
            "minimum": 0,
            "title": "CARSPIonPine"
          },
          "CARSPIonSpruce": {
            "type": "integer",
            "minimum": 0,
            "title": "Vihervarpusten ruokailut kuusella"
          },
          "LOXIAonAlder": {
            "type": "integer",
            "minimum": 0,
            "title": "Käpylintujen ruokailut lepällä"
          },
          "LOXIAonBirch": {
            "type": "integer",
            "minimum": 0,
            "title": "Käpylintujen ruokailut koivulla"
          },
          "LOXIAonGround": {
            "type": "integer",
            "minimum": 0,
            "title": "Käpylintujen ruokailut maassa"
          },
          "LOXIAonPine": {
            "type": "integer",
            "minimum": 0,
            "title": "Käpylintujen ruokailut männyllä"
          },
          "LOXIAonSpruce": {
            "type": "integer",
            "minimum": 0,
            "title": "Käpylintujen ruokailut kuusella"
          },
          "abundanceBOMGAR": {
            "type": "string",
            "enum": [
              "",
              "WBC.speciesAbundanceEnum0",
              "WBC.speciesAbundanceEnum1",
              "WBC.speciesAbundanceEnum2",
              "WBC.speciesAbundanceEnum3"
            ],
            "title": "Tilhi"
          },
          "abundancePINENU": {
            "type": "string",
            "enum": [
              "",
              "WBC.speciesAbundanceEnum0",
              "WBC.speciesAbundanceEnum1",
              "WBC.speciesAbundanceEnum2",
              "WBC.speciesAbundanceEnum3"
            ],
            "title": "Taviokuurna"
          },
          "abundanceTURPIL": {
            "type": "string",
            "enum": [
              "",
              "WBC.speciesAbundanceEnum0",
              "WBC.speciesAbundanceEnum1",
              "WBC.speciesAbundanceEnum2",
              "WBC.speciesAbundanceEnum3"
            ],
            "title": "Räkättirastas"
          },
          "birdFeederCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Lintulautoja (kpl)"
          },
          "birdFeederCountBiotopeA": {
            "type": "integer",
            "minimum": 0,
            "title": "Kaatopaikan lintulaudat"
          },
          "birdFeederCountBiotopeB": {
            "type": "integer",
            "minimum": 0,
            "title": "Kaupunkiasutuksen lintulaudat"
          },
          "birdFeederCountBiotopeC": {
            "type": "integer",
            "minimum": 0,
            "title": "Maaseutuasutuksen lintulaudat"
          },
          "birdFeederCountBiotopeD": {
            "type": "integer",
            "minimum": 0,
            "title": "Pellon lintulaudat"
          },
          "birdFeederCountBiotopeE": {
            "type": "integer",
            "minimum": 0,
            "title": "Metsän lintulaudat"
          },
          "birdFeederCountBiotopeF": {
            "type": "integer",
            "minimum": 0,
            "title": "Lintulaudat muu biotooppi"
          },
          "birdFeederCountBiotopeG": {
            "type": "integer",
            "minimum": 0,
            "title": "Hakkuuaukean lintulaudat"
          },
          "birdFeederCountBiotopeH": {
            "type": "integer",
            "minimum": 0,
            "title": "Ruovikon lintulaudat"
          },
          "cloudAndRain": {
            "type": "string",
            "enum": [
              "",
              "WBC.cloudAndRainEnum0",
              "WBC.cloudAndRainEnum1",
              "WBC.cloudAndRainEnum2",
              "WBC.cloudAndRainEnum3",
              "WBC.cloudAndRainEnum4"
            ],
            "title": "Pilvisyys ja sade"
          },
          "descriptionBiotopeF": {
            "type": "string",
            "title": "Mitä biotooppiin Muu (F) kuuluu"
          },
          "feedingStationCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Ruokintapaikkoja (kpl)"
          },
          "feedingStationCountBiotopeA": {
            "type": "integer",
            "minimum": 0,
            "title": "feedingStationCountBiotopeA"
          },
          "feedingStationCountBiotopeB": {
            "type": "integer",
            "minimum": 0,
            "title": "Kaupunkiasutuksen ruokintapaikat"
          },
          "feedingStationCountBiotopeC": {
            "type": "integer",
            "minimum": 0,
            "title": "Maaseutuasutuksen ruokintapaikat"
          },
          "feedingStationCountBiotopeD": {
            "type": "integer",
            "minimum": 0,
            "title": "Pellon ruokintapaikat"
          },
          "feedingStationCountBiotopeE": {
            "type": "integer",
            "minimum": 0,
            "title": "Metsän ruokintapaikat"
          },
          "feedingStationCountBiotopeF": {
            "type": "integer",
            "minimum": 0,
            "title": "Ruokintapaikat muu biotooppi"
          },
          "feedingStationCountBiotopeG": {
            "type": "integer",
            "minimum": 0,
            "title": "Ruovikon ruokintapaikat"
          },
          "feedingStationCountBiotopeH": {
            "type": "integer",
            "minimum": 0,
            "title": "Ruovikon ruokintapaikat"
          },
          "iceCover": {
            "type": "string",
            "enum": [
              "",
              "WBC.iceCoverEnum0",
              "WBC.iceCoverEnum1",
              "WBC.iceCoverEnum2",
              "WBC.iceCoverEnum3",
              "WBC.iceCoverEnum4"
            ],
            "title": "Jääpeite"
          },
          "meanTemperature": {
            "type": "integer",
            "title": "Keskilämpötila (asteen tarkkuus)"
          },
          "observerCount": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Laskijoiden lukumäärä",
            "minimum": 0
          },
          "observerID": {
            "type": "integer",
            "minimum": 0,
            "title": "Havainnoijanumero"
          },
          "pineConesAtCensus": {
            "type": "string",
            "enum": [
              "",
              "WBC.berriesAndConesEnum0",
              "WBC.berriesAndConesEnum1",
              "WBC.berriesAndConesEnum2",
              "WBC.berriesAndConesEnum3",
              "WBC.berriesAndConesEnum4",
              "WBC.berriesAndConesEnum5",
              "WBC.berriesAndConesEnum6"
            ],
            "title": "Männynkäpyjä laskenta-aikaan"
          },
          "routeID": {
            "type": "integer",
            "minimum": 0,
            "title": "Reitin numero"
          },
          "routeLength": {
            "type": "integer",
            "minimum": 0,
            "title": "Reitin pituus (m)"
          },
          "routeLengthBiotopeA": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length dump"
          },
          "routeLengthBiotopeB": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length urban"
          },
          "routeLengthBiotopeC": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length countryside"
          },
          "routeLengthBiotopeD": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length field"
          },
          "routeLengthBiotopeE": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length forest"
          },
          "routeLengthBiotopeF": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length other biotope"
          },
          "routeLengthBiotopeG": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length cutting open"
          },
          "routeLengthBiotopeH": {
            "type": "integer",
            "minimum": 0,
            "title": "Route length reed"
          },
          "routeLengthChange": {
            "type": "integer",
            "title": "Reitin muutokset (m)"
          },
          "routeLengthChangeBiotopeA": {
            "type": "integer",
            "title": "Reitin muutokset kaatopaikka"
          },
          "routeLengthChangeBiotopeB": {
            "type": "integer",
            "title": "Reitin muutokset kaupunkiasutus"
          },
          "routeLengthChangeBiotopeC": {
            "type": "integer",
            "title": "Reitin muutokset maaseutuasutus"
          },
          "routeLengthChangeBiotopeD": {
            "type": "integer",
            "title": "Reitin muutokset pelto"
          },
          "routeLengthChangeBiotopeE": {
            "type": "integer",
            "title": "Reitin muutokset metsä"
          },
          "routeLengthChangeBiotopeF": {
            "type": "integer",
            "title": "Reitin muutokset muu biotooppi"
          },
          "routeLengthChangeBiotopeG": {
            "type": "integer",
            "title": "Reitin muutokset hakkuuaukea"
          },
          "routeLengthChangeBiotopeH": {
            "type": "integer",
            "title": "Reitin muutokset ruovikko"
          },
          "snowAndIceOnTrees": {
            "type": "string",
            "enum": [
              "",
              "WBC.snowAndIceOnTreesEnum0",
              "WBC.snowAndIceOnTreesEnum1",
              "WBC.snowAndIceOnTreesEnum2",
              "WBC.snowAndIceOnTreesEnum3"
            ],
            "title": "Puissa oleva lumi ja jääkarsta"
          },
          "snowCover": {
            "type": "string",
            "enum": [
              "",
              "WBC.snowCoverEnum0",
              "WBC.snowCoverEnum1",
              "WBC.snowCoverEnum2",
              "WBC.snowCoverEnum3",
              "WBC.snowCoverEnum4",
              "WBC.snowCoverEnum5",
              "WBC.snowCoverEnum6",
              "WBC.snowCoverEnum7",
              "WBC.snowCoverEnum8"
            ],
            "title": "Lumipeite"
          },
          "sorbusBerriesAtCensus": {
            "type": "string",
            "enum": [
              "",
              "WBC.berriesAndConesEnum0",
              "WBC.berriesAndConesEnum1",
              "WBC.berriesAndConesEnum2",
              "WBC.berriesAndConesEnum3",
              "WBC.berriesAndConesEnum4",
              "WBC.berriesAndConesEnum5",
              "WBC.berriesAndConesEnum6"
            ],
            "title": "Pihlajanmarjoja laskenta-aikaan"
          },
          "sorbusBerriesEarlyFall": {
            "type": "string",
            "enum": [
              "",
              "WBC.berriesAndConesEnum0",
              "WBC.berriesAndConesEnum1",
              "WBC.berriesAndConesEnum2",
              "WBC.berriesAndConesEnum3",
              "WBC.berriesAndConesEnum4",
              "WBC.berriesAndConesEnum5",
              "WBC.berriesAndConesEnum6"
            ],
            "title": "Pihlajanmarjoja alkusyksyllä"
          },
          "spruceConesAtCensus": {
            "type": "string",
            "enum": [
              "",
              "WBC.berriesAndConesEnum0",
              "WBC.berriesAndConesEnum1",
              "WBC.berriesAndConesEnum2",
              "WBC.berriesAndConesEnum3",
              "WBC.berriesAndConesEnum4",
              "WBC.berriesAndConesEnum5",
              "WBC.berriesAndConesEnum6"
            ],
            "title": "Kuusenkäpyjä laskenta-aikaan"
          },
          "typeOfSnowCover": {
            "type": "string",
            "enum": [
              "",
              "WBC.typeOfSnowCoverEnum0",
              "WBC.typeOfSnowCoverEnum1",
              "WBC.typeOfSnowCoverEnum2"
            ],
            "title": "Maassa olevan lumen laatu"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "",
              "WBC.visibilityEnum0",
              "WBC.visibilityEnum1",
              "WBC.visibilityEnum2",
              "WBC.visibilityEnum3",
              "WBC.visibilityEnum4"
            ],
            "title": "Näkyvyys"
          },
          "waterbodies": {
            "type": "string",
            "enum": [
              "",
              "WBC.waterbodiesEnum0",
              "WBC.waterbodiesEnum1",
              "WBC.waterbodiesEnum2",
              "WBC.waterbodiesEnum3",
              "WBC.waterbodiesEnum4",
              "WBC.waterbodiesEnum5"
            ],
            "title": "Vesistöt"
          },
          "wayOfTravel": {
            "type": "string",
            "enum": [
              "",
              "WBC.wayOfTravelEnum0",
              "WBC.wayOfTravelEnum1",
              "WBC.wayOfTravelEnum2",
              "WBC.wayOfTravelEnum3",
              "WBC.wayOfTravelEnum9"
            ],
            "title": "Kulkutapa"
          },
          "wayOfTravelNotes": {
            "type": "string",
            "title": "Kulkutavan kuvaus"
          },
          "wind": {
            "type": "string",
            "enum": [
              "",
              "WBC.windEnum0",
              "WBC.windEnum1",
              "WBC.windEnum2",
              "WBC.windEnum3",
              "WBC.windEnum4"
            ],
            "title": "Tuuli"
          }
        }
      },
      "habitat": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the IUCN Red List Evaluation Habitat"
          },
          "id": {
            "type": "string",
            "title": "Id for the IUCN Red List Evaluation Habitat"
          },
          "@type": {
            "type": "string",
            "title": "Type for the IUCN Red List Evaluation Habitat"
          },
          "herbo:sortOrder": {
            "type": "integer",
            "title": "herbo:sortOrder"
          },
          "habitat": {
            "type": "string",
            "enum": [
              "MKV.habitatM",
              "MKV.habitatMk",
              "MKV.habitatMkk",
              "MKV.habitatMkt",
              "MKV.habitatMl",
              "MKV.habitatMlt",
              "MKV.habitatMlk",
              "MKV.habitatMt",
              "MKV.habitatMtl",
              "MKV.habitatS",
              "MKV.habitatSl",
              "MKV.habitatSla",
              "MKV.habitatSlr",
              "MKV.habitatSlk",
              "MKV.habitatSn",
              "MKV.habitatSnk",
              "MKV.habitatSnr",
              "MKV.habitatSr",
              "MKV.habitatSrk",
              "MKV.habitatSrr",
              "MKV.habitatSk",
              "MKV.habitatSkk",
              "MKV.habitatSkr",
              "MKV.habitatV",
              "MKV.habitatVi",
              "MKV.habitatVik",
              "MKV.habitatVim",
              "MKV.habitatVis",
              "MKV.habitatVih",
              "MKV.habitatVie",
              "MKV.habitatVip",
              "MKV.habitatVs",
              "MKV.habitatVsk",
              "MKV.habitatVsr",
              "MKV.habitatVa",
              "MKV.habitatVj",
              "MKV.habitatVp",
              "MKV.habitatVk",
              "MKV.habitatVl",
              "MKV.habitatR",
              "MKV.habitatRi",
              "MKV.habitatRim",
              "MKV.habitatRimt",
              "MKV.habitatRiml",
              "MKV.habitatRip",
              "MKV.habitatRin",
              "MKV.habitatRil",
              "MKV.habitatRir",
              "MKV.habitatRis",
              "MKV.habitatRih",
              "MKV.habitatRit",
              "MKV.habitatRj",
              "MKV.habitatRjm",
              "MKV.habitatRjmt",
              "MKV.habitatRjml",
              "MKV.habitatRjp",
              "MKV.habitatRjn",
              "MKV.habitatRjl",
              "MKV.habitatRjr",
              "MKV.habitatRjs",
              "MKV.habitatRjh",
              "MKV.habitatRjt",
              "MKV.habitatK",
              "MKV.habitatKk",
              "MKV.habitatKs",
              "MKV.habitatKr",
              "MKV.habitatKl",
              "MKV.habitatKm",
              "MKV.habitatT",
              "MKV.habitatTk",
              "MKV.habitatTn",
              "MKV.habitatTu",
              "MKV.habitatTp",
              "MKV.habitatTl",
              "MKV.habitatTll",
              "MKV.habitatTlk",
              "MKV.habitatTls",
              "MKV.habitatTlr",
              "MKV.habitatTlä",
              "MKV.habitatTs",
              "MKV.habitatTj",
              "MKV.habitatTv",
              "MKV.habitatTa",
              "MKV.habitatI",
              "MKV.habitatIn",
              "MKV.habitatIt",
              "MKV.habitatIh",
              "MKV.habitatIk",
              "MKV.habitatIo",
              "MKV.habitatIv",
              "MKV.habitatIp",
              "MKV.habitatIu",
              "MKV.habitatIr",
              "MKV.habitatU"
            ],
            "title": "Elinympäristö"
          },
          "habitatSpecificType": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MKV.habitatSpecificTypeV",
                "MKV.habitatSpecificTypeH",
                "MKV.habitatSpecificTypeP",
                "MKV.habitatSpecificTypeJ",
                "MKV.habitatSpecificTypePAK",
                "MKV.habitatSpecificTypeVAK",
                "MKV.habitatSpecificTypeRA",
                "MKV.habitatSpecificTypeKA",
                "MKV.habitatSpecificTypeKE",
                "MKV.habitatSpecificTypeCA"
              ]
            },
            "minItems": 0,
            "title": "Tarkenne"
          },
          "sortOrder": {
            "type": "integer",
            "title": "sortOrder"
          }
        },
        "required": [
          "habitat"
        ]
      },
      "identification": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Identification"
          },
          "id": {
            "type": "string",
            "title": "Id for the Identification"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Identification"
          },
          "herbo:sortOrder": {
            "type": "integer",
            "title": "herbo:sortOrder"
          },
          "associatedObservationTaxa": {
            "type": "string",
            "description": "Write associated observation taxa names here, separated by a semicolon (;). E.g.: \"Betula pendula; Betula pubescens; Poaceae\". These will form their own units of the type observation.",
            "title": "Associated observation taxa"
          },
          "author": {
            "type": "string",
            "description": "Author for the taxon",
            "title": "Taxon author"
          },
          "det": {
            "type": "string",
            "description": "Name of the identifier (person) preferably in format \"lastname, firstname\"",
            "title": "Det."
          },
          "detDate": {
            "type": "string",
            "description": "Date or year when the identification was done, preferably in format \"d.m.Y\" or \"Y\"",
            "title": "Det. date"
          },
          "detMethod": {
            "type": "string",
            "enum": [
              "",
              "MY.detMethodFreshSample",
              "MY.detMethodMicroscopy",
              "MY.detMethodPhoto"
            ],
            "title": "Det method"
          },
          "detVerbatim": {
            "type": "string",
            "description": "Name of the identifier and date of identification in original format (e.g. from the label), errors and all",
            "title": "Det verbatim from the label or other original source"
          },
          "genusQualifier": {
            "type": "string",
            "description": "Additional qualifier or specifier at genus level (e.g. aff., cf.)",
            "title": "Genus qualifier"
          },
          "identificationBasis": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.identificationBasisDNA",
                "MY.identificationBasisGenitals",
                "MY.identificationBasisGenitalPreparate",
                "MY.identificationBasisSpores",
                "MY.identificationBasisHandled",
                "MY.identificationBasisChemical",
                "MY.identificationBasisHeard",
                "MY.identificationBasisMicroscope",
                "MY.identificationBasisSeen",
                "MY.identificationBasisPreservedSpecimen",
                "MY.identificationBasisFreshSpecimen",
                "MY.identificationBasisMedia"
              ]
            },
            "minItems": 0,
            "title": "Identification basis"
          },
          "identificationNotes": {
            "type": "string",
            "description": "Additional information on the identification, basis or such",
            "title": "Identification notes"
          },
          "infraAuthor": {
            "type": "string",
            "description": "Author for the taxon below species level/infra epithet",
            "title": "Infra author"
          },
          "infraEpithet": {
            "type": "string",
            "description": "Taxon name for the epithet below species level",
            "title": "Infra name"
          },
          "infraRank": {
            "type": "string",
            "enum": [
              "",
              "MY.infraRankSsp",
              "MY.infraRankVar",
              "MY.infraRankBeta",
              "MY.infraRankB",
              "MY.infraRankForma",
              "MY.infraRankHybrid",
              "MY.infraRankAnamorph",
              "MY.infraRankAggregate",
              "MY.infraRankAberration",
              "MY.infraRankCultivar",
              "MY.infraRankMorpha",
              "MY.infraRankUnknown",
              "MY.infraRankNothosubspecies",
              "MY.infraRankCultivarGroup",
              "MY.infraRankFsp"
            ],
            "description": "Taxonomic level of the epithet below species level",
            "title": "Infra rank"
          },
          "infrasubspecificSubdivision": {
            "type": "string",
            "description": "Pathovars, serovars and other infrasubspecific subdivisions of microbes.",
            "title": "Infrasubspecific subdivision"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          },
          "isTaxonGroup": {
            "type": "boolean",
            "title": "Is taxon group"
          },
          "preferredIdentification": {
            "type": "string",
            "description": "This can be used to select one of the identifications as 'recommended', which is the used as default when displaying information about the specimen.",
            "title": "Preferred identification"
          },
          "sec": {
            "type": "string",
            "description": "Publication reference for the taxon concept, that was used in identification",
            "title": "Taxon concept (sec)"
          },
          "speciesQualifier": {
            "type": "string",
            "description": "Additional qualifier at species level (e.g. aff., cf., sp. n., coll.)",
            "title": "Species qualifier"
          },
          "taxon": {
            "type": "string",
            "description": "Taxon name",
            "title": "Species"
          },
          "taxonID": {
            "type": "string",
            "description": "ID for the taxon if has some other than an MX code",
            "title": "Taxon alternative ID"
          },
          "taxonRank": {
            "type": "string",
            "enum": [
              "",
              "MX.superdomain",
              "MX.domain",
              "MX.kingdom",
              "MX.subkingdom",
              "MX.infrakingdom",
              "MX.superphylum",
              "MX.phylum",
              "MX.subphylum",
              "MX.infraphylum",
              "MX.superdivision",
              "MX.division",
              "MX.subdivision",
              "MX.infradivision",
              "MX.superclass",
              "MX.class",
              "MX.subclass",
              "MX.infraclass",
              "MX.parvclass",
              "MX.superorder",
              "MX.order",
              "MX.suborder",
              "MX.infraorder",
              "MX.parvorder",
              "MX.superfamily",
              "MX.family",
              "MX.subfamily",
              "MX.tribe",
              "MX.subtribe",
              "MX.supergenus",
              "MX.genus",
              "MX.nothogenus",
              "MX.subgenus",
              "MX.section",
              "MX.subsection",
              "MX.series",
              "MX.subseries",
              "MX.infragenericTaxon",
              "MX.aggregate",
              "MX.speciesAggregate",
              "MX.species",
              "MX.nothospecies",
              "MX.infraspecificTaxon",
              "MX.subspecificAggregate",
              "MX.subspecies",
              "MX.nothosubspecies",
              "MX.variety",
              "MX.subvariety",
              "MX.form",
              "MX.subform",
              "MX.hybrid",
              "MX.anamorph",
              "MX.ecotype",
              "MX.populationGroup",
              "MX.intergenericHybrid",
              "MX.infragenericHybrid",
              "MX.cultivar",
              "MX.group",
              "MX.grex"
            ],
            "description": "Taxonomic level for the identification",
            "title": "Taxon rank"
          },
          "taxonSpecifier": {
            "type": "string",
            "title": "Taxon specifier"
          },
          "taxonURI": {
            "type": "string",
            "title": "Taxon URI"
          },
          "taxonVerbatim": {
            "type": "string",
            "description": "Taxon name in original format (e.g. from the label), errors and all",
            "title": "Taxon verbatim"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          },
          "sortOrder": {
            "type": "integer",
            "title": "sortOrder"
          }
        }
      },
      "image": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Image"
          },
          "id": {
            "type": "string",
            "title": "Id for the Image"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Image"
          },
          "LuomusIntellectualRights": {
            "type": "string",
            "enum": [
              "",
              "MM.LuomusRightsFreeToUse",
              "MM.LuomusRightsInternalOnly"
            ],
            "title": "Intellectual rights given to LUOMUS"
          },
          "caption": {
            "type": "string",
            "title": "Caption"
          },
          "captureDateTime": {
            "type": "string",
            "title": "Date taken"
          },
          "capturerVerbatim": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Photographer/recorder (Forename Surname)"
          },
          "documentURI": {
            "type": "string",
            "title": "documentURI"
          },
          "fullURL": {
            "type": "string",
            "title": "URL of full size version of the image (converted to JPG)"
          },
          "keyword": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Keywords"
          },
          "largeURL": {
            "type": "string",
            "title": "URL of a large version of the image (reduced to max 1280px height or width)"
          },
          "originalFilename": {
            "type": "string",
            "title": "Original filename"
          },
          "originalURL": {
            "type": "string",
            "title": "URL of the original multimedia object (original format)"
          },
          "sourceSystem": {
            "type": "string",
            "title": "Source information system of the multimedia object"
          },
          "squareThumbnailURL": {
            "type": "string",
            "title": "URL of a square thumbnail (max 400px)"
          },
          "taxonDescriptionCaption": {
            "$ref": "#/components/schemas/multiLang"
          },
          "taxonURI": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Taxon ID"
          },
          "taxonVerbatim": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Verbatim taxon name"
          },
          "thumbnailURL": {
            "type": "string",
            "title": "URL of a thumbnail version of the image (maintains aspect ratio, max. 200px height or width)"
          },
          "uploadedBy": {
            "type": "string",
            "title": "Uploaded by"
          },
          "wgs84Lat": {
            "type": "string",
            "title": "Latitude (N) coordinates in WGS84 format"
          },
          "wgs84Lon": {
            "type": "string",
            "title": "Longitude (E) coordinates in WGS84 format"
          },
          "intellectualOwner": {
            "type": "string",
            "title": "Tillverkare"
          },
          "intellectualRights": {
            "type": "string",
            "enum": [
              "MZ.intellectualRightsCC-BY-SA-4.0",
              "MZ.intellectualRightsCC-BY-NC-4.0",
              "MZ.intellectualRightsCC-BY-NC-SA-4.0",
              "MZ.intellectualRightsCC-BY-4.0",
              "MZ.intellectualRightsCC0-4.0",
              "MZ.intellectualRightsODBL-1.0",
              "MZ.intellectualRightsPD",
              "MZ.intellectualRightsARR",
              "MZ.intellectualRightsCC-BY-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.0-DE",
              "MZ.intellectualRightsCC-BY-NC-2.0",
              "MZ.intellectualRightsCC-BY-NC-SA-2.0",
              "MZ.intellectualRightsCC-BY-NC-ND-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.5",
              "MZ.intellectualRightsCC-BY-SA-2.5-SE",
              "MZ.intellectualRightsCC-BY-3.0",
              "MZ.intellectualRightsCC-BY-SA-3.0",
              "MZ.intellectualRightsCC-BY-NC-SA-3.0",
              "MZ.intellectualRightsCC-BY-ND-4.0",
              "MZ.intellectualRightsCC-BY-NC-ND-4.0"
            ],
            "title": "License"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          }
        },
        "required": [
          "fullURL",
          "largeURL",
          "originalFilename",
          "originalURL",
          "sourceSystem",
          "squareThumbnailURL",
          "thumbnailURL",
          "uploadedBy",
          "intellectualOwner",
          "intellectualRights"
        ]
      },
      "individual": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MXA.individual"
          },
          "id": {
            "type": "string",
            "title": "Id for the MXA.individual"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MXA.individual"
          },
          "dc:bibliographicCitation": {
            "$ref": "#/components/schemas/multiLang"
          },
          "description": {
            "$ref": "#/components/schemas/multiLang"
          },
          "descriptionURL": {
            "$ref": "#/components/schemas/multiLang"
          },
          "hasPublicLocations": {
            "type": "boolean",
            "title": "Does this have public locations"
          },
          "nickname": {
            "type": "string",
            "title": "Nickname for the individual"
          },
          "ringID": {
            "type": "string",
            "title": "Ring ID"
          },
          "taxon": {
            "type": "string",
            "title": "Name or MX code"
          },
          "deleted": {
            "type": "boolean",
            "title": "Soft delete"
          },
          "intellectualRights": {
            "type": "string",
            "enum": [
              "MZ.intellectualRightsCC-BY-SA-4.0",
              "MZ.intellectualRightsCC-BY-NC-4.0",
              "MZ.intellectualRightsCC-BY-NC-SA-4.0",
              "MZ.intellectualRightsCC-BY-4.0",
              "MZ.intellectualRightsCC0-4.0",
              "MZ.intellectualRightsODBL-1.0",
              "MZ.intellectualRightsPD",
              "MZ.intellectualRightsARR",
              "MZ.intellectualRightsCC-BY-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.0-DE",
              "MZ.intellectualRightsCC-BY-NC-2.0",
              "MZ.intellectualRightsCC-BY-NC-SA-2.0",
              "MZ.intellectualRightsCC-BY-NC-ND-2.0",
              "MZ.intellectualRightsCC-BY-SA-2.5",
              "MZ.intellectualRightsCC-BY-SA-2.5-SE",
              "MZ.intellectualRightsCC-BY-3.0",
              "MZ.intellectualRightsCC-BY-SA-3.0",
              "MZ.intellectualRightsCC-BY-NC-SA-3.0",
              "MZ.intellectualRightsCC-BY-ND-4.0",
              "MZ.intellectualRightsCC-BY-NC-ND-4.0"
            ],
            "title": "License"
          },
          "ownerPerson": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Has permissions to modify"
          }
        },
        "required": [
          "intellectualRights"
        ]
      },
      "informalTaxonGroup": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Informal Taxon Group"
          },
          "id": {
            "type": "string",
            "title": "Id for the Informal Taxon Group"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Informal Taxon Group"
          },
          "explicitlyDefinedRoot": {
            "type": "boolean",
            "description": "If this is true, the group is considered a root even if it has parents. For example Fishes is part of Water animals but still is wanted to be a root by itself.",
            "title": "Explicitly defined root"
          },
          "hasSubGroup": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Has subgroup"
          },
          "name": {
            "$ref": "#/components/schemas/multiLang"
          }
        },
        "required": [
          "name"
        ]
      },
      "informationSystem": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Information System"
          },
          "id": {
            "type": "string",
            "title": "Id for the Information System"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Information System"
          },
          "URI": {
            "type": "string",
            "title": "Address (URL)"
          },
          "allowedDatawarehouseOverridingSourceId": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "allowedDatawarehouseOverridingSourceId"
          },
          "description": {
            "$ref": "#/components/schemas/multiLang"
          },
          "documentation": {
            "type": "string",
            "title": "Documentation"
          },
          "isAllowedToQueryPrivateWarehouse": {
            "type": "boolean",
            "title": "Is this system allowed to query PRIVATE FinBiF warehouse?"
          },
          "isWarehouseSource": {
            "type": "boolean",
            "title": "Is a warehouse source"
          },
          "lajiAuthLoginRedirectURI": {
            "type": "string",
            "title": "Laji-Auth login URI"
          },
          "maintainingOrganization": {
            "type": "string",
            "title": "Organization that maintains the software"
          },
          "name": {
            "$ref": "#/components/schemas/multiLang"
          },
          "personResponsible": {
            "type": "string",
            "title": "Person responsible"
          },
          "publicity": {
            "type": "string",
            "enum": [
              "KE.inUseByLuomus",
              "KE.inPublicUse",
              "KE.adminOnly",
              "KE.thirdParty"
            ],
            "title": "Publicity"
          },
          "state": {
            "type": "string",
            "enum": [
              "KE.productionState",
              "KE.developmentState",
              "KE.abandonedState"
            ],
            "title": "State"
          },
          "transactionApiURL": {
            "type": "string",
            "title": "Laji-ETL PULL/Balticdiversity transaction API Base URL"
          },
          "type": {
            "type": "string",
            "enum": [
              "KE.webApplication",
              "KE.webService",
              "KE.softwareComponent",
              "KE.program",
              "KE.database",
              "KE.hardware",
              "KE.server",
              "KE.mobileApp"
            ],
            "title": "Type"
          }
        },
        "required": [
          "URI",
          "description",
          "documentation",
          "maintainingOrganization",
          "name",
          "personResponsible",
          "publicity",
          "state",
          "transactionApiURL",
          "type"
        ]
      },
      "iucnRedListEvaluation": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the IUCN Red List Evaluation"
          },
          "id": {
            "type": "string",
            "title": "Id for the IUCN Red List Evaluation"
          },
          "@type": {
            "type": "string",
            "title": "Type for the IUCN Red List Evaluation"
          },
          "actionNotes": {
            "type": "string",
            "title": "Management need"
          },
          "borderGain": {
            "type": "boolean",
            "title": "Reinforcements across the border"
          },
          "borderGainNotes": {
            "type": "string",
            "title": "Private notes about the reinforcements across the border"
          },
          "countOfOccurrencesMax": {
            "type": "string",
            "title": "Number of occurrences, max."
          },
          "countOfOccurrencesMin": {
            "type": "string",
            "title": "Number of occurrences, min."
          },
          "countOfOccurrencesNotes": {
            "type": "string",
            "title": "Private notes about the number of ccurrences"
          },
          "criteriaA": {
            "type": "string",
            "description": "<p> <b>A1</b>\tHavaittu, arvioitu, päätelty tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 90 %:lla, erittäin uhanalaisilla vähintään 70 %:lla ja vaarantuneilla vähintään 50 %:lla viimeisten kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso) tilanteessa, jossa pienenemisen syyt ovat selvästi peruttavissa JA tunnettuja JA loppuneita, perustuen johonkin seuraavista vaihtoehdoista: </p> <ul><li><b>(a)</b> suora havainto</li> <li><b>(b)</b> taksonille käyttökelpoinen runsausindeksi</li> <li><b>(c)</b> esiintymisalueen tai levinneisyysalueen pieneneminen ja/tai elinympäristön laadun huonontuminen</li> <li><b>(d)</b> todellinen tai mahdollinen hyödyntäminen</li> <li><b>(e)</b> vieraiden taksonien, risteytymisen, tautien, saasteiden, kilpailijoiden tai loisten haitalliset vaikutukset.</li></ul> <p> <b>A2</b>\tHavaittu, arvioitu, päätelty tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 80 %:lla, erittäin uhanalaisilla vähintään 50 %:lla ja vaarantuneilla vähintään 30 %:lla viimeisten kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso) tilanteessa, jossa pieneneminen ja sen syyt eivät ehkä ole loppuneet TAI niitä ei tunneta TAI ne eivät ehkä ole peruttavissa, perustuen yllä oleviin vaihtoehtoihin <b>(a)–(e)</b>. </p> <p> <b>A3</b>\tÄärimmäisen uhanalaisilla vähintään 80 %, erittäin uhanalaisilla vähintään 50 % ja vaarantuneilla vähintään 30 % populaation pieneneminen, jonka ennustetaan tai epäillään tapahtuvan tulevien kymmenen vuoden tai kolmen sukupolven aikana (valitaan pitempi jakso, korkeintaan 100 vuotta), perustuen yllä oleviin vaihtoehtoihin <b>(b)–(e)</b>. </p> <p> <b>A4</b>\tHavaittu, arvioitu, päätelty, ennustettu tai epäilty populaation pieneneminen äärimmäisen uhanalaisilla vähintään 80 %:lla, erittäin uhanalaisilla vähintään 50 %:lla ja vaarantuneilla vähintään 30 %:lla kymmenen vuoden tai kolmen sukupolven ajanjaksolla (valitaan pitempi; tulevaisuuteen maksimi 100 vuotta), johon sisältyy sekä mennyttä että tulevaa, ja pieneneminen ja sen syyt eivät ole loppuneet TAI niitä ei tunneta TAI ne eivät ehkä ole peruttavissa, perustuen yllä oleviin vaihtoehtoihin <b>(a)–(e)</b>. </p>",
            "title": "Criterion A. Reduction of the population"
          },
          "criteriaANotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteeristä A"
          },
          "criteriaB": {
            "type": "string",
            "description": "<p> Maantieteellinen alue tarkasteltuna joko\nlevinneisyysalueen (B1) tai esiintymisalueen (B2) tai\nmolempien mukaan.</p>\n\n<p>\n<b>B1</b>\tLevinneisyysalueen arvioidaan olevan äärimmäisen\nuhanalaisilla alle 100 km², erittäin uhanalaisilla alle 5 000\nkm², vaarantuneilla alle 20 000 km² ja vähintään kaksi kohdista\na–c täyttyy:\n</p>\n<p>\n<b>B1a.</b> esiintyminen on voimakkaasti pirstoutunut TAI äärimmäisen \nuhanalaisilla vain yksi tai erittäin uhanalaisilla enintään viisi tai \nvaarantuneilla enintään kymmenen esiintymispaikkaa tunnetaan\n</p>\n<p>\n<b>B1b.</b> havaittu, päätelty tai ennustettu jatkuva väheneminen\njoissakin seuraavista:\n</p>\n<ul><li><b>(i)</b> levinneisyysalue</li>\n<li><b>(ii)</b> esiintymisalue</li>\n<li><b>(iii)</b> soveliaan elinympäristön määrä ja/tai\nlaatu</li>\n<li><b>(iv)</b> esiintymien tai osapopulaatioiden määrä</li>\n<li><b>(v)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>\n\n<p>\n<b>B1c.</b> erittäin suuret vaihtelut joissakin seuraavista:\n</p>\n<ul><li><b>(i)</b> levinneisyysalue</li>\n<li><b>(ii)</b> esiintymisalue</li>\n<li><b>(iii)</b> esiintymien tai osapopulaatioiden määrä</li>\n<li><b>(iv)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>\n\n\n<p>\n<b>B2</b>\tEsiintymisalueen arvioidaan olevan äärimmäisen\nuhanalaisilla alle 10 km², erittäin uhanalaisilla alle 500 km²,\nvaarantuneilla alle 2 000 km² ja vähintään kaksi kohdista\na–c täyttyy:\n</p>\n<p>\n<b>B2a.</b> esiintyminen on voimakkaasti pirstoutunut TAI äärimmäisen \nuhanalaisilla vain yksi tai erittäin uhanalaisilla enintään viisi tai \nvaarantuneilla enintään kymmenen esiintymispaikkaa tunnetaan\n</p>\n<p>\n<b>B2b.</b> havaittu, päätelty tai ennustettu jatkuva väheneminen\njoissakin seuraavista:\n</p>\n<ul><li><b>(i)</b> levinneisyysalue</li>\n<li><b>(ii)</b> esiintymisalue</li>\n<li><b>(iii)</b> soveliaan elinympäristön määrä ja/tai laatu</li>\n<li><b>(iv)</b> esiintymien tai osapopulaatioiden määrä</li>\n<li><b>(v)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>\n\n<p>\n<b>B2c.</b> erittäin suuret vaihtelut joissakin seuraavista:\n</p>\n<ul><li><b>(i)</b> levinneisyysalue</li>\n<li><b>(ii)</b> esiintymisalue</li>\n<li><b>(iii)</b> esiintymien tai osapopulaatioiden määrä</li>\n<li><b>(iv)</b> lisääntymiskykyisten yksilöiden määrä</li></ul>",
            "title": "Criterion B. Geographical area"
          },
          "criteriaBNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteeristä B"
          },
          "criteriaC": {
            "type": "string",
            "description": "<p>Pieni ja jatkuvasti taantuva populaatio\tPopulaatio on arvioitu pienemmäksi kuin äärimmäisen\nuhanalaisilla 250, erittäin uhanalaisilla 2 500 ja vaarantuneilla\n10 000 lisääntymiskykyistä yksilöä sekä jompikumpi\nseuraavista:</p>\n\n<p>\n<b>C1</b>\tÄärimmäisen uhanalaisilla vähintään 25 %:n jatkuva\nväheneminen kolmen vuoden tai yhden sukupolven aikana\n(valitaan pitempi jakso, tulevaisuuteen korkeintaan\n100 vuotta), erittäin uhanalaisilla vähintään 20 %:n jatkuva\nväheneminen viiden vuoden tai kahden sukupolven aikana\n(valitaan pitempi jakso, tulevaisuuteen korkeintaan\n100 vuotta) ja vaarantuneilla vähintään 10 %:n jatkuva\nväheneminen kymmenen vuoden tai kolmen sukupolven\naikana (valitaan pitempi jakso, tulevaisuuteen korkeintaan\n100 vuotta)\n</p>\n\n<p>\n<b>C2</b>\tHavaittu, ennustettu tai päätelty lisääntymiskykyisten\nyksilöiden määrän jatkuva väheneminen JA vähintään\ntoinen seuraavista (a–b):\n</p>\n<p>\n<b>C2a.</b> populaation rakenne joko:\n</p>\n<ul><li>\n<b>(i)</b> missään osapopulaatiossa ei ole äärimmäisen\nuhanalaisilla yli 50, erittäin uhanalaisilla yli\n250 ja vaarantuneilla yli 1 000 lisääntymiskykyistä\nyksilöä</li>\n<li>\n<b>(ii)</b> äärimmäisen uhanalaisilla vähintään 90 % ja\nerittäin uhanalaisilla vähintään 95 % lisääntymiskykyisistä\nyksilöistä sekä vaarantuneilla\nkaikki yksilöt ovat yhdessä osapopulaatiossab. erittäin suuret vaihtelut lisääntymiskykyisten\nyksilöiden määrässä\n</li></ul>\n\n<p>\n<b>C2b.</b> erittäin suuret vaihtelut lisääntymiskykyisten\nyksilöiden määrässä\n</p>",
            "title": "Criterion C. Small and constantly decreasing population"
          },
          "criteriaCNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteeristä C"
          },
          "criteriaD": {
            "type": "string",
            "description": "<p>Populaation arvioitu koko on äärimmäisen uhanalaisilla\nalle 50 ja erittäin uhanalaisilla alle 250 lisääntymiskykyistä\nyksilöä. Vaarantuneilla populaatio on hyvin pieni tai\nrajoittunut jommankumman vaihtoehdon mukaan:</p>\n<p>\n<b>D1</b>\tArvioitu populaatiokoko on alle 1 000 lisääntymiskykyistä\nyksilöä.\n</p>\n\n<p>\n<b>D2</b>\tPopulaatiolla on hyvin rajoittunut esiintymisalue\n(yleensä alle 20 km²) tai vähän esiintymispaikkoja (yleensä\nkorkeintaan viisi), ja populaatio on siten altis äkillisille\nja ennustamattomille ihmistoiminnan tai sattuman vaikutuksille\nja voi lyhyessä ajassa muuttua äärimmäisen\nuhanalaiseksi tai jopa hävitä.\n</p>",
            "title": "Criterion D. Very small and restricted population"
          },
          "criteriaDNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteeristä D"
          },
          "criteriaE": {
            "type": "string",
            "description": "<p>Kvantitatiivisen analyysin perusteella todennäköisyys\nhävitä luonnosta on äärimmäisen uhanalaisilla vähintään\n50 % kymmenen vuoden tai kolmen sukupolven aikana\n(valitaan pitempi, korkeintaan 100 vuotta), erittäin\nuhanalaisilla vähintään 20 % kahdenkymmenen vuoden\ntai viiden sukupolven aikana (valitaan pitempi, korkeintaan\n100 vuotta) ja vaarantuneilla vähintään 10 % sadan\nvuoden aikana.Kvantitatiivisen analyysin perusteella todennäköisyys\nhävitä luonnosta on äärimmäisen uhanalaisilla vähintään\n50 % kymmenen vuoden tai kolmen sukupolven aikana\n(valitaan pitempi, korkeintaan 100 vuotta), erittäin\nuhanalaisilla vähintään 20 % kahdenkymmenen vuoden\ntai viiden sukupolven aikana (valitaan pitempi, korkeintaan\n100 vuotta) ja vaarantuneilla vähintään 10 % sadan\nvuoden aikana.\n</p>",
            "title": "Criterion D. Quantitative analysis"
          },
          "criteriaENotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteeristä E"
          },
          "criteriaForStatus": {
            "type": "string",
            "title": "Criteria that led to the category"
          },
          "criteriaForStatusNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot luokkaan johtaneista kriteereistä"
          },
          "criteriaNotes": {
            "type": "string",
            "title": "Comments on the criteria"
          },
          "ddReason": {
            "type": "string",
            "enum": [
              "",
              "MKV.ddReasonIncompleteSpatialData",
              "MKV.ddReasonIncompleteTaxonomicData",
              "MKV.ddReasonIncompleteOtherData"
            ],
            "description": "<ul> <li><b>1. Tuntematon alkuperä.</b> Taksoni tunnetaan vain yhdestä tai muutamasta yksilöstä/ näyteestä, joiden löytöpaikkaa ei tunneta tai paikkatiedot ovat hyvin epätarkat, joten taksonin tilaa ei voida päätellä. </li><li><b>2. Taksonominen epävarmuus.</b> Tietojen vähäisyys voi olla seurausta taksonomisesta epävarmuudesta eli levinneisyydestä, ekologiasta, tilasta, ja uhkista on vähän tietoa, koska vähäinen näytteiden ja/ tai havaintojenmäärä johtuu siitä että taksonia edustaa poikkeava yksilö, hybridi, harvinainen värimuoto tai muun lajin alalajia. Se voi selittää tiedon puutetta yhtä todennäköisesti tai todennäköisemmin kuin se, että taksoni on aidosti harvinainen, uhanalainen tai riittämättömästi etsitty. Tästä on kuitenkin erotettava ne taksonit, joiden taksonomiassa/ taksonomisessa asemassa on jotain epäselvää: ne on joko arvioitava normaalisti tai jätettävä arvioinnin ulkopuolelle (NE) ja tästä arviointilistalle mukaan ottamisesta on päätettävä arvioinnin vaiheessa 1 (luku 2). </li><li><b>3. Puutteelliset tiedot.</b> Tiedot ovat riittämättömät arviointikriteerien soveltamiseksi eli kaikki muut syyt tietojen vähäisyyteen. </li></ul>",
            "title": "Reason for class DD"
          },
          "ddReasonNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot DD-luokituksen syystä"
          },
          "decreaseDuringPeriod": {
            "type": "string",
            "title": "Decrease in population during the period"
          },
          "decreaseDuringPeriodNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot vähenemisestä"
          },
          "distributionAreaMax": {
            "type": "string",
            "title": "Distribution range, max."
          },
          "distributionAreaMin": {
            "type": "string",
            "description": "Merkitäksesi \"enintään\" jätä alaraja tyhjäksi. Merkitäksesi \"vähintään\" jätä yläraja tyhjäksi.",
            "title": "Distribution range, min."
          },
          "distributionAreaNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot levinneisyysalueen koosta"
          },
          "editNotes": {
            "type": "string",
            "title": "Edit notes"
          },
          "endangermentReasonNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot uhanalaisuuden syistä"
          },
          "evaluatedTaxon": {
            "type": "string",
            "title": "Evaluated taxon"
          },
          "evaluationPeriodLength": {
            "type": "string",
            "description": "<p>Tarkastelujakso = 3 x sukupolven pituus A-kriteerissä. Minimi 10 vuotta lyhytikäisillä lajeilla, maksimi 100 vuotta pitkäikäisillä lajeilla.</p>\n<p>C-kriteerissä tarkastelujakson pituus vaihtelee luokasta riippuen 1-3 sukupolvea tai 3,5, tai 10 v.</p>\n<p>Kenttä on tarkoitettu ensisijaisesti A-kriteeriä varten. Jos on samaan aikaan käytössä myös C-kriteeri, merkitse siihen liittyvä jakson pituus kommenttikenttään.</p>",
            "title": "Length of the assessment period"
          },
          "evaluationPeriodLengthNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot tarkastelujaksosta"
          },
          "evaluationYear": {
            "type": "string",
            "title": "Assessment year"
          },
          "externalPopulationImpactOnRedListStatus": {
            "type": "string",
            "enum": [
              "",
              "MKV.externalPopulationImpactOnRedListStatusEnumMinus1",
              "MKV.externalPopulationImpactOnRedListStatusEnumMinus2",
              "MKV.externalPopulationImpactOnRedListStatusEnumPlus1",
              "MKV.externalPopulationImpactOnRedListStatusEnumPlus2"
            ],
            "description": "<p>Arvioinnin viimeisessä vaiheessa otetaan huomioon Suomen ulkopuolella olevien populaatioiden mahdollinen vaikutus arvioitavaan Suomen populaatioon. Tarvittaessa alennetaan tai korotetaan luokkaa sen perusteella. Luokkaa alennetaan, jos ulkopuolelta saatava täydennys voi vähentää lajin häviämisriskiä. Alennettu tai korotettu luokka on lajin lopullinen uhanalaisuusluokka. </p>\n\n<p>Luokka-kenttään asetetaan alennuksen tai korotuksen aiheuttama lopputulos. Tähän kenttään asetetaan tieto tehdystä alennuksesta tai korotuksesta.</p>",
            "title": "Reducing or increasing the Red List category"
          },
          "externalPopulationImpactOnRedListStatusNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot luokan alentamisesta tai korottamisesta"
          },
          "fragmentedHabitats": {
            "type": "boolean",
            "description": "<p>Onko populaatio voimakkaasti pirstoutunut? = enemmän kuin puolet yksilöistä (tai enemmän kuin puolet asutusta elinympäristöstä) on pienissä eristyneissä laikuissa, jotka ovat </p> <li>liian pieniä ylläpitämään elinvoimaista populaatiota ja</li> <li>kaukana muista elinympäristölaikuista suhteessa lajin leviämiskykyyn.</li>",
            "title": "Population fragmented"
          },
          "fragmentedHabitatsNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot pirstoutumisesta"
          },
          "generationAge": {
            "type": "number",
            "description": "Vuosissa. (Ks. IUCN-ohje, viimeksi syntyneiden yksilöiden vanhempien keskim. ikä)",
            "title": "Generation"
          },
          "generationAgeNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot sukupolvesta"
          },
          "groundsForEvaluationNotes": {
            "type": "string",
            "title": "Comments on assessment criteria"
          },
          "habitatGeneralNotes": {
            "type": "string",
            "title": "Comments on habitats"
          },
          "habitatNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot elinympäristöstä"
          },
          "hasEndangermentReason": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "<ul> <li><b>P - Pyynti:</b> metsästys, kalastus ja laiton tappaminen, myös esimerkiksi muiden eläinten jääminen kalanpyydyksiin</li> <li><b>Ke - Keräily ja poiminta</b>, myös siirto puutarhaan</li> <li><b>H - Häirintä ja liikenne</b></li> <li><b>Ku - Kuluminen:</b> maa - ja kallioperän kuluminen, esimerkiksi tallaamisen, maastoajon, kalliokiipeilyn tai ylilaidunnuksen vuoksi</li> <li><b>R - Rakentaminen (maalla):</b> asutukseen, elinkeinoihin, liikenteeseen ja virkistyskäyttöön liittyvä rakentaminen tierakentaminen, rakentamiseen liittyvät maansiirrot ja läjitykset</li> <li><b>Ks - Kaivannaistoiminta:</b> maa - aineksen ja kalliokiviaineksen otto, kaivostoiminta</li> <li><b>Pm - Peltomaiden muutokset:</b> salaojitus, viljelytapojen muutokset, karjanhoidon muutokset (ei laidunten sulkeutuminen), koneiden käyttö ja viljeltävien lajien vaihdot (ei torjunta - aineet)</li> <li><b>Pr - Pellonraivaus:</b> metsien, soiden ja niittyjen muuttaminen pelloiksi</li> <li><b>N - Avoimien alueiden sulkeutuminen:</b> mm. niitty - ja hakamaiden sekä metsälaidunten sulkeutuminen laidunnuksen ja niiton loputtua, sorakuoppien ja muiden avointen kenttien metsittäminen ja umpeenkasvu</li> <li><b>M - Metsien uudistamis - ja hoitotoimet:</b> toimet, jotka eivät sisälly seuraaviin uhkatekijöihin, esim. maaperän muokkaus. Uhanalaisuuden syynä metsien käyttö. Tarkennetaan työdokumentoinnissa</li> <li><b>Mp - Metsien puulajisuhteiden muutokset:</b> mm. lehtipuiden väheneminen ja lehtojen kuusettuminen</li> <li><b>Mv - Vanhojen metsien väheneminen:</b> vanhojen metsien ja kookkaiden puiden väheneminen</li> <li><b>Mk - Kuloalueiden väheneminen:</b> Kuloalueiden ja muiden luontaisen sukkession alkuvaiheiden väheneminen</li> <li><b>Ml - Lahopuun väheneminen:</b> lahoavan puuaineksen, kuolleiden tai kuolevien puiden sekä oksien, lahoja kolopuiden väheneminen</li> <li><b>O - Ojitus ja turpeenotto</b>, (ei purojen perkaukset): myös kunnostusojitus ja aikaisemmin tehdyn ojituksen myöhäisemmät vaikutukset</li> <li><b>Vr - Vesirakentaminen:</b> voimalaitokset, saha - ja myllypadot, vesien säännöstely, ruoppaukset ja perkaukset (myös purojen), rantavyöhykkeen rakenteellinen muuttaminen (esim. pengerrykset), järvien laskut, tekoaltaiden rakentaminen, pohjaveden otto ja lähteiden hyödyntäminen, mm. pohjaveden pinnan laskun aiheuttamat muutokset</li> <li><b>Kh - Kemialliset haittavaikutukset:</b> ympäristömyrkyt, torjunta - aineet, ilman ja vesien saasteet, öljyvahingot sekä rehevöittävä laskeuma</li> <li><b>I - Ilmastonmuutos:</b> ennustettu ilmaston lämpeneminen, sademäärien lisääntyminen ja äärimmäisten sääilmiöiden yleistyminen seuraavien 20–30 vuoden aikana (käytetään vain, kun on erityisiä perusteita ko. lajiin kohdistuville vaikutuksille)</li> <li><b>S - Satunnaistekijät:</b> satunnaistekijöiden aiheuttama uhka kun kanta tai esiintymisalue on hyvin pieni, myös lyhytaikaiset ilmastonmuutokset</li> <li><b>Kil - Kilpailu:</b> muiden lajien aiheuttama kilpailu</li> <li><b>Ris - Risteytyminen:</b> muiden lajien aiheuttama risteytyminen</li> <li><b>Kv - Suuret kannan vaihtelut</b></li> <li><b>U - Muutokset Suomen ulkopuolella:</b> esim. elinympäristöjen muutokset lintujen talvehtimisalueilla tai muuton aikaisilla levähdysalueilla, ulkomailla tapahtuva pyynti/metsästys</li> <li><b>Vie - Vieraiden lajien aiheuttamat uhat</b>: kilpailu, risteytyminen, taudit, ekosysteemimuutokset</li> <li><b>Muu - Muu tunnettu syy:</b> määriteltyihin uhkatekijöihin sisältymätön tunnettu syy, tarkennetaan työdokumentoinnissa</li> <li><b>? - Syy tuntematon</b></li> </ul>",
            "title": "Causes of threat"
          },
          "hasOccurrence": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Occurrence"
          },
          "hasThreat": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "<ul> <li><b>P - Pyynti:</b> metsästys, kalastus ja laiton tappaminen, myös esimerkiksi muiden eläinten jääminen kalanpyydyksiin</li> <li><b>Ke - Keräily ja poiminta</b>, myös siirto puutarhaan</li> <li><b>H - Häirintä ja liikenne</b></li> <li><b>Ku - Kuluminen:</b> maa - ja kallioperän kuluminen, esimerkiksi tallaamisen, maastoajon, kalliokiipeilyn tai ylilaidunnuksen vuoksi</li> <li><b>R - Rakentaminen (maalla):</b> asutukseen, elinkeinoihin, liikenteeseen ja virkistyskäyttöön liittyvä rakentaminen tierakentaminen, rakentamiseen liittyvät maansiirrot ja läjitykset</li> <li><b>Ks - Kaivannaistoiminta:</b> maa - aineksen ja kalliokiviaineksen otto, kaivostoiminta</li> <li><b>Pm - Peltomaiden muutokset:</b> salaojitus, viljelytapojen muutokset, karjanhoidon muutokset (ei laidunten sulkeutuminen), koneiden käyttö ja viljeltävien lajien vaihdot (ei torjunta - aineet)</li> <li><b>Pr - Pellonraivaus:</b> metsien, soiden ja niittyjen muuttaminen pelloiksi</li> <li><b>N - Avoimien alueiden sulkeutuminen:</b> mm. niitty - ja hakamaiden sekä metsälaidunten sulkeutuminen laidunnuksen ja niiton loputtua, sorakuoppien ja muiden avointen kenttien metsittäminen ja umpeenkasvu</li> <li><b>M - Metsien uudistamis - ja hoitotoimet:</b> toimet, jotka eivät sisälly seuraaviin uhkatekijöihin, esim. maaperän muokkaus. Uhanalaisuuden syynä metsien käyttö. Tarkennetaan työdokumentoinnissa</li> <li><b>Mp - Metsien puulajisuhteiden muutokset:</b> mm. lehtipuiden väheneminen ja lehtojen kuusettuminen</li> <li><b>Mv - Vanhojen metsien väheneminen:</b> vanhojen metsien ja kookkaiden puiden väheneminen</li> <li><b>Mk - Kuloalueiden väheneminen:</b> Kuloalueiden ja muiden luontaisen sukkession alkuvaiheiden väheneminen</li> <li><b>Ml - Lahopuun väheneminen:</b> lahoavan puuaineksen, kuolleiden tai kuolevien puiden sekä oksien, lahoja kolopuiden väheneminen</li> <li><b>O - Ojitus ja turpeenotto</b>, (ei purojen perkaukset): myös kunnostusojitus ja aikaisemmin tehdyn ojituksen myöhäisemmät vaikutukset</li> <li><b>Vr - Vesirakentaminen:</b> voimalaitokset, saha - ja myllypadot, vesien säännöstely, ruoppaukset ja perkaukset (myös purojen), rantavyöhykkeen rakenteellinen muuttaminen (esim. pengerrykset), järvien laskut, tekoaltaiden rakentaminen, pohjaveden otto ja lähteiden hyödyntäminen, mm. pohjaveden pinnan laskun aiheuttamat muutokset</li> <li><b>Kh - Kemialliset haittavaikutukset:</b> ympäristömyrkyt, torjunta - aineet, ilman ja vesien saasteet, öljyvahingot sekä rehevöittävä laskeuma</li> <li><b>I - Ilmastonmuutos:</b> ennustettu ilmaston lämpeneminen, sademäärien lisääntyminen ja äärimmäisten sääilmiöiden yleistyminen seuraavien 20–30 vuoden aikana (käytetään vain, kun on erityisiä perusteita ko. lajiin kohdistuville vaikutuksille)</li> <li><b>S - Satunnaistekijät:</b> satunnaistekijöiden aiheuttama uhka kun kanta tai esiintymisalue on hyvin pieni, myös lyhytaikaiset ilmastonmuutokset</li> <li><b>Kil - Kilpailu:</b> muiden lajien aiheuttama kilpailu</li> <li><b>Ris - Risteytyminen:</b> muiden lajien aiheuttama risteytyminen</li> <li><b>Kv - Suuret kannan vaihtelut</b></li> <li><b>U - Muutokset Suomen ulkopuolella:</b> esim. elinympäristöjen muutokset lintujen talvehtimisalueilla tai muuton aikaisilla levähdysalueilla, ulkomailla tapahtuva pyynti/metsästys</li> <li><b>Vie - Vieraiden lajien aiheuttamat uhat</b>: kilpailu, risteytyminen, taudit, ekosysteemimuutokset</li> <li><b>Muu - Muu tunnettu syy:</b> määriteltyihin uhkatekijöihin sisältymätön tunnettu syy, tarkennetaan työdokumentoinnissa</li> <li><b>? - Syy tuntematon</b></li> </ul>",
            "title": "Threat factors"
          },
          "individualCountMax": {
            "type": "string",
            "description": "Lisääntymiskykyisten yksilöiden määrä (ks. IUCN-ohje)",
            "title": "Individual count, max."
          },
          "individualCountMin": {
            "type": "string",
            "description": "Lisääntymiskykyisten yksilöiden määrä (ks. IUCN-ohje). Merkitäksesi \"enintään\" jätä alaraja tyhjäksi. Merkitäksesi \"vähintään\" jätä yläraja tyhjäksi.",
            "title": "Individual count, min."
          },
          "individualCountNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot yksilömääristä"
          },
          "lastModified": {
            "type": "string",
            "format": "date",
            "title": "Last modified"
          },
          "lastModifiedBy": {
            "type": "string",
            "title": "Last modified by"
          },
          "lastSightingNotes": {
            "type": "string",
            "description": "Merkitään tiedot mahdollisesti hävinneiden tai hävinneiden lajien viimeisistä havainnosta.",
            "title": "Last observation"
          },
          "legacyPublications": {
            "type": "string",
            "title": "Vanhat julkaisukommentit"
          },
          "locked": {
            "type": "boolean",
            "title": "Is locked?"
          },
          "lsaRecommendation": {
            "type": "boolean",
            "title": "Recommended for strict protection"
          },
          "lsaRecommendationNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot Lsa ehdotuksesta"
          },
          "occurrenceAreaMax": {
            "type": "string",
            "title": "Size of area of occurrence, max."
          },
          "occurrenceAreaMin": {
            "type": "string",
            "description": "Merkitäksesi \"enintään\" jätä alaraja tyhjäksi. Merkitäksesi \"vähintään\" jätä yläraja tyhjäksi.",
            "title": "Size of area of occurence, min."
          },
          "occurrenceAreaNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot esiintymisalueen koosta"
          },
          "occurrenceNotes": {
            "type": "string",
            "title": "Comments on occurrence"
          },
          "occurrenceRegionsNotes": {
            "type": "string",
            "title": "Comments on the area of occurrence"
          },
          "occurrenceRegionsPrivateNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot esiintymisalueista"
          },
          "otherSources": {
            "type": "string",
            "description": "<p>Suulliset tai kirjalliset tiedonannot, henkilökohtaiset tiedostot, muistiinpanot tai julkaisemattomat aineistot, verkkosivut, keskustelupalstat ja tyypillisesti yhtä lajia koskevat epävirallisemmat lähteet</p> <p><b>Viittausohjeita:</b></p> \t\t\t <p>Meikäläinen Matti suullinen tiedonanto 2016</p> <p>Virtanen Terhi, julkaisematon selvitysaineisto Hollolasta 2015</p> <p>Heikkinen Heikki, havaintotiedonanto Nisäkäsharrastajien Nisäkäsverkko-sähköpostilista 3.5.2014 (http://www.myrsky.com/mammals/nisakasverkko.htm)</p> <p>Nämä vitteet tallentuvat vain lomakkelle, niistä ei synny julkaisua.</p>",
            "title": "Other sources"
          },
          "percentageOfGlobalPopulation": {
            "type": "number",
            "description": "Tyhjä = Tuntematon",
            "title": "Percentage of global population"
          },
          "percentageOfGlobalPopulationNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot globaalin populaation osuudesta"
          },
          "populationSizePeriodBeginning": {
            "type": "string",
            "description": "Kenttä on tarkoitettu ensisijaisesti A-kriteeriä varten. Jos on samaan aikaan käytössä myös C-kriteerin eri pituinen tarkastelujakso, merkitse sen alun ja lopun populaatiokoko kommenttikenttään. Kommenttikentän käyttö koskee myös tilannetta, jossa on käytössä useita A:n alakriteereitä (A1-A4). Ensisijaisesti lomakkeelle merkitään lopulliseen uhanalaisuusluokkaan johtaneet tiedot.",
            "title": "Population size in the beginning of assessment period"
          },
          "populationSizePeriodEnd": {
            "type": "string",
            "title": "Population size at the end of assessment period"
          },
          "populationSizePeriodNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot jakson esiintymistä"
          },
          "populationVaries": {
            "type": "boolean",
            "description": "Onko vaihtelun suuruusluokka vähintään 10-kertainen?",
            "title": "Strong fluctuations in the population"
          },
          "populationVariesNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kannanvaihtelusta"
          },
          "possiblyRE": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnRE",
              "MX.iucnEW",
              "MX.iucnEX"
            ],
            "title": "Possibly extinct"
          },
          "possiblyRENotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot mahdollisesta häviämisestä"
          },
          "primaryHabitat": {
            "type": "string",
            "description": "<p>Lisämerkinnät:</p>\n<ul> \n<li><b>v - vanhat metsät</b> (myös yksittäiset vanhat puut ja runsaasti lahopuuta sisältävät nuoremmat metsät)</li>\n<li><b>h - harjumetsät</b>, myös puoliavoimet</li>\n<li><b>p - metsäpaloalueet</b> ja muut luontaisen sukkession alkuvaiheen metsät</li>\n<li><b>j - jalopuuesiintymä</b></li>\n<li><b>pa - paahteinen</b></li>\n<li><b>va - varjoinen</b></li>\n<li><b>ra - sijaitsee rannalla</b> (lajin esiintyminen on sidoksissa rannan läheisyyteen)</li>\n<li><b>ka - karut kalliot ja kivikot</b></li>\n<li><b>ke - keskiravinteiset kalliot ja kivikot</b></li>\n<li><b>ca - kalkkivaikutteinen</b></li>\n</ul>",
            "title": "Primary habitat"
          },
          "publication": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "<p>Tieteelliset artikkelit, kirjat, julkaistut ja julkaisemattomat raportit, \ntietokannat, rekisterit, atlas-sivustot ym. vakiintuneet lähteet</p>\n<p><b>Viittausohjeita:</b></p> \t\t\t<p><b>Julkaisu</b>: Huhtinen, S., Salo, P., Haikonen, V.& von Bonsdorff, T. 2010: Kotelosienet. - Teoksessa: Rassi, P., Hyvärinen, E., Juslén, A. & Mannerkoski I. (toim.), Suomen lajien uhanalaisuus, Punainen kirja 2010: 272-277. Ympäristöministeriö & Suomen ympäristökeskus, Helsinki. 685 s.</p> \t\t\t<p><b>Tietokanta</b>: Noyes, J. S. 2014: Universal Chalcidoidea Database. – World Wide Web electronic publication. Accessed at http//www.nhm.ac.uk/chalcidoids on 18 December 2014.</p>",
            "title": "Publications and databases"
          },
          "reasonForStatusChange": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MKV.reasonForStatusChangeGenuine",
                "MKV.reasonForStatusChangeGenuineBeforePreviousEvaluation",
                "MKV.reasonForStatusChangeChangesInCriteria",
                "MKV.reasonForStatusChangeMoreInformation",
                "MKV.reasonForStatusChangeChangesInTaxonomy",
                "MKV.reasonForStatusChangeError",
                "MKV.reasonForStatusChangeErroneousInformation",
                "MKV.reasonForStatusChangeOther"
              ]
            },
            "minItems": 0,
            "description": "<p><b>Aito muutos (uusi):</b> muutos johtuu aidosta muutoksesta, joka on tapahtunut edellisen arvioinnin jälkeen (populaation tila huonontunut/ parantunut tms.)</p>\n<p><b>Aito muutos (ennen edellistä arviointia):</b> luokkaa käytetään taksoneihin, jotka arvioidaan vähintään kolmatta kertaa ja joista lasketaan uhanalaisuusindeksi (Red List Index). Muutos on tapahtunut ennen edellistä arviointia, mutta ensimmäisen jälkeen. Muutos on havaittu uuden tiedon perusteella ja mikäli se olisi ollut käytettävissä aiemmin, uusi luokka olisi annettu jo aiemmalla kerralla (aiemmilla kerroilla). Muutoksen ajankohta on dokumentoitava.</p>\n<p><b>Kriteerien muutos:</b> kategorian muutos johtuu arviointikriteerien muutoksista.</p>\n<p><b>Uusi tieto:</b> muutos johtuu siitä, että taksonin statuksesta on saatu uutta tietoa/tieto on lisääntynyt; esim. populaatio on osoittautunut aiempaa käsitystä suuremmaksi tai pienemmäksi.</p>\n<p><b>Taksonominen muutos:</b> kategorian muutos johtuu taksonomisen aseman muuttumisesta; taksoni on vastikään jaettu kahtia (alalajista laji) tai yhdistetty toisen kanssa tai kuvattu uutena tieteelle tai taksoni ei ole enää validi (pidetään nykyisin hybridinä, varianttina tms.).</p>\n<p><b>Virhe:</b> luokka on väärä, koska arvioinnissa on aiemmin tapahtunut virhe.</p>\n<p><b>Virheellinen tieto:</b> aiempi luokka on valittu virheellisen tiedon vuoksi väärin (esim. määritysvirhe).</p>\n<p><b>Muu syy:</b> muutos johtuu muusta syystä kuin aiemmista ja/tai vaatii lisäselvitystä (esimerkiksi arvioijien suhtautuminen epävarmuuteen muuttuu tai arvioinnin tulkintaohjeet ovat muuttuneet.</p>",
            "title": "Reason for change"
          },
          "reasonForStatusChangeNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot muutoksen syystä"
          },
          "redListIndexCorrection": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "description": "Tätä ei täytetä kuluvalle vuodelle. Muuttujaa käytetään ainoastaan tarvittaessa jälkikäteen uhanalaisuusindeksin laskemisessa. Jos tätä arviointia jälkikäteen halutaan korjata, arvioinnissa annettua luokkaa ei muuteta, vaan annetaan tässä korjattu luokka.",
            "title": "Red List Index Back-casted status"
          },
          "redListIndexCorrectionNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot indeksikorjauksesta"
          },
          "redListStatus": {
            "type": "string",
            "enum": [
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Category"
          },
          "redListStatusAccuracyNotes": {
            "type": "string",
            "title": "Comments on the accuracy/reliability of the assessment"
          },
          "redListStatusMax": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Range of variation of the category, max."
          },
          "redListStatusMin": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Range of variation of the category, min."
          },
          "redListStatusNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot luokasta"
          },
          "regionallyThreatenedNotes": {
            "type": "string",
            "title": "Comments on regional threat"
          },
          "regionallyThreatenedPrivateNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot alueellisesta uhanalaisuudesta"
          },
          "remarks": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Commentator remarks"
          },
          "secondaryHabitat": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Secondary habitat"
          },
          "state": {
            "type": "string",
            "enum": [
              "MKV.stateReady",
              "MKV.stateReadyForComments",
              "MKV.stateStarted"
            ],
            "title": "State"
          },
          "statusA": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Category based on Criterion A"
          },
          "statusANotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteerin A luokasta"
          },
          "statusB": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Category based on Criterion B"
          },
          "statusBNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteerin B luokasta"
          },
          "statusC": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Category based on Criterion C"
          },
          "statusCNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteerin C luokasta"
          },
          "statusD": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Category based on Criterion"
          },
          "statusDNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteerin D luokasta"
          },
          "statusE": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Category based on Criterion E"
          },
          "statusENotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot kriteerin E luokasta"
          },
          "taxonomicNotes": {
            "type": "string",
            "title": "Comments on the taxonomy used in the assessment"
          },
          "threatNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot uhkatekijöistä"
          },
          "typeOfOccurrenceInFinland": {
            "type": "string",
            "enum": [
              "",
              "MX.doesNotOccur",
              "MX.typeOfOccurrenceOccurs",
              "MX.typeOfOccurrenceStablePopulation",
              "MX.typeOfOccurrenceCommon",
              "MX.typeOfOccurrenceRare",
              "MX.typeOfOccurrenceVeryRare",
              "MX.typeOfOccurrenceVagrant",
              "MX.typeOfOccurrenceRareVagrant",
              "MX.typeOfOccurrenceMigrant",
              "MX.typeOfOccurrenceImport",
              "MX.typeOfOccurrenceAnthropogenic",
              "MX.typeOfOccurrenceNotEstablished",
              "MX.typeOfOccurrenceExtirpated",
              "MX.typeOfOccurrenceOldRecords",
              "MX.typeOfOccurrenceUncertain",
              "MX.typeOfOccurrenceSpontaneousOldResident",
              "MX.typeOfOccurrenceSpontaneousNewResident",
              "MX.typeOfOccurrenceAlienOldResident",
              "MX.typeOfOccurrenceSpontaneousNewEphemeral",
              "MX.typeOfOccurrenceSpontaneousNewEphemeralOnlyOld",
              "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentPossiblyExtinct",
              "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentExtinct",
              "MX.typeOfOccurrenceAlienNewEphemeral",
              "MX.typeOfOccurrenceAlienNewEphemeralOnlyold",
              "MX.typeOfOccurrenceAlienNewResident",
              "MX.typeOfOccurrenceAlienOldFormerlyResidentPossiblyExtinct",
              "MX.typeOfOccurrenceAlienOldExtinct",
              "MX.typeOfOccurrenceSmallDegreeCultivatedOrigin",
              "MX.typeOfOccurrenceNotableDegreeCultivatedOrigin",
              "MX.typeOfOccurrenceCompletelyCultivatedOrigin",
              "MX.typeOfOccurrenceOnlyCultivated",
              "MX.typeOfOccurrenceMaxShortDistanceEscape",
              "MX.typeOfOccurrenceMaxSoilImmigrant",
              "MX.typeOfOccurrenceMaxReplanted",
              "MX.typeOfOccurrenceMaxRelict",
              "MX.typeOfOccurrenceNotEvaluated",
              "MX.typeOfOccurrenceRegularBreeder",
              "MX.typeOfOccurrenceIrregularBreeder",
              "MX.typeOfOccurrencePassageMigrant",
              "MX.typeOfOccurrenceBirdLifeCategoryA",
              "MX.typeOfOccurrenceBirdLifeCategoryB",
              "MX.typeOfOccurrenceBirdLifeCategoryC",
              "MX.typeOfOccurrenceBirdLifeCategoryD",
              "MX.typeOfOccurrenceBirdLifeCategoryE",
              "MX.typeOfOccurrenceOccursBasedOnOccurrences"
            ],
            "title": "Type of occurrence in Finland"
          },
          "typeOfOccurrenceInFinlandNotes": {
            "type": "string",
            "title": "Yksityiset muistiinpanot vakinaisuudesta / asemasta Suomessa"
          }
        },
        "required": [
          "evaluatedTaxon",
          "evaluationYear",
          "redListStatus",
          "state"
        ]
      },
      "iucnRedListEvaluationYear": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the IUCN Evaluation Year"
          },
          "id": {
            "type": "string",
            "title": "Id for the IUCN Evaluation Year"
          },
          "@type": {
            "type": "string",
            "title": "Type for the IUCN Evaluation Year"
          },
          "evaluationYear": {
            "type": "string",
            "title": "Assessment year"
          },
          "locked": {
            "type": "boolean",
            "title": "Is locked?"
          }
        },
        "required": [
          "evaluationYear"
        ]
      },
      "iucnRedListTaxonGroup": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the IUCN Red List Evaluation Informal Taxon Group"
          },
          "id": {
            "type": "string",
            "title": "Id for the IUCN Red List Evaluation Informal Taxon Group"
          },
          "@type": {
            "type": "string",
            "title": "Type for the IUCN Red List Evaluation Informal Taxon Group"
          },
          "hasIucnSubGroup": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Has sub group"
          },
          "includesInformalTaxonGroup": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Includes informal taxon group"
          },
          "includesTaxon": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Includes taxon"
          },
          "name": {
            "$ref": "#/components/schemas/multiLang"
          }
        },
        "required": [
          "name"
        ]
      },
      "measurement": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MY.measurementClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MY.measurementClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MY.measurementClass"
          },
          "DNAConcentrationNgPerMicroliter": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "DNA concentration (ng/microliter)"
          },
          "DNARatioOfAbsorbance260And280": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "DNA purity (ratio of absorbance 260/280 nm)"
          },
          "DNAVolumeMicroliters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "DNA volume (microliters)"
          },
          "beakMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Beak (mm)"
          },
          "bodyCentimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Body (cm)"
          },
          "bodyMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Body (mm)"
          },
          "earLengthMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Ear length (mm)"
          },
          "embryoCount": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Embryo count"
          },
          "follicleDiameterMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Follicle diameter (mm)"
          },
          "footLengthMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Foot length (mm)"
          },
          "forearmMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Forearm (mm)"
          },
          "gonadMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Gonad (mm)"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          },
          "tailCentimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Tail (cm)"
          },
          "tailMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Tail (mm)"
          },
          "tarsusLengthMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Tarsus length (mm)"
          },
          "totalLengthCentimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Length (cm)"
          },
          "totalLengthMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Length (mm)"
          },
          "uterineScarCount": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Uterine scar count"
          },
          "weightGrams": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Weight (g)"
          },
          "weightKilograms": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Weight (kg)"
          },
          "wingMaxMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Wing max (mm)"
          },
          "wingMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Wing (mm)"
          },
          "wingMinMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "number"
            },
            "minItems": 0,
            "title": "Wing min (mm)"
          }
        }
      },
      "multimedia": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MM.multimediaObject"
          },
          "id": {
            "type": "string",
            "title": "Id for the MM.multimediaObject"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MM.multimediaObject"
          }
        }
      },
      "namedPlace": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MNP.namedPlace"
          },
          "id": {
            "type": "string",
            "title": "Id for the MNP.namedPlace"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MNP.namedPlace"
          },
          "acceptedDocument": {
            "$ref": "#/components/schemas/document"
          },
          "accessibility": {
            "type": "string",
            "enum": [
              "",
              "MNP.accessibilityEasy",
              "MNP.accessibilityModerate",
              "MNP.accessibilityDifficult"
            ],
            "title": "Accessibility"
          },
          "active": {
            "$ref": "#/components/schemas/dateRange"
          },
          "alternativeIDs": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Alternative IDs"
          },
          "biogeographicalProvince": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Formal abbreviation. For Finnish eliömaakunnat, use Finnish abbreviation.",
            "title": "Biogeographical province"
          },
          "birdAssociationArea": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Bird assocation area"
          },
          "collectionID": {
            "type": "string",
            "title": "Collection"
          },
          "editors": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Persons who have rights to see and use the named places in their documents",
            "title": "Editors"
          },
          "geometry": {
            "$ref": "#/components/schemas/geometry"
          },
          "images": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Images"
          },
          "locality": {
            "type": "string",
            "title": "Paikkatiedot"
          },
          "localityDescription": {
            "type": "string",
            "description": "Informal description of the exact locality, e.g. '5 km NE of city X, under stone bridge'",
            "title": "Locality description"
          },
          "municipality": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Municipality"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "notes": {
            "type": "string",
            "title": "Notes"
          },
          "owners": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Persons who have full use access and rights to edit the named place",
            "title": "Owners of the named place"
          },
          "prepopulatedDocument": {
            "$ref": "#/components/schemas/document"
          },
          "priority": {
            "type": "string",
            "enum": [
              "",
              "MNP.priority1",
              "MNP.priority2",
              "MNP.priority3",
              "MNP.priority4",
              "MNP.priority5"
            ],
            "title": "Priority"
          },
          "privateNotes": {
            "type": "string",
            "title": "Private notes"
          },
          "public": {
            "type": "boolean",
            "description": "Is the named place publicaly available. (Defaults to false)",
            "title": "Publicly available"
          },
          "reserve": {
            "$ref": "#/components/schemas/reserve"
          },
          "tags": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MNP.tagAccessibilityEasy",
                "MNP.tagAccessibilityModerate",
                "MNP.tagAccessibilityDifficult",
                "MNP.tagHabitatImportant",
                "MNP.tagCensusRare",
                "MNP.tagHabitatFarmland",
                "MNP.tagHabitatMire",
                "MNP.tagHabitatMountain"
              ]
            },
            "minItems": 0,
            "title": "Tags"
          },
          "taxonIDs": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Taxa"
          }
        },
        "required": [
          "geometry",
          "name"
        ]
      },
      "news": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the News"
          },
          "id": {
            "type": "string",
            "title": "Id for the News"
          },
          "@type": {
            "type": "string",
            "title": "Type for the News"
          },
          "content": {
            "type": "string",
            "title": "content"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time to for the news event"
          },
          "language": {
            "type": "string",
            "enum": [
              "en",
              "fi",
              "sv"
            ],
            "title": "language"
          },
          "publishDate": {
            "type": "string",
            "format": "date-time",
            "title": "publish date"
          },
          "targetIndividualIds": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Individual for the news"
          },
          "targets": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Targets for the news"
          },
          "title": {
            "type": "string",
            "title": "title"
          }
        },
        "required": [
          "content",
          "eventDate",
          "language",
          "title"
        ]
      },
      "notification": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHN.notification"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHN.notification"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHN.notification"
          },
          "annotation": {
            "$ref": "#/components/schemas/annotation"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "friendRequest": {
            "type": "string",
            "title": "Friend request from"
          },
          "friendRequestAccepted": {
            "type": "string",
            "title": "Friend request accepted by"
          },
          "notificationReason": {
            "type": "string",
            "enum": [
              "",
              "MHN.notificationReasonOwnDocumentAnnotated",
              "MHN.notificationReasonAnnotatedDocumentAnnotated"
            ],
            "title": "Notification reason"
          },
          "seen": {
            "type": "boolean",
            "title": "Seen"
          },
          "toPerson": {
            "type": "string",
            "title": "Notification is for"
          }
        },
        "required": [
          "created",
          "toPerson"
        ]
      },
      "occurrence": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Occurrence"
          },
          "id": {
            "type": "string",
            "title": "Id for the Occurrence"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Occurrence"
          },
          "area": {
            "type": "string",
            "title": "Area"
          },
          "notes": {
            "type": "string",
            "title": "Notes"
          },
          "specimenURI": {
            "type": "string",
            "title": "Specimen URI Identifier"
          },
          "status": {
            "type": "string",
            "enum": [
              "MX.doesNotOccur",
              "MX.typeOfOccurrenceOccurs",
              "MX.typeOfOccurrenceStablePopulation",
              "MX.typeOfOccurrenceCommon",
              "MX.typeOfOccurrenceRare",
              "MX.typeOfOccurrenceVeryRare",
              "MX.typeOfOccurrenceVagrant",
              "MX.typeOfOccurrenceRareVagrant",
              "MX.typeOfOccurrenceMigrant",
              "MX.typeOfOccurrenceImport",
              "MX.typeOfOccurrenceAnthropogenic",
              "MX.typeOfOccurrenceNotEstablished",
              "MX.typeOfOccurrenceExtirpated",
              "MX.typeOfOccurrenceOldRecords",
              "MX.typeOfOccurrenceUncertain",
              "MX.typeOfOccurrenceSpontaneousOldResident",
              "MX.typeOfOccurrenceSpontaneousNewResident",
              "MX.typeOfOccurrenceAlienOldResident",
              "MX.typeOfOccurrenceSpontaneousNewEphemeral",
              "MX.typeOfOccurrenceSpontaneousNewEphemeralOnlyOld",
              "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentPossiblyExtinct",
              "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentExtinct",
              "MX.typeOfOccurrenceAlienNewEphemeral",
              "MX.typeOfOccurrenceAlienNewEphemeralOnlyold",
              "MX.typeOfOccurrenceAlienNewResident",
              "MX.typeOfOccurrenceAlienOldFormerlyResidentPossiblyExtinct",
              "MX.typeOfOccurrenceAlienOldExtinct",
              "MX.typeOfOccurrenceSmallDegreeCultivatedOrigin",
              "MX.typeOfOccurrenceNotableDegreeCultivatedOrigin",
              "MX.typeOfOccurrenceCompletelyCultivatedOrigin",
              "MX.typeOfOccurrenceOnlyCultivated",
              "MX.typeOfOccurrenceMaxShortDistanceEscape",
              "MX.typeOfOccurrenceMaxSoilImmigrant",
              "MX.typeOfOccurrenceMaxReplanted",
              "MX.typeOfOccurrenceMaxRelict",
              "MX.typeOfOccurrenceNotEvaluated",
              "MX.typeOfOccurrenceRegularBreeder",
              "MX.typeOfOccurrenceIrregularBreeder",
              "MX.typeOfOccurrencePassageMigrant",
              "MX.typeOfOccurrenceBirdLifeCategoryA",
              "MX.typeOfOccurrenceBirdLifeCategoryB",
              "MX.typeOfOccurrenceBirdLifeCategoryC",
              "MX.typeOfOccurrenceBirdLifeCategoryD",
              "MX.typeOfOccurrenceBirdLifeCategoryE",
              "MX.typeOfOccurrenceOccursBasedOnOccurrences"
            ],
            "title": "Status"
          },
          "taxon": {
            "type": "string",
            "title": "taxon"
          },
          "threatened": {
            "type": "boolean",
            "title": "Threatened in region"
          },
          "year": {
            "type": "string",
            "title": "Year"
          }
        },
        "required": [
          "area",
          "status",
          "taxon"
        ]
      },
      "organization": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Organization"
          },
          "id": {
            "type": "string",
            "title": "Id for the Organization"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Organization"
          },
          "URL": {
            "type": "string",
            "description": "Organisation website. Include http://",
            "title": "Web address"
          },
          "abbreviation": {
            "type": "string",
            "description": "Official code for this organization, if one exists",
            "title": "Institution code"
          },
          "abbreviationExplanation": {
            "type": "string",
            "enum": [
              "",
              "MOS.abbreviation-explanationIndexHerbariorum",
              "MOS.abbreviation-explanationInsectAndSpiderCollectionsOfTheWorld"
            ],
            "description": "If organisation code is given, the source for it must be chosen.",
            "title": "Code source"
          },
          "ad": {
            "type": "string",
            "description": "Filled in by ICT team",
            "title": "AD group name"
          },
          "contentContact": {
            "type": "string",
            "description": "Name of content/collection contact person for the organization.",
            "title": "Content contact person"
          },
          "country": {
            "type": "string",
            "description": "Name of the country as on a postal address.",
            "title": "Country"
          },
          "datasetID": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Datasets this organisation belongs to.",
            "title": "Datasets"
          },
          "dateOrdersDue": {
            "type": "string",
            "format": "date",
            "description": "Last date for sending seed orders to this organization.",
            "title": "Due date for orders"
          },
          "editNotes": {
            "type": "string",
            "title": "editNotes"
          },
          "email": {
            "type": "string",
            "description": "Contact email address for the organization, or address of a contact person.",
            "title": "Email"
          },
          "fax": {
            "type": "string",
            "description": "Fax number, with country code",
            "title": "Fax"
          },
          "hidden": {
            "type": "boolean",
            "description": "Used for organisations that are not to be used (duplicates etc.)",
            "title": "Hide organization"
          },
          "locality": {
            "type": "string",
            "description": "Usually city name",
            "title": "Locality/City"
          },
          "logo": {
            "type": "string",
            "description": "Web address where the logo of the organization is located. Used on Kotka transaction PDFs for now.",
            "title": "Logo URL"
          },
          "notes": {
            "type": "string",
            "description": "Free-text notes",
            "title": "Notes"
          },
          "organizationLevel1": {
            "$ref": "#/components/schemas/multiLang"
          },
          "organizationLevel2": {
            "$ref": "#/components/schemas/multiLang"
          },
          "organizationLevel3": {
            "$ref": "#/components/schemas/multiLang"
          },
          "organizationLevel4": {
            "$ref": "#/components/schemas/multiLang"
          },
          "phone": {
            "type": "string",
            "description": "Phone number for organization or contact person, with country code.",
            "title": "Telephone"
          },
          "postOfficeBox": {
            "type": "string",
            "description": "Insert only numbers, leave 'P.O. Box', 'PL' or such out.",
            "title": "Post office box"
          },
          "postalCode": {
            "type": "string",
            "title": "Postal code"
          },
          "region": {
            "type": "string",
            "description": "E.g. state or province; use only if needed in the postal address",
            "title": "Region"
          },
          "streetAddress": {
            "type": "string",
            "title": "Street address"
          },
          "contentContactID": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Content contact ID"
          },
          "creator": {
            "type": "string",
            "title": "Creator"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "dateEdited": {
            "type": "string",
            "format": "date-time",
            "title": "Edited"
          },
          "editor": {
            "type": "string",
            "title": "Editor"
          },
          "owner": {
            "type": "string",
            "description": "Team or organisation that owns the record and can edit it.",
            "title": "Owner of record"
          }
        },
        "required": [
          "organizationLevel1"
        ]
      },
      "permit": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the HRA.permitClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the HRA.permitClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the HRA.permitClass"
          },
          "permitEndDate": {
            "type": "string",
            "format": "date",
            "title": "End date"
          },
          "permitFile": {
            "type": "string",
            "title": "File"
          },
          "permitNotes": {
            "type": "string",
            "title": "Notes"
          },
          "permitStartDate": {
            "type": "string",
            "format": "date",
            "title": "Start date"
          },
          "permitStatus": {
            "type": "string",
            "enum": [
              "",
              "HRA.permitStatusAvailable",
              "HRA.permitStatusNotRequired"
            ],
            "title": "Permit status"
          },
          "permitType": {
            "type": "string",
            "enum": [
              "",
              "HRA.permitTypePIC",
              "HRA.permitTypeMAT",
              "HRA.permitTypeMTA",
              "HRA.permitCollectingPermit",
              "HRA.permitTypeExportPermit",
              "HRA.permitTypeOther",
              "HRA.permitTypeMemorandumOfUnderstanding"
            ],
            "title": "Permit type"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          }
        }
      },
      "person": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Person"
          },
          "id": {
            "type": "string",
            "title": "Id for the Person"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Person"
          },
          "LTKMLoginName": {
            "type": "string",
            "title": "LTKM-käyttäjätunnus"
          },
          "address": {
            "type": "string",
            "title": "Address"
          },
          "defaultLanguage": {
            "type": "string",
            "title": "Default language"
          },
          "defaultQNamePrefix": {
            "type": "string",
            "title": "Default QName prefix"
          },
          "description": {
            "type": "string",
            "title": "Kuvaus"
          },
          "emailAddress": {
            "type": "string",
            "title": "Sähköposti"
          },
          "facebookLoginName": {
            "type": "string",
            "title": "Facebook-tunnus"
          },
          "fieldjournalLoginName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Hatikka userid (new)"
          },
          "firstJoined": {
            "type": "string",
            "format": "date",
            "title": "Ensimmäinen sisäänkirjautuminen"
          },
          "fullName": {
            "type": "string",
            "title": "Koko nimi"
          },
          "givenNames": {
            "type": "string",
            "title": "Etunimet"
          },
          "googleLoginName": {
            "type": "string",
            "title": "Google login name"
          },
          "group": {
            "type": "string",
            "description": "Group, membership or any other way that allows the user to distinguish themselves from people with the same name",
            "title": "Group"
          },
          "hakaLoginName": {
            "type": "string",
            "title": "Haka-tunnus"
          },
          "hatikkaLoginName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "OLD Hatikka login name"
          },
          "inaturalistLoginName": {
            "type": "string",
            "title": "Inaturalist-tunnus"
          },
          "inheritedName": {
            "type": "string",
            "title": "Sukunimi"
          },
          "insectDatabaseLoginName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "insectDatabaseLoginName"
          },
          "kastikkaUserName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Kastikka username"
          },
          "lajiAuthLoginName": {
            "type": "string",
            "title": "Laji.fi -tunnus"
          },
          "lintuvaaraLoginName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "lintuvaaraLoginName"
          },
          "omariistaLoginName": {
            "type": "string",
            "title": "Omariista-tunnus"
          },
          "organisation": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Organisaatio"
          },
          "organisationAdmin": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Lists all organisations that this user administrates (can grant access to PAP and add users to this organisation)",
            "title": "Admin of organisation"
          },
          "preferredName": {
            "type": "string",
            "title": "Kutsumanimi"
          },
          "previousEmailAddress": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Previously used e-mail address"
          },
          "role": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MA.admin",
                "MA.securePortalUser",
                "MA.sensitiveInformationApprovalRequestHandler",
                "MA.taxonEditorUser",
                "MA.taxonEditorUserDescriptionWriterOnly",
                "MA.haukkaUser",
                "MA.satelliteDataManagementUser",
                "MA.invasivePortalAdmin",
                "MA.luomusSpaceCalendarUser",
                "MA.luomusSpaceOpeningTimesUser",
                "MA.taxonIdEditor"
              ]
            },
            "minItems": 0,
            "title": "Rooli"
          },
          "roleAnnotation": {
            "type": "string",
            "enum": [
              "",
              "MMAN.expert",
              "MMAN.basic",
              "MMAN.owner",
              "MMAN.formAdmin",
              "MMAN.ictAdmin"
            ],
            "title": "Available annotation roles"
          },
          "roleKotka": {
            "type": "string",
            "enum": [
              "",
              "MA.admin",
              "MA.advanced",
              "MA.member",
              "MA.guest"
            ],
            "title": "User role in Kotka"
          },
          "securePortalUserRoleExpires": {
            "type": "string",
            "format": "date",
            "title": "Public Authorities Portal access expiry date"
          },
          "virtuLoginName": {
            "type": "string",
            "title": "Virtu-tunnus"
          },
          "yearOfBirth": {
            "type": "string",
            "title": "Year of birth"
          }
        },
        "required": [
          "emailAddress",
          "fullName"
        ]
      },
      "preparation": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MF.preparationClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MF.preparationClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MF.preparationClass"
          },
          "preparationDate": {
            "type": "string",
            "description": "Date when the preparation/sample was prepared.",
            "title": "Preparation date"
          },
          "preparationMaterials": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MF.preparationMaterialsAcetone",
                "MF.preparationMaterialsAmmonia",
                "MF.preparationMaterialsBasyntan",
                "MF.preparationMaterialsBorax",
                "MF.preparationMaterialsEulan",
                "MF.preparationMaterialsHydrogenPeroxide",
                "MF.preparationMaterialsMethyleneChloride",
                "MF.preparationMaterialsNovaltan",
                "MF.preparationMaterialsPapaine",
                "MF.preparationMaterialsPlaster",
                "MF.preparationMaterialsPolyurethane",
                "MF.preparationMaterialsPretanix",
                "MF.preparationMaterialsPurifiedGasoline",
                "MF.preparationMaterialsWoodWool",
                "MF.preparationMaterialsCTAB",
                "MF.preparationMaterialsEZNAForensicKit",
                "MF.preparationMaterialsDNEasyBloodAndTissueKit",
                "MF.preparationMaterialsDNEasyPlantKit",
                "MF.preparationMaterialsNucleospinTissueKit",
                "MF.preparationMaterialsNucleospinPlantTwo",
                "MF.preparationMaterialsSaltExtraction",
                "MF.preparationMaterialsDNeasyPlantMiniKit"
              ]
            },
            "minItems": 0,
            "description": "Materials (chemicals, kits etc.) used in the preparation process. It is possible to choose several.",
            "title": "Preparation process materials"
          },
          "preparationProcess": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MF.preparationProcessTanning",
                "MF.preparationProcessEnzymaticMaceration",
                "MF.preparationProcessDegreasing",
                "MF.preparationProcessBeetleCleaning",
                "MF.preparationProcessPEG",
                "MF.preparationProcessFreezeDrying"
              ]
            },
            "minItems": 0,
            "description": "Processes used in the preparation. It is possible to choose several.",
            "title": "Preparation process"
          },
          "preparationProcessNotes": {
            "type": "string",
            "description": "Additional information about the preparation process.",
            "title": "Preparation process notes"
          },
          "preparedBy": {
            "type": "string",
            "description": "Name of the person who prepared the preparation/sample, preferably in the format 'lastname, firstname'",
            "title": "Prepared by"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          }
        }
      },
      "profile": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MA.profile"
          },
          "id": {
            "type": "string",
            "title": "Id for the MA.profile"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MA.profile"
          },
          "birdSongRecognitionSkillLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/birdSongRecognitionSkillLevel"
            }
          },
          "birdwatchingActivityLevel": {
            "type": "string",
            "enum": [
              "",
              "MA.birdwatchingActivityLevelEnum1",
              "MA.birdwatchingActivityLevelEnum2",
              "MA.birdwatchingActivityLevelEnum3",
              "MA.birdwatchingActivityLevelEnum4"
            ],
            "title": "User's activity level in birdwatching"
          },
          "blocked": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Blocked ppl"
          },
          "finnishBirdSongRecognitionSkillLevel": {
            "type": "string",
            "enum": [
              "",
              "MA.finnishBirdSongRecognitionSkillLevelEnum1",
              "MA.finnishBirdSongRecognitionSkillLevelEnum2",
              "MA.finnishBirdSongRecognitionSkillLevelEnum3",
              "MA.finnishBirdSongRecognitionSkillLevelEnum4"
            ],
            "title": "User's skill level in Finnish bird song recognition"
          },
          "friendRequests": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Friend requests received"
          },
          "friends": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "List of friends of the user"
          },
          "image": {
            "type": "string",
            "title": "Image for the profile"
          },
          "nameVisibleInKerttu": {
            "type": "boolean",
            "title": "Name is visible to others in Kerttu"
          },
          "personalCollectionIdentifier": {
            "type": "string",
            "title": "Own collection identifier"
          },
          "profileDescription": {
            "type": "string",
            "title": "Profile description"
          },
          "settings": {
            "type": "object",
            "title": "Settings for the user"
          },
          "taxonExpertise": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Expertise"
          },
          "taxonExpertiseNotes": {
            "type": "string",
            "title": "Expertise notes"
          },
          "userID": {
            "type": "string",
            "title": "This users profile"
          },
          "profileKey": {
            "type": "string",
            "title": "profileKey"
          }
        },
        "required": [
          "userID"
        ]
      },
      "publication": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Publication"
          },
          "id": {
            "type": "string",
            "title": "Id for the Publication"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Publication"
          },
          "dc:URI": {
            "type": "string",
            "title": "URI"
          },
          "dc:bibliographicCitation": {
            "$ref": "#/components/schemas/multiLang"
          }
        }
      },
      "regionalStatus": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Instances of this class tell endangerment of a certain area and notes about the area"
          },
          "id": {
            "type": "string",
            "title": "Id for the Instances of this class tell endangerment of a certain area and notes about the area"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Instances of this class tell endangerment of a certain area and notes about the area"
          },
          "regionalStatusArea": {
            "type": "string",
            "title": "Area"
          },
          "regionalStatusStatus": {
            "type": "string",
            "enum": [
              "MX.doesNotOccur",
              "MX.typeOfOccurrenceOccurs",
              "MX.typeOfOccurrenceStablePopulation",
              "MX.typeOfOccurrenceCommon",
              "MX.typeOfOccurrenceRare",
              "MX.typeOfOccurrenceVeryRare",
              "MX.typeOfOccurrenceVagrant",
              "MX.typeOfOccurrenceRareVagrant",
              "MX.typeOfOccurrenceMigrant",
              "MX.typeOfOccurrenceImport",
              "MX.typeOfOccurrenceAnthropogenic",
              "MX.typeOfOccurrenceNotEstablished",
              "MX.typeOfOccurrenceExtirpated",
              "MX.typeOfOccurrenceOldRecords",
              "MX.typeOfOccurrenceUncertain",
              "MX.typeOfOccurrenceSpontaneousOldResident",
              "MX.typeOfOccurrenceSpontaneousNewResident",
              "MX.typeOfOccurrenceAlienOldResident",
              "MX.typeOfOccurrenceSpontaneousNewEphemeral",
              "MX.typeOfOccurrenceSpontaneousNewEphemeralOnlyOld",
              "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentPossiblyExtinct",
              "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentExtinct",
              "MX.typeOfOccurrenceAlienNewEphemeral",
              "MX.typeOfOccurrenceAlienNewEphemeralOnlyold",
              "MX.typeOfOccurrenceAlienNewResident",
              "MX.typeOfOccurrenceAlienOldFormerlyResidentPossiblyExtinct",
              "MX.typeOfOccurrenceAlienOldExtinct",
              "MX.typeOfOccurrenceSmallDegreeCultivatedOrigin",
              "MX.typeOfOccurrenceNotableDegreeCultivatedOrigin",
              "MX.typeOfOccurrenceCompletelyCultivatedOrigin",
              "MX.typeOfOccurrenceOnlyCultivated",
              "MX.typeOfOccurrenceMaxShortDistanceEscape",
              "MX.typeOfOccurrenceMaxSoilImmigrant",
              "MX.typeOfOccurrenceMaxReplanted",
              "MX.typeOfOccurrenceMaxRelict",
              "MX.typeOfOccurrenceNotEvaluated",
              "MX.typeOfOccurrenceRegularBreeder",
              "MX.typeOfOccurrenceIrregularBreeder",
              "MX.typeOfOccurrencePassageMigrant",
              "MX.typeOfOccurrenceBirdLifeCategoryA",
              "MX.typeOfOccurrenceBirdLifeCategoryB",
              "MX.typeOfOccurrenceBirdLifeCategoryC",
              "MX.typeOfOccurrenceBirdLifeCategoryD",
              "MX.typeOfOccurrenceBirdLifeCategoryE",
              "MX.typeOfOccurrenceOccursBasedOnOccurrences"
            ],
            "title": "regionalStatusStatus"
          }
        },
        "required": [
          "regionalStatusArea",
          "regionalStatusStatus"
        ]
      },
      "reserve": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MNP.reserveClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MNP.reserveClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MNP.reserveClass"
          },
          "reserver": {
            "type": "string",
            "title": "Reserver"
          },
          "until": {
            "type": "string",
            "format": "date",
            "title": "Until"
          }
        },
        "required": [
          "reserver",
          "until"
        ]
      },
      "sample": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Specimen sample"
          },
          "id": {
            "type": "string",
            "title": "Id for the Specimen sample"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Specimen sample"
          },
          "DNAExtractionInstrument": {
            "type": "string",
            "description": "Name of the instrument or device used for DNA extraction",
            "title": "DNA extraction instrument"
          },
          "additionalIDs": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Other identifiers this preparation/sample has, in format 'type:identifier'. For example: 'MZHtissue:123'. You can enter the type and colon and then click 'generate' to fetch the next free number for that prefix type.",
            "title": "Preparation/sample additional sample IDs"
          },
          "bold": {
            "type": "string",
            "description": "BOLD ID (usually BOLD \"Sample ID\") for the preparation/sample. If no other preparation/sample information is entered, use the BOLD field on the document level",
            "title": "Sample BOLD ID"
          },
          "collectionID": {
            "type": "string",
            "description": "The collection which this preparation/sample belongs to, if different from the collection of the specimen.",
            "title": "Preparation/sample collection"
          },
          "condition": {
            "type": "string",
            "description": "Notes on the defects of the preparation/sample (missing parts or such). For specimen level status use the condition field in the basic information section (document level). Empty value means same as \"good\" or \"hyvä\" - that the sample is in fine condition.",
            "title": "Preparation/sample condition (defects)"
          },
          "datasetID": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Datasets for the preparation/sample. For specimen level datasets, use the dataset field in the basic information section (document level).",
            "title": "Preparation/sample dataset(s)"
          },
          "elutionMedium": {
            "type": "string",
            "enum": [
              "",
              "MF.elutionMediumUltrapureWater",
              "MF.elutionMediumElutionBuffer"
            ],
            "description": "DNA sample elution medium",
            "title": "DNA elution medium"
          },
          "event": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Diary-style information about what has been done to the preparation/sample",
            "title": "Events (maintenance etc.)"
          },
          "genbank": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Genbank ID for the preparation/sample. If no other preparation/sample information is entered, use the Genbank field on the document level",
            "title": "Sample Genbank ID"
          },
          "individualsInPreparation": {
            "type": "string",
            "enum": [
              "",
              "MF.individualsInPreparationMultiple",
              "MF.individualsInPreparationSingle"
            ],
            "description": "For example a jar that contains multiple fish individuals can be recorded as one specimen and one preparation. Can also be used for DNA samples (was DNA extracted from single or multiple individuals?).",
            "title": "Single/multiple individual(s)?"
          },
          "material": {
            "type": "string",
            "enum": [
              "",
              "MF.materialBirdStudySkin",
              "MF.materialWing",
              "MF.materialTail",
              "MF.materialWingAndTail",
              "MF.materialSkull",
              "MF.materialEntireSkeleton",
              "MF.materialBones",
              "MF.materialSkullAndBones",
              "MF.materialAntlers",
              "MF.materialHead",
              "MF.materialMuscle",
              "MF.materialLiver",
              "MF.materialLeaf",
              "MF.materialBlood",
              "MF.materialLeg",
              "MF.materialSkin",
              "MF.materialFeather",
              "MF.materialEgg",
              "MF.materialEggContent",
              "MF.materialGenomicDNA",
              "MF.materialMitochondrialDNA",
              "MF.materialChloroplastDNA",
              "MF.materialEnvironmentalDNA",
              "MF.materialTeeth",
              "MF.materialBodyParts",
              "MF.materialEntireOrganism",
              "MF.materialAppendages",
              "MF.materialGenitalPreparation",
              "MF.materialSection",
              "MF.materialChromosomes",
              "MF.materialShell",
              "MF.materialOther"
            ],
            "description": "Preparation/sample material. Choose preparation/sample type first.",
            "title": "Material"
          },
          "notes": {
            "type": "string",
            "description": "Additional information about the preparation/sample",
            "title": "Notes"
          },
          "preparationType": {
            "type": "string",
            "enum": [
              "MF.preparationTypeSkin",
              "MF.preparationTypeSkeletal",
              "MF.preparationTypeMount",
              "MF.preparationTypeTissue",
              "MF.preparationTypeTissueEcotoxicology",
              "MF.preparationTypeLiquid",
              "MF.preparationTypeMicroscopeSlide",
              "MF.preparationTypeDNAExtract",
              "MF.preparationTypeOther"
            ],
            "description": "Type of preparation/sample",
            "title": "Preparation/sample type"
          },
          "preservation": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.preservationPressed",
                "MY.preservationDry",
                "MY.preservationCriticalPointDrying",
                "MY.preservationPinned",
                "MY.preservationGlued",
                "MY.preservationLiquid",
                "MY.preservationEthanol",
                "MY.preservationEthanolPure",
                "MY.preservationEthanol70",
                "MY.preservationEthanol80",
                "MY.preservationEthanol80Pure",
                "MY.preservationEthanol96",
                "MY.preservationEthanolDenatured",
                "MY.preservationEthanolFormalin",
                "MY.preservationEthanolExFormalin",
                "MY.preservationFormalin",
                "MY.preservationBouinSolution",
                "MY.preservationPampelsFluid",
                "MY.preservationGlycerol",
                "MY.preservationParaffin",
                "MY.preservationMercuricChloride",
                "MY.preservationCryopreserved",
                "MY.preservationFrozen",
                "MY.preservationFrozenMinus80C",
                "MY.preservationFreezeDried",
                "MY.preservationGoldPlated",
                "MY.preservationActiveCulture",
                "MY.preservationLiving",
                "MY.preservationSlide",
                "MY.preservationSlideCanadaBalsam",
                "MY.preservationSlideEuparal",
                "MY.preservationSlidePolyviol",
                "MY.preservationStuffed",
                "MY.preservationCast",
                "MY.preservationPlastinated",
                "MY.preservationFrozenMinus80CAndEthanolMinus20C"
              ]
            },
            "minItems": 0,
            "description": "Preservation methods and materials of the preparation/sample. It is possible to choose several",
            "title": "Preparation/sample preservation"
          },
          "publication": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Publication references or doi's that refer to this preparations/sample. For publications referring to the specimen, use publications field in the Other section (document level).",
            "title": "Preparation/sample publication(s)"
          },
          "quality": {
            "type": "string",
            "enum": [
              "",
              "MF.qualityLow",
              "MF.qualityMedium",
              "MF.qualityHigh"
            ],
            "description": "DNA sample quality on a three step scale. The quality is defined by quality check measurements",
            "title": "DNA sample quality"
          },
          "qualityCheckDate": {
            "type": "string",
            "description": "Date of the latest quality check measurements",
            "title": "DNA quality check date"
          },
          "qualityCheckMethod": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MF.qualityCheckMethodNanoDrop",
                "MF.qualityCheckMethodCubit"
              ]
            },
            "minItems": 0,
            "description": "Method or instrument used for quality measurements",
            "title": "DNA quality check method"
          },
          "qualityNotes": {
            "type": "string",
            "description": "Additional information about the DNA sample quality",
            "title": "DNA quality notes"
          },
          "sampleLocation": {
            "type": "string",
            "description": "Location of the preparation/sample so that museum personnel can find it. E.g. room, freezer, shelf number etc.",
            "title": "Preparation/sample location"
          },
          "specimenID": {
            "type": "string",
            "title": "Specimen ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "",
              "MY.statusOk",
              "MY.statusMissing",
              "MY.statusUnrecoverable",
              "MY.statusLost",
              "MY.statusDonated",
              "MY.statusDeposited",
              "MY.statusDeaccessioned",
              "MY.statusDiscarded",
              "MY.statusSpent",
              "MY.statusDestroyed",
              "MY.statusUndefined",
              "MY.statusAxenic",
              "MY.statusNonAxenic",
              "MY.statusNotAvailable",
              "MY.statusDead",
              "MY.statusNoVoucherRetained"
            ],
            "description": "Status of the preparation/sample. For specimen level status use the status field in the basic information section. Empty value means same as \"ok\" - that there is nothing special about the status of the sample.",
            "title": "Preparation/sample status"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          },
          "measurement": {
            "$ref": "#/components/schemas/measurement"
          },
          "creator": {
            "type": "string",
            "title": "Creator"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "dateEdited": {
            "type": "string",
            "format": "date-time",
            "title": "Edited"
          },
          "editor": {
            "type": "string",
            "title": "Editor"
          },
          "owner": {
            "type": "string",
            "description": "Team or organisation that owns the record and can edit it.",
            "title": "Owner of record"
          }
        },
        "required": [
          "preparationType",
          "specimenID"
        ]
      },
      "subUnit": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MY.subUnit"
          },
          "id": {
            "type": "string",
            "title": "Id for the MY.subUnit"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MY.subUnit"
          },
          "age": {
            "type": "string",
            "description": "Estimated or known age in calendar years, years, days or other relevant unit.",
            "title": "Age"
          },
          "individualCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count"
          },
          "sex": {
            "type": "string",
            "enum": [
              "",
              "MY.sexM",
              "MY.sexF",
              "MY.sexW",
              "MY.sexU",
              "MY.sexN",
              "MY.sexX",
              "MY.sexE",
              "MY.sexC"
            ],
            "description": "Sex of the individual(s)",
            "title": "Sex"
          }
        }
      },
      "tag": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MMAN.tagClass"
          },
          "id": {
            "type": "string",
            "title": "Id for the MMAN.tagClass"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MMAN.tagClass"
          },
          "description": {
            "$ref": "#/components/schemas/multiLang"
          },
          "name": {
            "$ref": "#/components/schemas/multiLang"
          },
          "requiredRolesAdd": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MMAN.expert",
                "MMAN.basic",
                "MMAN.owner",
                "MMAN.formAdmin",
                "MMAN.ictAdmin"
              ]
            },
            "minItems": 0,
            "title": "Required role to add"
          },
          "requiredRolesRemove": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MMAN.expert",
                "MMAN.basic",
                "MMAN.owner",
                "MMAN.formAdmin",
                "MMAN.ictAdmin"
              ]
            },
            "minItems": 0,
            "title": "Required role to remove"
          },
          "type": {
            "type": "string",
            "enum": [
              "",
              "MMAN.typeCheck",
              "MMAN.typeAdmin",
              "MMAN.typeInfo",
              "MMAN.typeInvasive",
              "MMAN.typeCensus",
              "MMAN.typeNegativeQuality",
              "MMAN.typePositiveQuality"
            ],
            "title": "Type"
          }
        }
      },
      "taxon": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Taxon"
          },
          "id": {
            "type": "string",
            "title": "Id for the Taxon"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Taxon"
          },
          "herbo:sortOrder": {
            "type": "integer",
            "title": "herbo:sortOrder"
          },
          "primaryHabitat": {
            "type": "string",
            "description": "<p>Lisämerkinnät:</p>\n<ul> \n<li><b>v - vanhat metsät</b> (myös yksittäiset vanhat puut ja runsaasti lahopuuta sisältävät nuoremmat metsät)</li>\n<li><b>h - harjumetsät</b>, myös puoliavoimet</li>\n<li><b>p - metsäpaloalueet</b> ja muut luontaisen sukkession alkuvaiheen metsät</li>\n<li><b>j - jalopuuesiintymä</b></li>\n<li><b>pa - paahteinen</b></li>\n<li><b>va - varjoinen</b></li>\n<li><b>ra - sijaitsee rannalla</b> (lajin esiintyminen on sidoksissa rannan läheisyyteen)</li>\n<li><b>ka - karut kalliot ja kivikot</b></li>\n<li><b>ke - keskiravinteiset kalliot ja kivikot</b></li>\n<li><b>ca - kalkkivaikutteinen</b></li>\n</ul>",
            "title": "Primary habitat"
          },
          "secondaryHabitat": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Secondary habitat"
          },
          "additionalID": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Identifier of this taxon concept/name in other systems/sources",
            "title": "Additional identifiers"
          },
          "algalPartnerOfLichen": {
            "type": "string",
            "description": "Leväosakkaiden kuvaus",
            "title": "Algal partner"
          },
          "alsoKnownAs": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Names used in observations that are linked to taxonomy. (Eg names used in special cases and informal and slang names.)",
            "title": "AKA names"
          },
          "alternativeVernacularName": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "en": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "fi": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "sv": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              }
            },
            "description": "Commonly used names. (Eg names used in recent literature.)",
            "title": "Other common names"
          },
          "autoNonWild": {
            "type": "boolean",
            "title": "Automatically set occurrences as non-wild"
          },
          "behaviour": {
            "type": "string",
            "description": "Lajin elintavat",
            "title": "Behaviour"
          },
          "birdlifeCode": {
            "type": "string",
            "title": "BirdLife code"
          },
          "breedingSecureLevel": {
            "type": "string",
            "enum": [
              "",
              "MX.secureLevelNone",
              "MX.secureLevelKM1",
              "MX.secureLevelKM5",
              "MX.secureLevelKM10",
              "MX.secureLevelKM25",
              "MX.secureLevelKM50",
              "MX.secureLevelKM100",
              "MX.secureLevelHighest",
              "MX.secureLevelNoShow"
            ],
            "title": "Secure level during breeding season"
          },
          "circumscription": {
            "type": "string",
            "title": "Circumscription"
          },
          "colloquialVernacularName": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "en": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "fi": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "sv": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              }
            },
            "description": "Informal but commonly used name. Name that is outdated, unofficial or non-recommended, but which is still commonly used for this taxon.",
            "title": "Colloquial name"
          },
          "conservationStatusDescriptionFinland": {
            "type": "string",
            "title": "Conservation status in Finland"
          },
          "conservationStatusDescriptionWorld": {
            "type": "string",
            "title": "Conservation status globally"
          },
          "cultivationText": {
            "type": "string",
            "title": "Cultivation"
          },
          "customReportFormLink": {
            "type": "string",
            "title": "Custom observation report from link"
          },
          "descriptionCone": {
            "type": "string",
            "description": "Käpyjen kuvaus",
            "title": "Cone"
          },
          "descriptionFlower": {
            "type": "string",
            "description": "Kukan kuvaus",
            "title": "Flower"
          },
          "descriptionFruitAndSeed": {
            "type": "string",
            "description": "Hedelmän/siemenen -kuvaus",
            "title": "Fruit and seed"
          },
          "descriptionFruitbody": {
            "type": "string",
            "description": "Itiöemän kuvaus",
            "title": "Fruitbody"
          },
          "descriptionHostParasite": {
            "type": "string",
            "title": "Host-parasite relationships"
          },
          "descriptionLeaf": {
            "type": "string",
            "description": "Lehden kuvaus",
            "title": "Leaf"
          },
          "descriptionMicroscopicIdentification": {
            "type": "string",
            "description": "Lajin mikroskooppiset tuntomerkit",
            "title": "Microscopic identification"
          },
          "descriptionOrganismSize": {
            "type": "string",
            "description": "Eliön koon kuvaus",
            "title": "Size"
          },
          "descriptionReferences": {
            "type": "string",
            "title": "References"
          },
          "descriptionRoot": {
            "type": "string",
            "title": "Root"
          },
          "descriptionSporangiumAndAsexualReproduction": {
            "type": "string",
            "description": "Itiöpesäkkeet ja suvuton lisääntyminen",
            "title": "Sporangium"
          },
          "descriptionSpore": {
            "type": "string",
            "description": "Itiöiden kuvaus",
            "title": "Spores"
          },
          "descriptionStem": {
            "type": "string",
            "description": "Kasvin varren kuvaus",
            "title": "Stem"
          },
          "descriptionText": {
            "type": "string",
            "title": "Description"
          },
          "descriptionThallus": {
            "type": "string",
            "description": "Sekovarren kuvaus",
            "title": "Thallus"
          },
          "descriptionToxicity": {
            "type": "string",
            "title": "Toxicity"
          },
          "distributionFinland": {
            "type": "string",
            "title": "Distribution in Finland"
          },
          "distributionMapFinland": {
            "type": "string",
            "title": "Map of distribution in Finland"
          },
          "ecology": {
            "type": "string",
            "description": "Lajin ekologian sekalainen kuvaus",
            "title": "Ecological and economic importance"
          },
          "economicUseText": {
            "type": "string",
            "title": "Use"
          },
          "etymologyText": {
            "type": "string",
            "title": "Etymology of names"
          },
          "euringCode": {
            "type": "string",
            "title": "EURING code"
          },
          "euringNumber": {
            "type": "string",
            "title": "EURING number"
          },
          "externalLinkURL": {
            "type": "string",
            "title": "Link to external information page"
          },
          "finnish": {
            "type": "boolean",
            "title": "Finnish taxon"
          },
          "frequencyScoringPoints": {
            "type": "integer",
            "title": "Frequency scoring points"
          },
          "growthFormAndGrowthHabit": {
            "type": "string",
            "title": "Growing form"
          },
          "habitat": {
            "type": "string",
            "description": "Lajin elinympäristö",
            "title": "Habitat"
          },
          "habitatSubstrate": {
            "type": "string",
            "description": "Lajin kasvialusta",
            "title": "Substrate"
          },
          "hasAdminStatus": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MX.finlex160_1997_appendix4_2021",
                "MX.finlex160_1997_appendix4_specialInterest_2021",
                "MX.finlex160_1997_appendix1",
                "MX.finlex160_1997_appendix2a",
                "MX.finlex160_1997_appendix2b",
                "MX.finlex160_1997_appendix3a",
                "MX.finlex160_1997_appendix3b",
                "MX.finlex160_1997_appendix3c",
                "MX.finlex160_1997_largeBirdsOfPrey",
                "MX.habitatsDirectiveAnnexII",
                "MX.habitatsDirectiveAnnexIV",
                "MX.habitatsDirectiveAnnexV",
                "MX.primaryInterestInEU",
                "MX.habitatsDirectiveAnnexIIExceptionGranted",
                "MX.habitatsDirectiveAnnexII_FinlandNaturaSpecies",
                "MX.habitatsDirectiveAnnexIVExceptionGranted",
                "MX.habitatsDirectiveAnnexVExceptionGranted",
                "MX.birdsDirectiveStatusAppendix1",
                "MX.birdsDirectiveStatusAppendix2A",
                "MX.birdsDirectiveStatusAppendix2B",
                "MX.birdsDirectiveStatusAppendix3A",
                "MX.birdsDirectiveStatusAppendix3B",
                "MX.birdsDirectiveStatusMigratoryBirds",
                "MX.cites_appendixI",
                "MX.cites_appendixII",
                "MX.cites_appendixIII",
                "MX.euRegulation_cites_appendixA",
                "MX.euRegulation_cites_appendixB",
                "MX.euRegulation_cites_appendixD",
                "MX.finnishEnvironmentInstitute2020protectionPrioritySpecies",
                "MX.finnishEnvironmentInstitute2010protectionPrioritySpecies",
                "MX.gameBird",
                "MX.gameMammal",
                "MX.unprotectedSpecies",
                "MX.nationallySignificantInvasiveSpecies",
                "MX.euInvasiveSpeciesList",
                "MX.quarantinePlantPest",
                "MX.qualityPlantPest",
                "MX.otherPlantPest",
                "MX.nationalInvasiveSpeciesStrategy",
                "MX.otherInvasiveSpeciesList",
                "MX.controllingRisksOfInvasiveAlienSpecies",
                "MX.finnishEnvironmentInstitute20072010forestSpecies",
                "MX.finnishEnvironmentInstitute2020conservationProjectSpecies",
                "MX.finnishEnvironmentInstitute2020conservationProjectAapamireSpecies",
                "MX.finnishEnvironmentInstitute2020conservationProjectVascularSpecies",
                "MX.cropWildRelative",
                "MX.finnishEnvironmentInstitute20192021forestSpecies",
                "MX.finlex160_1997_appendix4",
                "MX.finlex160_1997_appendix4_specialInterest"
              ]
            },
            "minItems": 0,
            "title": "Administrative status"
          },
          "hasAlternativeName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Alternative name"
          },
          "hasBasionym": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Basionym / Original combination"
          },
          "hasHeterotypicSynonym": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Heterotypic synonym"
          },
          "hasHomotypicSynonym": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Homotypic synonym"
          },
          "hasMisappliedName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Misapplied name"
          },
          "hasMisspelledName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Misspelled name"
          },
          "hasObjectiveSynonym": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Objective synonym"
          },
          "hasOrthographicVariant": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Orthographic variant"
          },
          "hasSubjectiveSynonym": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Subjective synonym"
          },
          "hasSynonym": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Synonym"
          },
          "hasUncertainSynonym": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Uncertain synonym"
          },
          "hiddenTaxon": {
            "type": "boolean",
            "description": "Should this taxon be hidden when showing contents of a checklist (publicly)?",
            "title": "Hidden?"
          },
          "identificationText": {
            "type": "string",
            "title": "Identification"
          },
          "ingressText": {
            "type": "string",
            "title": "Ingress"
          },
          "invasiveCitizenActionsText": {
            "type": "string",
            "title": "What can I do?"
          },
          "invasiveEffectText": {
            "type": "string",
            "title": "Harmfulness"
          },
          "invasivePreventionMethodsText": {
            "type": "string",
            "title": "Prevention methods"
          },
          "invasiveSpeciesCategory": {
            "type": "string",
            "enum": [
              "",
              "MX.invasiveExtremelyDangerous",
              "MX.invasiveDangerous",
              "MX.invasiveWatchlist"
            ],
            "title": "Invasive category"
          },
          "invasiveSpeciesClassificationDescription": {
            "type": "string",
            "title": "Classification"
          },
          "invasiveSpeciesEarlyWarning": {
            "type": "boolean",
            "title": "Send observation warning"
          },
          "invasiveSpeciesEstablishment": {
            "type": "string",
            "enum": [
              "",
              "MX.invasiveEstablished",
              "MX.invasiveSporadic",
              "MX.invasiveNotYetInFinland",
              "MX.invasiveEstablishmentUnknown",
              "MX.invasiveEstablishmentAccidental"
            ],
            "title": "Establishment"
          },
          "isPartOf": {
            "type": "string",
            "title": "Parent taxon"
          },
          "isPartOfInformalTaxonGroup": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Informal group"
          },
          "isPartOfSet": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MX.taxonSetSykeButterflyCensusPapilionoidea",
                "MX.taxonSetSykeButterflyCensusOther",
                "MX.taxonSetWaterbirdWaterbirds",
                "MX.taxonSetWaterbirdWaders",
                "MX.taxonSetWaterbirdGulls",
                "MX.taxonSetWaterbirdPasserines",
                "MX.taxonSetWaterbirdAmphibia",
                "MX.taxonSetSykeBumblebee",
                "MVL.1201",
                "MX.taxonSetSykeBumblebeeOther",
                "MX.taxonSetBirdAtlasCommon",
                "MX.taxonSetBiomonCompleteListOdonata"
              ]
            },
            "minItems": 0,
            "title": "Is part of a set of various taxa"
          },
          "lifeCycle": {
            "type": "string",
            "description": "Eliön elinkierto",
            "title": "Life cycle"
          },
          "management": {
            "type": "string",
            "title": "Instructions for habitat management"
          },
          "miscText": {
            "type": "string",
            "title": "Additional information"
          },
          "nameAccordingTo": {
            "type": "string",
            "title": "Checklist"
          },
          "nameDecidedBy": {
            "type": "string",
            "title": "Name decided by"
          },
          "nameDecidedDate": {
            "type": "string",
            "format": "date",
            "title": "Date of decision"
          },
          "naturaAreaSecureLevel": {
            "type": "string",
            "enum": [
              "",
              "MX.secureLevelNone",
              "MX.secureLevelKM1",
              "MX.secureLevelKM5",
              "MX.secureLevelKM10",
              "MX.secureLevelKM25",
              "MX.secureLevelKM50",
              "MX.secureLevelKM100",
              "MX.secureLevelHighest",
              "MX.secureLevelNoShow"
            ],
            "title": "Secure level in Natura-area"
          },
          "nestSiteSecureLevel": {
            "type": "string",
            "enum": [
              "",
              "MX.secureLevelNone",
              "MX.secureLevelKM1",
              "MX.secureLevelKM5",
              "MX.secureLevelKM10",
              "MX.secureLevelKM25",
              "MX.secureLevelKM50",
              "MX.secureLevelKM100",
              "MX.secureLevelHighest",
              "MX.secureLevelNoShow"
            ],
            "title": "Secure level for nest site"
          },
          "notes": {
            "type": "string",
            "title": "Notes on taxonomy"
          },
          "obsoleteVernacularName": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "en": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "fi": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              },
              "sv": {
                "type": "array",
                "uniqueItems": false,
                "items": {
                  "type": "string"
                },
                "minItems": 0
              }
            },
            "description": "Names not recommended and no longer (for a long time) commonly used. (For example, names used in the literature in the 20th century, or names transferred to another taxon.",
            "title": "Obsolete vernacular names"
          },
          "occurrenceInFinland": {
            "type": "string",
            "enum": [
              "",
              "MX.doesNotOccur",
              "MX.occurrenceInFinlandPublished",
              "MX.occurrenceInFinlandCollected",
              "MX.occurrenceInFinlandObserved",
              "MX.occurrenceInFinlandPublishedUncertain",
              "MX.occurrenceInFinlandCollectedUncertain",
              "MX.occurrenceInFinlandObservedUncertain",
              "MX.occurrenceInFinlandPublishedError",
              "MX.occurrenceInFinlandPresumed"
            ],
            "title": "Occurrence in Finland"
          },
          "occurrenceInFinlandPublication": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Publication of occurrence"
          },
          "occurrenceInFinlandSpecimenURI": {
            "type": "string",
            "title": "Specimen URI Identifier of occurrence in Finland"
          },
          "originAndDistributionText": {
            "type": "string",
            "title": "Origin and general distribution"
          },
          "originalDescription": {
            "type": "string",
            "title": "Nomenclatural reference"
          },
          "originalPublication": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Source of taxonomy"
          },
          "overridingTargetName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Observations reported using this name will be linked to this taxon"
          },
          "privateNotes": {
            "type": "string",
            "title": "Private notes"
          },
          "productionText": {
            "type": "string",
            "title": "Production"
          },
          "redListStatus2000Finland": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Red List 2000 IUCN category"
          },
          "redListStatus2010Finland": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Red List 2010 IUCN category"
          },
          "redListStatus2015Finland": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Red List 2015 IUCN category"
          },
          "redListStatus2019Finland": {
            "type": "string",
            "enum": [
              "",
              "MX.iucnEX",
              "MX.iucnEW",
              "MX.iucnRE",
              "MX.iucnCR",
              "MX.iucnEN",
              "MX.iucnVU",
              "MX.iucnNT",
              "MX.iucnLC",
              "MX.iucnDD",
              "MX.iucnNA",
              "MX.iucnNE"
            ],
            "title": "Red List 2019 IUCN category"
          },
          "reproduction": {
            "type": "string",
            "title": "Reproduction"
          },
          "reproductionFloweringTime": {
            "type": "string",
            "description": "Kukinta-aika",
            "title": "Flowering time"
          },
          "reproductionPollination": {
            "type": "string",
            "description": "Pölytyksen kuvaus",
            "title": "Pollination"
          },
          "scientificName": {
            "type": "string",
            "title": "Scientific name"
          },
          "scientificNameAuthorship": {
            "type": "string",
            "title": "Authors"
          },
          "secureLevel": {
            "type": "string",
            "enum": [
              "",
              "MX.secureLevelNone",
              "MX.secureLevelKM1",
              "MX.secureLevelKM5",
              "MX.secureLevelKM10",
              "MX.secureLevelKM25",
              "MX.secureLevelKM50",
              "MX.secureLevelKM100",
              "MX.secureLevelHighest",
              "MX.secureLevelNoShow"
            ],
            "description": "Secure level (salaus-/karkeistustaso) for the data",
            "title": "Secure level"
          },
          "speciesCardAuthors": {
            "type": "string",
            "title": "Description text authors"
          },
          "stopInformalTaxonGroupInheritance": {
            "type": "boolean",
            "title": "Stop informal taxon group inheritance"
          },
          "stopOccurrenceInFinlandPublicationInheritance": {
            "type": "boolean",
            "title": "Stop occurrence in Finland publication inheritance"
          },
          "stopOriginalPublicationInheritance": {
            "type": "boolean",
            "title": "Stop original publication inheritance"
          },
          "targetName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Target name in observations"
          },
          "taxonEditor": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Checklist editors"
          },
          "taxonExpert": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Experts"
          },
          "taxonRank": {
            "type": "string",
            "enum": [
              "",
              "MX.superdomain",
              "MX.domain",
              "MX.kingdom",
              "MX.subkingdom",
              "MX.infrakingdom",
              "MX.superphylum",
              "MX.phylum",
              "MX.subphylum",
              "MX.infraphylum",
              "MX.superdivision",
              "MX.division",
              "MX.subdivision",
              "MX.infradivision",
              "MX.superclass",
              "MX.class",
              "MX.subclass",
              "MX.infraclass",
              "MX.parvclass",
              "MX.superorder",
              "MX.order",
              "MX.suborder",
              "MX.infraorder",
              "MX.parvorder",
              "MX.superfamily",
              "MX.family",
              "MX.subfamily",
              "MX.tribe",
              "MX.subtribe",
              "MX.supergenus",
              "MX.genus",
              "MX.nothogenus",
              "MX.subgenus",
              "MX.section",
              "MX.subsection",
              "MX.series",
              "MX.subseries",
              "MX.infragenericTaxon",
              "MX.aggregate",
              "MX.speciesAggregate",
              "MX.species",
              "MX.nothospecies",
              "MX.infraspecificTaxon",
              "MX.subspecificAggregate",
              "MX.subspecies",
              "MX.nothosubspecies",
              "MX.variety",
              "MX.subvariety",
              "MX.form",
              "MX.subform",
              "MX.hybrid",
              "MX.anamorph",
              "MX.ecotype",
              "MX.populationGroup",
              "MX.intergenericHybrid",
              "MX.infragenericHybrid",
              "MX.cultivar",
              "MX.group",
              "MX.grex"
            ],
            "title": "Taxonomic rank"
          },
          "taxonomyText": {
            "type": "string",
            "title": "Taxonomy"
          },
          "tradeName": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Trade name"
          },
          "typeOfOccurrenceInFinland": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MX.doesNotOccur",
                "MX.typeOfOccurrenceOccurs",
                "MX.typeOfOccurrenceStablePopulation",
                "MX.typeOfOccurrenceCommon",
                "MX.typeOfOccurrenceRare",
                "MX.typeOfOccurrenceVeryRare",
                "MX.typeOfOccurrenceVagrant",
                "MX.typeOfOccurrenceRareVagrant",
                "MX.typeOfOccurrenceMigrant",
                "MX.typeOfOccurrenceImport",
                "MX.typeOfOccurrenceAnthropogenic",
                "MX.typeOfOccurrenceNotEstablished",
                "MX.typeOfOccurrenceExtirpated",
                "MX.typeOfOccurrenceOldRecords",
                "MX.typeOfOccurrenceUncertain",
                "MX.typeOfOccurrenceSpontaneousOldResident",
                "MX.typeOfOccurrenceSpontaneousNewResident",
                "MX.typeOfOccurrenceAlienOldResident",
                "MX.typeOfOccurrenceSpontaneousNewEphemeral",
                "MX.typeOfOccurrenceSpontaneousNewEphemeralOnlyOld",
                "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentPossiblyExtinct",
                "MX.typeOfOccurrenceSpontaneousOldFormerlyResidentExtinct",
                "MX.typeOfOccurrenceAlienNewEphemeral",
                "MX.typeOfOccurrenceAlienNewEphemeralOnlyold",
                "MX.typeOfOccurrenceAlienNewResident",
                "MX.typeOfOccurrenceAlienOldFormerlyResidentPossiblyExtinct",
                "MX.typeOfOccurrenceAlienOldExtinct",
                "MX.typeOfOccurrenceSmallDegreeCultivatedOrigin",
                "MX.typeOfOccurrenceNotableDegreeCultivatedOrigin",
                "MX.typeOfOccurrenceCompletelyCultivatedOrigin",
                "MX.typeOfOccurrenceOnlyCultivated",
                "MX.typeOfOccurrenceMaxShortDistanceEscape",
                "MX.typeOfOccurrenceMaxSoilImmigrant",
                "MX.typeOfOccurrenceMaxReplanted",
                "MX.typeOfOccurrenceMaxRelict",
                "MX.typeOfOccurrenceNotEvaluated",
                "MX.typeOfOccurrenceRegularBreeder",
                "MX.typeOfOccurrenceIrregularBreeder",
                "MX.typeOfOccurrencePassageMigrant",
                "MX.typeOfOccurrenceBirdLifeCategoryA",
                "MX.typeOfOccurrenceBirdLifeCategoryB",
                "MX.typeOfOccurrenceBirdLifeCategoryC",
                "MX.typeOfOccurrenceBirdLifeCategoryD",
                "MX.typeOfOccurrenceBirdLifeCategoryE",
                "MX.typeOfOccurrenceOccursBasedOnOccurrences"
              ]
            },
            "minItems": 0,
            "title": "Type of occurrence"
          },
          "typeOfOccurrenceInFinlandNotes": {
            "type": "string",
            "title": "Notes on occurrence in Finland"
          },
          "typeSpecimenURI": {
            "type": "string",
            "title": "Type specimen URI"
          },
          "vernacularName": {
            "$ref": "#/components/schemas/multiLang"
          },
          "winteringSecureLevel": {
            "type": "string",
            "enum": [
              "",
              "MX.secureLevelNone",
              "MX.secureLevelKM1",
              "MX.secureLevelKM5",
              "MX.secureLevelKM10",
              "MX.secureLevelKM25",
              "MX.secureLevelKM50",
              "MX.secureLevelKM100",
              "MX.secureLevelHighest",
              "MX.secureLevelNoShow"
            ],
            "title": "Secure level while wintering"
          },
          "createdAtTimestamp": {
            "type": "string",
            "title": "createdAtTimestamp"
          },
          "sortOrder": {
            "type": "integer",
            "title": "sortOrder"
          },
          "skos:exactMatch": {
            "type": "string",
            "title": "Taxonid.org identifier"
          }
        }
      },
      "taxonCensus": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Completeness of census"
          },
          "id": {
            "type": "string",
            "title": "Id for the Completeness of census"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Completeness of census"
          },
          "censusTaxonID": {
            "type": "string",
            "title": "Censused taxon"
          },
          "censusTaxonSetID": {
            "type": "string",
            "enum": [
              "",
              "MX.taxonSetSykeButterflyCensusPapilionoidea",
              "MX.taxonSetSykeButterflyCensusOther",
              "MX.taxonSetWaterbirdWaterbirds",
              "MX.taxonSetWaterbirdWaders",
              "MX.taxonSetWaterbirdGulls",
              "MX.taxonSetWaterbirdPasserines",
              "MX.taxonSetWaterbirdAmphibia",
              "MX.taxonSetSykeBumblebee",
              "MVL.1201",
              "MX.taxonSetSykeBumblebeeOther",
              "MX.taxonSetBirdAtlasCommon",
              "MX.taxonSetBiomonCompleteListOdonata"
            ],
            "title": "Censused taxon set"
          },
          "taxonCensusType": {
            "type": "string",
            "enum": [
              "MY.taxonCensusTypeCounted",
              "MY.taxonCensusTypeEstimated",
              "MY.taxonCensusTypeNotCounted"
            ],
            "title": "Completeness of census"
          }
        },
        "required": [
          "taxonCensusType"
        ]
      },
      "taxonConcept": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Taxon concept"
          },
          "id": {
            "type": "string",
            "title": "Id for the Taxon concept"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Taxon concept"
          },
          "congruent": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "congruent"
          },
          "excludes": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "excludes"
          },
          "includedIn": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "includedIn"
          },
          "overlaps": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "overlaps"
          }
        }
      },
      "taxonGroupIucnEditors": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the IUCN Editors"
          },
          "id": {
            "type": "string",
            "title": "Id for the IUCN Editors"
          },
          "@type": {
            "type": "string",
            "title": "Type for the IUCN Editors"
          },
          "iucnEditor": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "iucnEditor"
          },
          "taxonGroup": {
            "type": "string",
            "title": "taxonGroup"
          }
        },
        "required": [
          "taxonGroup"
        ]
      },
      "taxonInteraction": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Taxon interaction"
          },
          "id": {
            "type": "string",
            "title": "Id for the Taxon interaction"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Taxon interaction"
          },
          "interactionType": {
            "type": "string",
            "enum": [
              "MI.taxonInteractionNeutralism",
              "MI.taxonInteractionAntagonism",
              "MI.taxonInteractionCommensalism",
              "MI.taxonInteractionCompetition",
              "MI.taxonInteractionAmensalism",
              "MI.taxonInteractionMutualism",
              "MI.taxonInteractionPredation",
              "MI.taxonInteractionParasitism",
              "MI.taxonInteractionEctoparasitism",
              "MI.taxonInteractionEndoparasitism"
            ],
            "title": "Type of taxon interaction"
          },
          "objectLifeStage": {
            "type": "string",
            "enum": [
              "",
              "MY.lifeStageEgg",
              "MY.lifeStageLarva",
              "MY.lifeStagePupa",
              "MY.lifeStageJuvenile",
              "MY.lifeStageNymph",
              "MY.lifeStageSubimago",
              "MY.lifeStageImmature",
              "MY.lifeStageAdult",
              "MY.lifeStageFertile",
              "MY.lifeStageSterile",
              "MY.lifeStageTadpole",
              "MY.lifeStageDead",
              "MY.lifeStageAlive",
              "MY.lifeStageEmbryo",
              "MY.lifeStageSubadult",
              "MY.lifeStageMature",
              "MY.lifeStagePullus",
              "MY.lifeStageHatchedEgg",
              "MY.lifeStageHatchedPupa",
              "MY.lifeStageGall",
              "MY.lifeStageMarks",
              "MY.lifeStageTriungulin"
            ],
            "title": "Object taxon life stage"
          },
          "objectTaxon": {
            "type": "string",
            "title": "Object taxon"
          },
          "originalPublication": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Original publication"
          },
          "subjectLifeStage": {
            "type": "string",
            "enum": [
              "",
              "MY.lifeStageEgg",
              "MY.lifeStageLarva",
              "MY.lifeStagePupa",
              "MY.lifeStageJuvenile",
              "MY.lifeStageNymph",
              "MY.lifeStageSubimago",
              "MY.lifeStageImmature",
              "MY.lifeStageAdult",
              "MY.lifeStageFertile",
              "MY.lifeStageSterile",
              "MY.lifeStageTadpole",
              "MY.lifeStageDead",
              "MY.lifeStageAlive",
              "MY.lifeStageEmbryo",
              "MY.lifeStageSubadult",
              "MY.lifeStageMature",
              "MY.lifeStagePullus",
              "MY.lifeStageHatchedEgg",
              "MY.lifeStageHatchedPupa",
              "MY.lifeStageGall",
              "MY.lifeStageMarks",
              "MY.lifeStageTriungulin"
            ],
            "title": "Subject taxon life stage"
          },
          "subjectTaxon": {
            "type": "string",
            "title": "Subject taxon"
          }
        },
        "required": [
          "interactionType",
          "objectTaxon",
          "subjectTaxon"
        ]
      },
      "taxonSet": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Instances of this class are a taxon sets"
          },
          "id": {
            "type": "string",
            "title": "Id for the Instances of this class are a taxon sets"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Instances of this class are a taxon sets"
          }
        }
      },
      "transaction": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Transaction"
          },
          "id": {
            "type": "string",
            "title": "Id for the Transaction"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Transaction"
          },
          "IRCC": {
            "type": "string",
            "description": "Internationally Recognized Certificate of Compliance. Kotka checks from the ABS Clearing House that the entered IRCC number exists and is valid.",
            "title": "IRCC number"
          },
          "availableForGeneticResearch": {
            "type": "string",
            "enum": [
              "",
              "HRA.availableForGeneticResearchYes",
              "HRA.availableForGeneticResearchWithRestrictions",
              "HRA.availableForGeneticResearchNo"
            ],
            "description": "If you choose \"Yes, with restrictions\", explain the restrictions in the following field \"Rights and obligations\".",
            "title": "Is genetic research allowed on the genetic resource(s)?"
          },
          "availableForGeneticResearchNotes": {
            "type": "string",
            "title": "Research availability notes"
          },
          "away": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "away"
          },
          "collectionID": {
            "type": "string",
            "description": "For statiscal purposes. The collection where the transaction is directed to. Record transactions directed to different collections as separate transactions if you use this field.",
            "title": "Collection"
          },
          "correspondenceHeaderOrganizationCode": {
            "type": "string",
            "description": "Which Luomus' department is shown on loan sheets",
            "title": "Loan sheet organization"
          },
          "correspondentOrganization": {
            "type": "string",
            "description": "Select the correspondent organization from a list. If not found on the list, you need to add the new organization first.",
            "title": "Correspondent organization"
          },
          "correspondentPerson": {
            "type": "string",
            "description": "Name of the corresponding person. If the transaction goes to a private person, write his/her postal address here.",
            "title": "Corresponding person"
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the loan needs to be returned.",
            "title": "Due date"
          },
          "editNotes": {
            "type": "string",
            "title": "editNotes"
          },
          "externalTransactionID": {
            "type": "string",
            "description": "Sender's ID for the transaction.",
            "title": "Sender's transaction ID"
          },
          "geneticResourceAcquisitionCountry": {
            "type": "string",
            "description": "Country where the genetic resource or traditional knowledge was acquired from, provider country, country of origin. List of countries in Kotka is based on ISO 3166 Country Codes -standard and may differ from the country list in ABSCH.",
            "title": "Acquisition country"
          },
          "geneticResourceAcquisitionDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the genetic resource or traditional knowledge was aqcuired.",
            "title": "Acquisition date"
          },
          "geneticResourceDescription": {
            "type": "string",
            "description": "Description of the genetic resource or traditional knowledge (possible identifiers, taxa, number of specimens, region etc.). Instruction source EU DECLARE User manual and QA.",
            "title": "Description"
          },
          "geneticResourceRightsAndObligations": {
            "type": "string",
            "description": "Presence or absence of rights and obligations relating to access and benefit sharing, including rights and obligations regarding subsequent applications and commercialization. Instruction source EU DECLARE user manual and QA.",
            "title": "Rights and obligations"
          },
          "geneticResourceSource": {
            "type": "string",
            "description": "Person or legal entity from whom the user obtained the genetic resources directly, i.e. the previous actor in the value chain. Often a museum or other organization. If a genetic resource is obtained directly from the provider country, the name of the country should be provided. Instruction source EU DECLARE User manual and QA.",
            "title": "Source"
          },
          "geneticResourceType": {
            "type": "string",
            "enum": [
              "",
              "HRA.geneticResourceTypeAnimal",
              "HRA.geneticResourceTypePlant",
              "HRA.geneticResourceTypeFungus",
              "HRA.geneticResourceTypeMicrobe",
              "HRA.geneticResourceTypeSoil",
              "HRA.geneticResourceTypeAqua"
            ],
            "description": "Choose the type of the genetic resource for statistical and reporting purposes.",
            "title": "Type of resource"
          },
          "hasIRCC": {
            "type": "boolean",
            "description": "Whether the resource has an IRCC number or not. If not, more information needs to be filled in.",
            "title": "IRCC number provided?"
          },
          "ids": {
            "type": "string",
            "title": "ids"
          },
          "internalRemarks": {
            "$ref": "#/components/schemas/multiLang"
          },
          "localDepartment": {
            "type": "string",
            "enum": [
              "",
              "HRA.localDepartmentDipteraHymenoptera",
              "HRA.localDepartmentLepidopteraColeoptera",
              "HRA.localDepartmentMetazoa",
              "HRA.localDepartmentMonitoring",
              "HRA.localDepartmentBryology",
              "HRA.localDepartmentGarden",
              "HRA.localDepartmentMycology",
              "HRA.localDepartmentVascularPlants"
            ],
            "description": "Responsible team in our museum.",
            "title": "Team"
          },
          "localPerson": {
            "type": "string",
            "description": "Responsible person in our museum.",
            "title": "Person responsible"
          },
          "localPersonEmail": {
            "type": "string",
            "description": "Responsible person's email in our museum.",
            "title": "Email"
          },
          "localResearcher": {
            "type": "string",
            "description": "For incoming loans, name of the researcher receiving the loan.",
            "title": "Receiving researcher"
          },
          "material": {
            "$ref": "#/components/schemas/multiLang"
          },
          "missing": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "missing"
          },
          "oldLoanID": {
            "type": "string",
            "description": "Loan number used in paper loan catalogs or old software (e.g. Curator)",
            "title": "Old loan number"
          },
          "publicRemarks": {
            "$ref": "#/components/schemas/multiLang"
          },
          "receiptReturned": {
            "type": "string",
            "format": "date",
            "description": "When signed loan receipt was received from the loanee",
            "title": "Receipt returned"
          },
          "resourceImported": {
            "type": "string",
            "enum": [
              "",
              "HRA.resourceImportedGeneticResources",
              "HRA.resourceImportedTraditionalKnowledge",
              "HRA.resourceImportedBoth"
            ],
            "description": "Are you importing genetic resources, traditional knowledge associated to genetic resources or both?",
            "title": "What are you importing?"
          },
          "returned": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "returned"
          },
          "sentParcels": {
            "$ref": "#/components/schemas/multiLang"
          },
          "sentType": {
            "type": "string",
            "enum": [
              "",
              "HRA.sentTypePriority",
              "HRA.sentTypeEconomy",
              "HRA.sentTypeCourier",
              "HRA.sentTypeCarried",
              "HRA.sentTypeOther",
              "HRA.sentTypeImage"
            ],
            "description": "Means of sending, mail, courier etc.",
            "title": "Sent by"
          },
          "transactionEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/transactionEvent"
            }
          },
          "transactionRequestReceived": {
            "type": "string",
            "format": "date",
            "description": "When loan request, loan, gift or exchange was received here.",
            "title": "Received date"
          },
          "transactionReturned": {
            "type": "string",
            "format": "date",
            "description": "Date when the outgoing loan was returned back from the correspondent to the museum",
            "title": "Outgoing loan returned"
          },
          "transactionSent": {
            "type": "string",
            "format": "date",
            "description": "When the transaction was sent out from us",
            "title": "Sent/Returned"
          },
          "transactionStatus": {
            "type": "string",
            "enum": [
              "",
              "HRA.transactionStatusInProcess",
              "HRA.transactionStatusOutstanding",
              "HRA.transactionStatusClosed"
            ],
            "description": "Whether the transaction is closed, outstanding or in process.",
            "title": "Transaction status"
          },
          "transactionType": {
            "type": "string",
            "enum": [
              "HRA.transactionTypeLoanIncoming",
              "HRA.transactionTypeGiftIncoming",
              "HRA.transactionTypeExchangeIncoming",
              "HRA.transactionTypeLoanOutgoing",
              "HRA.transactionTypeGiftOutgoing",
              "HRA.transactionTypeExchangeOutgoing",
              "HRA.transactionTypeFieldCollection",
              "HRA.transactionTypeImportNotice",
              "HRA.transactionTypeABSNegotiations",
              "HRA.transactionTypeVirtualLoanOutgoing"
            ],
            "description": "What kind of transaction this is.",
            "title": "Transaction type"
          },
          "underNagoya": {
            "type": "boolean",
            "description": "Is it e.g. non-human genetic material that is going to be used for genetic research as is defined by the protocol?",
            "title": "Does Nagoya protocol apply?"
          },
          "awayOther": {
            "type": "integer",
            "title": "awayOther"
          },
          "damaged": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "damaged"
          },
          "damagedOther": {
            "type": "integer",
            "title": "damagedOther"
          },
          "missingOther": {
            "type": "integer",
            "title": "missingOther"
          },
          "returnedOther": {
            "type": "integer",
            "title": "returnedOther"
          },
          "creator": {
            "type": "string",
            "title": "Creator"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "dateEdited": {
            "type": "string",
            "format": "date-time",
            "title": "Edited"
          },
          "editor": {
            "type": "string",
            "title": "Editor"
          },
          "owner": {
            "type": "string",
            "description": "Team or organisation that owns the record and can edit it.",
            "title": "Owner of record"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          },
          "permits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permit"
            }
          }
        },
        "required": [
          "correspondentOrganization",
          "transactionRequestReceived",
          "transactionType"
        ]
      },
      "transactionEvent": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Transaction Event"
          },
          "id": {
            "type": "string",
            "title": "Id for the Transaction Event"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Transaction Event"
          },
          "eventDate": {
            "type": "string",
            "format": "date",
            "title": "Done on"
          },
          "eventHandler": {
            "type": "string",
            "title": "Handler"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "HRAA.eventTypeSend",
              "HRAA.eventTypeReceive",
              "HRAA.eventTypeOther"
            ],
            "title": "Type"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/transactionItem"
            }
          },
          "notes": {
            "type": "string",
            "title": "Notes"
          },
          "numberOfPackages": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Number of packages",
            "minimum": 0
          },
          "sentBy": {
            "type": "string",
            "enum": [
              "",
              "HRAA.sentByPriority",
              "HRAA.sentByEconomy",
              "HRAA.sentByCourier",
              "HRAA.sentByCarried",
              "HRAA.sentByOther"
            ],
            "title": "Sent by"
          }
        },
        "required": [
          "eventDate",
          "eventHandler",
          "eventType",
          "items"
        ]
      },
      "transactionItem": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Transaction Item"
          },
          "id": {
            "type": "string",
            "title": "Id for the Transaction Item"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Transaction Item"
          },
          "collectionID": {
            "type": "string",
            "title": "collection ID"
          },
          "itemCount": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "itemCount",
            "minimum": 0
          },
          "itemID": {
            "type": "string",
            "title": "Loan item ID"
          },
          "itemLabel": {
            "type": "string",
            "title": "Loan item"
          },
          "itemType": {
            "type": "string",
            "enum": [
              "HRAB.itemTypeSpecimen",
              "HRAB.itemTypeSpecimenBatch",
              "HRAB.itemTypeImage",
              "HRAB.itemTypeOther"
            ],
            "title": "Type"
          },
          "notes": {
            "type": "string",
            "title": "Notes"
          },
          "status": {
            "type": "string",
            "enum": [
              "HRAB.statusOk",
              "HRAB.statusMissing",
              "HRAB.statusDamaged"
            ],
            "title": "Status"
          }
        },
        "required": [
          "itemCount",
          "itemType",
          "status"
        ]
      },
      "translation": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.translation"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.translation"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.translation"
          },
          "en": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "minItems": 0,
            "title": "en"
          },
          "fi": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "minItems": 0,
            "title": "fi"
          },
          "sv": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "minItems": 0,
            "title": "sv"
          }
        }
      },
      "typeSpecimen": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Identification"
          },
          "id": {
            "type": "string",
            "title": "Id for the Identification"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Identification"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          },
          "typeAuthor": {
            "type": "string",
            "description": "Author of the type species",
            "title": "Type author"
          },
          "typeBasionymePubl": {
            "type": "string",
            "description": "Publication reference for original description or basionyme",
            "title": "Original description publication"
          },
          "typeNotes": {
            "type": "string",
            "description": "Additional information on the type",
            "title": "Type notes"
          },
          "typePubl": {
            "type": "string",
            "description": "Publication reference for type publication",
            "title": "Type publication"
          },
          "typeSeriesID": {
            "type": "string",
            "description": "ID for the type series, if part of one",
            "title": "Type series ID"
          },
          "typeSpecies": {
            "type": "string",
            "description": "Name of the type species",
            "title": "Type name"
          },
          "typeStatus": {
            "type": "string",
            "enum": [
              "",
              "MY.typeStatusType",
              "MY.typeStatusHolotype",
              "MY.typeStatusSyntype",
              "MY.typeStatusParatype",
              "MY.typeStatusLectotype",
              "MY.typeStatusParalectotype",
              "MY.typeStatusNeotype",
              "MY.typeStatusAllotype",
              "MY.typeStatusNeoallotype",
              "MY.typeStatusIsotype",
              "MY.typeStatusEpitype",
              "MY.typeStatusIsolectotype",
              "MY.typeStatusIsoepitype",
              "MY.typeStatusIsoneotype",
              "MY.typeStatusIsoparatype",
              "MY.typeStatusIsosyntype",
              "MY.typeStatusOriginalMaterial",
              "MY.typeStatusCotype",
              "MY.typeStatusTopotype",
              "MY.typeStatusHomotype",
              "MY.typeStatusNo",
              "MY.typeStatusPossible",
              "MY.typeStatusObscure",
              "MY.typeStatusTypeStrain",
              "MY.typeStatusPathovarReferenceStrain"
            ],
            "description": "Is this holotype, paratype, syntype etc...",
            "title": "Type of type"
          },
          "typeSubspecies": {
            "type": "string",
            "description": "Name of the type subspecies",
            "title": "Type ssp name"
          },
          "typeSubspeciesAuthor": {
            "type": "string",
            "description": "Author of the type subspecies",
            "title": "Type ssp author"
          },
          "typeVerification": {
            "type": "string",
            "enum": [
              "",
              "MY.typeVerificationVerified",
              "MY.typeVerificationUnverified",
              "MY.typeVerificationProbable",
              "MY.typeVerificationDoubtful"
            ],
            "description": "Verification whether this really is a type?",
            "title": "Verification"
          },
          "typif": {
            "type": "string",
            "description": "Name of the person who chose the type, preferably in the format \"Lastname, firstname\"",
            "title": "Typefier"
          },
          "typifDate": {
            "type": "string",
            "description": "Date when the specimen was chosen as a type",
            "title": "Typifier date"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          }
        }
      },
      "unit": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Specimen"
          },
          "id": {
            "type": "string",
            "title": "Id for the Specimen"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Specimen"
          },
          "DBH": {
            "type": "string",
            "description": "Diameter at breast height, in centimeters",
            "title": "DBH in centimeters"
          },
          "DNASampleLocation": {
            "type": "string",
            "description": "Leave empty if no sample taken, or if the sample is recorded separately",
            "title": "DNA sample location"
          },
          "abundanceString": {
            "type": "string",
            "title": "Amount"
          },
          "abundanceUnit": {
            "type": "string",
            "enum": [
              "",
              "MY.abundanceUnitIndividualCount",
              "MY.abundanceUnitPairCount",
              "MY.abundanceUnitNest",
              "MY.abundanceUnitBreedingSite",
              "MY.abundanceUnitColony",
              "MY.abundanceUnitQueen",
              "MY.abundanceUnitFruitbody",
              "MY.abundanceUnitSprout",
              "MY.abundanceUnitHummock",
              "MY.abundanceUnitThallus",
              "MY.abundanceUnitFlower",
              "MY.abundanceUnitSpot",
              "MY.abundanceUnitTrunk",
              "MY.abundanceUnitShell",
              "MY.abundanceUnitDroppings",
              "MY.abundanceUnitMarks",
              "MY.abundanceUnitIndirect",
              "MY.abundanceUnitSquareDM",
              "MY.abundanceUnitSquareM",
              "MY.abundanceUnitRelativeDensity",
              "MY.abundanceUnitOccursDoesNotOccur"
            ],
            "title": "Abundance unit"
          },
          "additionalIDs": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)",
            "title": "Additional ID's"
          },
          "adultIndividualCount": {
            "type": "integer",
            "title": "Adult individual count"
          },
          "age": {
            "type": "string",
            "description": "Estimated or known age in calendar years, years, days or other relevant unit.",
            "title": "Age"
          },
          "ageNotes": {
            "type": "string",
            "description": "E.g. how age was determined, by whom and when.",
            "title": "Age notes"
          },
          "alive": {
            "type": "boolean",
            "title": "Alive"
          },
          "ankleInMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Ankle"
          },
          "areaInSquareMeters": {
            "type": "integer",
            "minimum": 0,
            "title": "Occurrence area (m²)"
          },
          "atlasCode": {
            "type": "string",
            "enum": [
              "",
              "MY.atlasCodeEnum1",
              "MY.atlasCodeEnum2",
              "MY.atlasCodeEnum3",
              "MY.atlasCodeEnum4",
              "MY.atlasCodeEnum5",
              "MY.atlasCodeEnum6",
              "MY.atlasCodeEnum61",
              "MY.atlasCodeEnum62",
              "MY.atlasCodeEnum63",
              "MY.atlasCodeEnum64",
              "MY.atlasCodeEnum65",
              "MY.atlasCodeEnum66",
              "MY.atlasCodeEnum7",
              "MY.atlasCodeEnum71",
              "MY.atlasCodeEnum72",
              "MY.atlasCodeEnum73",
              "MY.atlasCodeEnum74",
              "MY.atlasCodeEnum75",
              "MY.atlasCodeEnum8",
              "MY.atlasCodeEnum81",
              "MY.atlasCodeEnum82"
            ],
            "title": "Breeding code"
          },
          "batBehavior": {
            "type": "string",
            "enum": [
              "",
              "MY.batBehaviorHibernating",
              "MY.batBehaviorRoosting",
              "MY.batBehaviorHunting",
              "MY.batBehaviorDead"
            ],
            "title": "Bat behavior"
          },
          "beakInMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Beak"
          },
          "birdAge": {
            "type": "string",
            "enum": [
              "",
              "MY.birdAgePp",
              "MY.birdAgePm",
              "MY.birdAgeFl",
              "MY.birdAgePlus1kv",
              "MY.birdAge1Kv",
              "MY.birdAgePlus2Kv",
              "MY.birdAge2kv",
              "MY.birdAgePlus3Kv",
              "MY.birdAge3Kv",
              "MY.birdAgePlus4Kv",
              "MY.birdAge4Kv",
              "MY.birdAgePlus5Kv",
              "MY.birdAge5Kv",
              "MY.birdAgePlus6Kv",
              "MY.birdAge6Kv",
              "MY.birdAgePlus7Kv",
              "MY.birdAge7Kv",
              "MY.birdAgePlus8Kv",
              "MY.birdAge8Kv"
            ],
            "title": "Bird age"
          },
          "birdBehavior": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Bird behavior"
          },
          "birdPlumage": {
            "type": "string",
            "enum": [
              "",
              "MY.birdPlumageAd",
              "MY.birdPlumageEijp",
              "MY.birdPlumageImm",
              "MY.birdPlumageJp",
              "MY.birdPlumageJuv",
              "MY.birdPlumageNpuk",
              "MY.birdPlumagePull",
              "MY.birdPlumageSubad",
              "MY.birdPlumageTp",
              "MY.birdPlumageVp",
              "MY.birdPlumagePep",
              "MY.birdPlumageSs"
            ],
            "title": "Bird plumage"
          },
          "breeding": {
            "type": "boolean",
            "title": "Breeding"
          },
          "broodSize": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Brood size",
            "minimum": 0
          },
          "causeOfDeath": {
            "type": "string",
            "description": "Cause of death, if not intentionally trapped on sampled",
            "title": "Cause of Death"
          },
          "checklistID": {
            "type": "string",
            "title": "Checklist"
          },
          "chemistry": {
            "type": "string",
            "description": "Results of chemical reaction tests etc.",
            "title": "Chemical properties"
          },
          "count": {
            "type": "string",
            "description": "Numeric or other description on the amount of individuals (or sprouts, fruiting bodies or such) in the specimen. Sexes and juveniles can be specified like so: 1m2f3j (=1 male, 2 females, 3 juveniles)",
            "title": "Count"
          },
          "decayStage": {
            "type": "string",
            "description": "Estimation of decay stage (lahoaste in Finnish) on the scale of 1 to 5 and/or description",
            "title": "Decay stage"
          },
          "distance": {
            "type": "string",
            "enum": [
              "",
              "MY.distanceOverFlight",
              "MY.distanceNear",
              "MY.distanceQuiteFar",
              "MY.distanceFar",
              "MY.distanceVeryFar"
            ],
            "title": "Distance"
          },
          "earliestEpochOrLowestSeries": {
            "type": "string",
            "enum": [
              "",
              "MY.epochOrSeriesCambrian",
              "MY.epochOrSeriesCarboniferous",
              "MY.epochOrSeriesCretaceous",
              "MY.epochOrSeriesDevonian",
              "MY.epochOrSeriesEdiacaran",
              "MY.epochOrSeriesJurassic",
              "MY.epochOrSeriesOrdovician",
              "MY.epochOrSeriesPermian",
              "MY.epochOrSeriesQuaternary",
              "MY.epochOrSeriesRecent",
              "MY.epochOrSeriesSilurian",
              "MY.epochOrSeriesTertiary",
              "MY.epochOrSeriesTriassic"
            ],
            "description": "For palaeontological specimens, earliest possible geochronologic epoch or lowest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected",
            "title": "Earliest epoch or lowest series"
          },
          "femaleIndividualCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Female individual count"
          },
          "fruitType": {
            "type": "string",
            "enum": [
              "",
              "MY.fruitTypeAchene",
              "MY.fruitTypeBerry",
              "MY.fruitTypeCapsule",
              "MY.fruitTypeCaryopsis",
              "MY.fruitTypeCone",
              "MY.fruitTypeDrupe",
              "MY.fruitTypeFollicle",
              "MY.fruitTypeLegume",
              "MY.fruitTypeNut",
              "MY.fruitTypeOther",
              "MY.fruitTypePome",
              "MY.fruitTypeSchizocarp",
              "MY.fruitTypeSiliqua"
            ],
            "description": "Fruit type of the collected fruits, used for botanical garden accessions/seed bank.",
            "title": "Fruit type"
          },
          "genotype": {
            "type": "string",
            "description": "Genotype of the microbial strain",
            "title": "Genotype"
          },
          "gonadInMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Gonad"
          },
          "growthMediumName": {
            "type": "string",
            "description": "Microbial culture growth medium name, usually from a standard",
            "title": "Growth medium name"
          },
          "growthOtherConditions": {
            "type": "string",
            "description": "Other growth conditions for the microbial culture, light etc.",
            "title": "Other conditions for growth"
          },
          "growthTemperature": {
            "type": "string",
            "description": "Microbial culture growth temperature",
            "title": "Growth temperature"
          },
          "hasIdentification": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "hasIdentification"
          },
          "hasSubUnit": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "hasSubUnit"
          },
          "hostID": {
            "type": "string",
            "title": "Host species"
          },
          "hostInformalNameString": {
            "type": "string",
            "title": "Host species"
          },
          "indirectObservationType": {
            "type": "string",
            "enum": [
              "",
              "MY.indirectObservationTypeFeces",
              "MY.indirectObservationTypeSnowTracks",
              "MY.indirectObservationTypeUrine",
              "MY.indirectObservationTypeFeasting",
              "MY.indirectObservationTypeFoodStock"
            ],
            "title": "Tracks"
          },
          "individualCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count"
          },
          "infestation": {
            "type": "string",
            "description": "Description of the infestation status of the collected seeds, used for botanical garden accessions/seed bank.",
            "title": "Infestation"
          },
          "informalNameString": {
            "type": "string",
            "title": "Species"
          },
          "informalTaxonGroup": {
            "type": "string",
            "title": "Informal taxon group"
          },
          "informalTaxonGroups": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "description": "Valitut eliöryhmät",
            "title": "Informal taxon groups"
          },
          "infrasubspecificSubdivision": {
            "type": "string",
            "description": "Pathovars, serovars and other infrasubspecific subdivisions of microbes.",
            "title": "Infrasubspecific subdivision"
          },
          "isPartOf": {
            "type": "string",
            "description": "Which parent or larger collection this is part of.",
            "title": "Is part of"
          },
          "juvenileIndividualCount": {
            "type": "integer",
            "title": "Juvenile individual count"
          },
          "keywords": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Keywords"
          },
          "larvaIndividualCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Larva count"
          },
          "latestEpochOrHighestSeries": {
            "type": "string",
            "enum": [
              "",
              "MY.epochOrSeriesCambrian",
              "MY.epochOrSeriesCarboniferous",
              "MY.epochOrSeriesCretaceous",
              "MY.epochOrSeriesDevonian",
              "MY.epochOrSeriesEdiacaran",
              "MY.epochOrSeriesJurassic",
              "MY.epochOrSeriesOrdovician",
              "MY.epochOrSeriesPermian",
              "MY.epochOrSeriesQuaternary",
              "MY.epochOrSeriesRecent",
              "MY.epochOrSeriesSilurian",
              "MY.epochOrSeriesTertiary",
              "MY.epochOrSeriesTriassic"
            ],
            "description": "For palaeontological specimens, latest possible geochronologic epoch or highest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected.",
            "title": "Latest epoch or highest series"
          },
          "lengthInMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Length"
          },
          "lifeStage": {
            "type": "string",
            "enum": [
              "",
              "MY.lifeStageEgg",
              "MY.lifeStageLarva",
              "MY.lifeStagePupa",
              "MY.lifeStageJuvenile",
              "MY.lifeStageNymph",
              "MY.lifeStageSubimago",
              "MY.lifeStageImmature",
              "MY.lifeStageAdult",
              "MY.lifeStageFertile",
              "MY.lifeStageSterile",
              "MY.lifeStageTadpole",
              "MY.lifeStageDead",
              "MY.lifeStageAlive",
              "MY.lifeStageEmbryo",
              "MY.lifeStageSubadult",
              "MY.lifeStageMature",
              "MY.lifeStagePullus",
              "MY.lifeStageHatchedEgg",
              "MY.lifeStageHatchedPupa",
              "MY.lifeStageGall",
              "MY.lifeStageMarks",
              "MY.lifeStageTriungulin"
            ],
            "description": "Life stage of the specimen",
            "title": "Life stage"
          },
          "lifeStageDescription": {
            "type": "string",
            "description": "Free-text notes or addtional information about the life stage",
            "title": "Life stage description"
          },
          "likelyMigrant": {
            "type": "boolean",
            "title": "Likely migrant (doesn't breed)"
          },
          "macroscopy": {
            "type": "string",
            "description": "Macroscopic features and measurements, if not recorded separately into measurement fields.",
            "title": "Macroscopic characters"
          },
          "maleIndividualCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Male individual count"
          },
          "measurement": {
            "$ref": "#/components/schemas/measurement"
          },
          "microbiologicalRiskGroup": {
            "type": "string",
            "enum": [
              "",
              "MY.microbiologicalRiskGroup1",
              "MY.microbiologicalRiskGroup2",
              "MY.microbiologicalRiskGroup3",
              "MY.microbiologicalRiskGroup4"
            ],
            "description": "According to German TRBA August 2015, which is more comprehensive than the EU or Finnish list for bacterial risk groups",
            "title": "Risk group"
          },
          "microscopy": {
            "type": "string",
            "description": "Microscopic features and measurements, if not recorded separately into measurement fields.",
            "title": "Microscopic characters"
          },
          "movingDirection": {
            "type": "string",
            "enum": [
              "",
              "MY.movingDirectionN",
              "MY.movingDirectionNNE",
              "MY.movingDirectionNE",
              "MY.movingDirectionENE",
              "MY.movingDirectionE",
              "MY.movingDirectionESE",
              "MY.movingDirectionSE",
              "MY.movingDirectionSSE",
              "MY.MovingDirectionS",
              "MY.movingDirectionSSW",
              "MY.movingDirectionSW",
              "MY.movingDirectionWSW",
              "MY.movingDirectionW",
              "MY.movingDirectionWNW",
              "MY.movingDirectionNW",
              "MY.movingDirectionNNW"
            ],
            "title": "Moving direction"
          },
          "movingStatus": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Moving status"
          },
          "mutant": {
            "type": "string",
            "description": "Information on mutant microbial strain.",
            "title": "Mutant"
          },
          "nativeStatus": {
            "type": "string",
            "enum": [
              "",
              "MY.native",
              "MY.nonNative"
            ],
            "title": "Native status"
          },
          "nestCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Nest/cavity count"
          },
          "nestNotes": {
            "type": "string",
            "title": "Nest notes"
          },
          "nestType": {
            "type": "string",
            "enum": [
              "",
              "MY.nestTypeTreeCavity",
              "MY.nestTypeTwig",
              "MY.nestTypeNestBox",
              "MY.nestTypeBuilding",
              "MY.nestTypeGroundCavity",
              "MY.nestTypeOther"
            ],
            "title": "Nest type"
          },
          "notes": {
            "type": "string",
            "description": "Additional information to the data in each section.",
            "title": "Notes"
          },
          "pairCount": {
            "type": "integer",
            "minimum": 0,
            "title": "Pair count"
          },
          "pairCountOpinion": {
            "type": "integer",
            "minimum": 0,
            "title": "Own interpretation/pairs"
          },
          "plantLifeStage": {
            "type": "string",
            "enum": [
              "",
              "MY.plantLifeStageSterile",
              "MY.plantLifeStageFertile",
              "MY.plantLifeStageSeed",
              "MY.plantLifeStageSprout",
              "MY.plantLifeStageBud",
              "MY.plantLifeStageFlower",
              "MY.plantLifeStageWitheredFlower",
              "MY.plantLifeStageRipeningFruit",
              "MY.plantLifeStageRipeFruit",
              "MY.plantLifeStageDeadSprout",
              "MY.plantLifeStageSubterranean",
              "MY.plantLifeStageLivingPlant",
              "MY.plantLifeStageDeadPlant"
            ],
            "title": "Plant life stage"
          },
          "plantStatusCode": {
            "type": "string",
            "enum": [
              "",
              "MY.plantStatusCodeL",
              "MY.plantStatusCodeA",
              "MY.plantStatusCodeAV",
              "MY.plantStatusCodeAOV",
              "MY.plantStatusCodeAN",
              "MY.plantStatusCodeANV",
              "MY.plantStatusCodeANS",
              "MY.plantStatusCodeT",
              "MY.plantStatusCodeTV",
              "MY.plantStatusCodeTOV",
              "MY.plantStatusCodeTNV",
              "MY.plantStatusCodeTNS",
              "MY.plantStatusCodeV",
              "MY.plantStatusCodeOV",
              "MY.plantStatusCodeN",
              "MY.plantStatusCodeNV",
              "MY.plantStatusCodeNS",
              "MY.plantStatusCodeE",
              "MY.plantStatusCodeTE",
              "MY.plantStatusCodeTVE",
              "MY.plantStatusCodeTOVE",
              "MY.plantStatusCodeTNVE",
              "MY.plantStatusCodeTNSE",
              "MY.plantStatusCodeTN",
              "MY.plantStatusCodeTNE",
              "MY.plantStatusCodeR",
              "MY.plantStatusCodeC",
              "MY.plantStatusCodeH",
              "MY.plantStatusCodeG",
              "MY.plantStatusCodeF"
            ],
            "description": "Status code for the plant (wild, alien etc.)",
            "title": "Plant status code"
          },
          "populationAbundance": {
            "type": "string",
            "description": "Abundance of the taxon in the field",
            "title": "Abundance in the field"
          },
          "preparations": {
            "type": "string",
            "description": "Preparations/preparates made from the specimen, if not recorded as separate Preparations/samples in the designated section",
            "title": "Preparations"
          },
          "preservation": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.preservationPressed",
                "MY.preservationDry",
                "MY.preservationCriticalPointDrying",
                "MY.preservationPinned",
                "MY.preservationGlued",
                "MY.preservationLiquid",
                "MY.preservationEthanol",
                "MY.preservationEthanolPure",
                "MY.preservationEthanol70",
                "MY.preservationEthanol80",
                "MY.preservationEthanol80Pure",
                "MY.preservationEthanol96",
                "MY.preservationEthanolDenatured",
                "MY.preservationEthanolFormalin",
                "MY.preservationEthanolExFormalin",
                "MY.preservationFormalin",
                "MY.preservationBouinSolution",
                "MY.preservationPampelsFluid",
                "MY.preservationGlycerol",
                "MY.preservationParaffin",
                "MY.preservationMercuricChloride",
                "MY.preservationCryopreserved",
                "MY.preservationFrozen",
                "MY.preservationFrozenMinus80C",
                "MY.preservationFreezeDried",
                "MY.preservationGoldPlated",
                "MY.preservationActiveCulture",
                "MY.preservationLiving",
                "MY.preservationSlide",
                "MY.preservationSlideCanadaBalsam",
                "MY.preservationSlideEuparal",
                "MY.preservationSlidePolyviol",
                "MY.preservationStuffed",
                "MY.preservationCast",
                "MY.preservationPlastinated",
                "MY.preservationFrozenMinus80CAndEthanolMinus20C"
              ]
            },
            "minItems": 0,
            "description": "Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.",
            "title": "Preservation"
          },
          "provenance": {
            "type": "string",
            "enum": [
              "",
              "MY.provenanceUnknown",
              "MY.provenanceCultivated",
              "MY.provenanceCultivatedUnsure",
              "MY.provenanceCultivatedPropagatedFromWildSource",
              "MY.provenanceWildSource",
              "MY.provenanceWildSourceUnsure",
              "MY.provenanceEscapedCultivated",
              "MY.provenancePropagule"
            ],
            "description": "Origin or source of the garden accession",
            "title": "Provenance"
          },
          "recordBasis": {
            "type": "string",
            "enum": [
              "",
              "MY.recordBasisPreservedSpecimen",
              "MY.recordBasisHumanObservation",
              "MY.recordBasisHumanObservationSeen",
              "MY.recordBasisHumanObservationHeard",
              "MY.recordBasisHumanObservationHandled",
              "MY.recordBasisHumanObservationPhoto",
              "MY.recordBasisHumanObservationAudio",
              "MY.recordBasisHumanObservationVideo",
              "MY.recordBasisHumanObservationIndirect",
              "MY.recordBasisMachineObservation",
              "MY.recordBasisMachineObservationVideo",
              "MY.recordBasisMachineObservationAudio",
              "MY.recordBasisMachineObservationGeologger",
              "MY.recordBasisMachineObservationSatelliteTransmitter",
              "MY.recordBasisFossilSpecimen",
              "MY.recordBasisSubfossilSpecimen",
              "MY.recordBasisLivingSpecimen",
              "MY.recordBasisMicrobialSpecimen",
              "MY.recordBasisLiterature",
              "MY.recordBasisMaterialSample",
              "MY.recordBasisSubfossilSpecimenAmberInclusion"
            ],
            "description": "Type of record, most commonly preserved specimen for museum specimens and observation for associated observations (\"seuralaislajihavainto\").",
            "title": "Record type"
          },
          "recordParts": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.recordPartsBones",
                "MY.recordPartsAntler",
                "MY.recordPartsHead",
                "MY.recordPartsSkull",
                "MY.recordPartsSkin",
                "MY.recordPartsWing",
                "MY.recordPartsTail",
                "MY.recordPartsTissue",
                "MY.recordPartsFeather",
                "MY.recordPartsEgg",
                "MY.recordPartsIntestine",
                "MY.recordPartsGonad",
                "MY.recordPartsSeed",
                "MY.recordPartsNest",
                "MY.recordPartsFaeces",
                "MY.recordPartsFeedingMarks",
                "MY.recordPartsTracks",
                "MY.recordPartsScale",
                "MY.recordPartsFin",
                "MY.recordPartsFull",
                "MY.recordPartsPart",
                "MY.recordPartsActiveCulture",
                "MY.recordPartsCutting",
                "MY.recordPartsVegetativePart",
                "MY.recordPartsFreezeDried",
                "MY.recordPartsDryIce",
                "MY.recordPartsDNA",
                "MY.recordPartsShell",
                "MY.recordPartsWholePlant",
                "MY.recordPartsTissueCulture",
                "MY.recordPartsMount",
                "My.recordPartsSkullAndBones"
              ]
            },
            "minItems": 0,
            "description": "What parts of the record are / have been in storage.",
            "title": "Record parts"
          },
          "ring": {
            "type": "string",
            "description": "Bird or bat ring number, code, colour code or such",
            "title": "Ring"
          },
          "samplingMethod": {
            "type": "string",
            "enum": [
              "",
              "MY.samplingMethodCarnet",
              "MY.samplingMethodFeromonetrap",
              "MY.samplingMethodNet",
              "MY.samplingMethodDrag",
              "MY.samplingMethodWindowtrap",
              "MY.samplingMethodDigging",
              "MY.samplingMethodFishNet",
              "MY.samplingMethodHand",
              "MY.samplingMethodReared",
              "MY.samplingMethodEpupa",
              "MY.samplingMethodExovo",
              "MY.samplingMethodElarva",
              "MY.samplingMethodFishTrap",
              "MY.samplingMethodYellowWindowTrap",
              "MY.samplingMethodYellowpan",
              "MY.samplingMethodTriangleDrag",
              "MY.samplingMethodPitfall",
              "MY.samplingMethodEclectortrap",
              "MY.samplingMethodDungTrap",
              "MY.samplingMethodBoard",
              "MY.samplingMethodYellowtrap",
              "MY.samplingMethodMistnet",
              "MY.samplingMethodSweeping",
              "MY.samplingMethodSoilsample",
              "MY.samplingMethodWashing",
              "MY.samplingMethodMalaise",
              "MY.samplingMethodPantrap",
              "MY.samplingMethodSeine",
              "MY.samplingMethodAngleFishing",
              "MY.samplingMethodTrampling",
              "MY.samplingMethodBeamTrawl",
              "MY.samplingMethodTrap",
              "MY.samplingMethodDropping",
              "MY.samplingMethodTrunkWindowTrap",
              "MY.samplingMethodElectrofishing",
              "MY.samplingMethodSifting",
              "MY.samplingMethodDiverInsectTrap",
              "MY.samplingMethodDiving",
              "MY.samplingMethodBait",
              "MY.samplingMethodBaittrap",
              "MY.samplingMethodTrawling",
              "MY.samplingMethodLight",
              "MY.samplingMethodLightTrap",
              "MY.samplingMethodWaterBucket",
              "MY.samplingMethodAquaticNet",
              "MY.samplingMethodAquaticEmergenceTrap",
              "MY.samplingMethodWaterSieve",
              "MY.samplingMethodOther"
            ],
            "description": "Main method for (usually intentional) sampling",
            "title": "Sampling method"
          },
          "samplingMethodNotes": {
            "type": "string",
            "title": "Sampling method notes"
          },
          "seedMaturity": {
            "type": "string",
            "enum": [
              "",
              "MY.seedMaturityImmature",
              "MY.seedMaturityMature",
              "MY.seedMaturityMixed"
            ],
            "description": "Maturity of the collected seeds, used for botanical garden accessions/seed bank.",
            "title": "Seed maturity"
          },
          "seedMorphology": {
            "type": "string",
            "enum": [
              "",
              "MY.seedMorphologyBent",
              "MY.seedMorphologyBroad",
              "MY.seedMorphologyCapitate",
              "MY.seedMorphologyFolded",
              "MY.seedMorphologyLateral",
              "MY.seedMorphologyLinearFullyDeveloped",
              "MY.seedMorphologyLinearUnderdeveloped",
              "MY.seedMorphologyPeripheral",
              "MY.seedMorphologyRudimentary",
              "MY.seedMorphologySpatulateFullyDeveloped",
              "MY.seedMorphologySpatulateUnderdeveloped",
              "MY.seedMorphologyUndifferentiated",
              "MY.seedMorphologyInvesting"
            ],
            "description": "Seed morphology of the collected seeds, used for botanical garden accessions/seed bank.",
            "title": "Seed morphology"
          },
          "sex": {
            "type": "string",
            "enum": [
              "",
              "MY.sexM",
              "MY.sexF",
              "MY.sexW",
              "MY.sexU",
              "MY.sexN",
              "MY.sexX",
              "MY.sexE",
              "MY.sexC"
            ],
            "description": "Sex of the individual(s)",
            "title": "Sex"
          },
          "sexNotes": {
            "type": "string",
            "description": "E.g. how sex was determined, by whom and when.",
            "title": "Sex notes"
          },
          "shortHandText": {
            "type": "string",
            "title": "Shorthand"
          },
          "smell": {
            "type": "string",
            "enum": [
              "",
              "MY.smellNotSmelled",
              "MY.smellNoSmelled",
              "MY.smellWeak",
              "MY.smellModerate",
              "MY.smellStrong"
            ],
            "title": "Smell"
          },
          "smellNotes": {
            "type": "string",
            "title": "Smell notes"
          },
          "stratigraphyVerbatim": {
            "type": "string",
            "title": "Verbatim stratigraphy from original source"
          },
          "substrateClassification": {
            "type": "string",
            "enum": [
              "",
              "MY.substrateGround",
              "MY.substrateGroundLowShrubs",
              "MY.substrateGroundLichens",
              "MY.substrateGroundHerbs",
              "MY.substrateGroundMosses",
              "MY.substrateGroundSphagnum",
              "MY.substrateGroundGrassy",
              "MY.substrateGroundNeedleLitter",
              "MY.substrateGroundLeafLitter",
              "MY.substrateGroundMixedLitter",
              "MY.substrateGroundSandySoil",
              "MY.substrateGroundGravelSoil",
              "MY.substrateGroundClayeySoil",
              "MY.substrateGroundHeathHumus",
              "MY.substrateGroundMull",
              "MY.substrateGroundPeat",
              "MY.substrateGroundBurnedSoil",
              "MY.substrateLivingTree",
              "MY.substrateLivingTreeTrunk",
              "MY.substrateLivingTreeBase",
              "MY.substrateLivingTreeRoots",
              "MY.substrateLivingTreeBranch",
              "MY.substrateLivingTreeDeadBranch",
              "MY.substrateLivingTreeDeadLimb",
              "MY.substrateLivingTreeLeaf",
              "MY.substrateLivingTreeNeedle",
              "MY.substrateDeadWood",
              "MY.substrateDeadWoodStandingTreeTrunk",
              "MY.substrateDeadWoodStandingTreeBranch",
              "MY.substrateDeadWoodStandingTreeBase",
              "MY.substrateDeadWoodFallenTreeTrunk",
              "MY.substrateDeadWoodFallenTreeBranch",
              "MY.substrateDeadWoodUpturnedRoots",
              "MY.substrateDeadWoodDeadRoots",
              "MY.substrateDeadWoodStump",
              "MY.substrateDeadWoodFallenBranch",
              "MY.substrateDeadWoodCone",
              "MY.substrateDeadWoodTwigs",
              "MY.substrateDeadWoodBark",
              "MY.substrateDeadWoodSawdust",
              "MY.substrateDeadWoodPieceOfWood",
              "MY.substrateDeadWoodLoggingResidue",
              "MY.substrateDeadWoodLog",
              "MY.substrateDeadWoodDriftwood",
              "MY.substrateDeadWoodConstructionWood",
              "MY.substrateDung",
              "MY.substrateCompost",
              "MY.substrateLivingShoot",
              "MY.substrateDeadShoot",
              "MY.substrateLivingFungus",
              "MY.substrateDeadFungus",
              "MY.substrateLivingAnimal",
              "MY.substrateDeadAnimal",
              "MY.substrateRockSurface",
              "MY.substrateDeadNeedle",
              "MY.substrateDeadLeaf"
            ],
            "title": "Type of substrate"
          },
          "substrateDecayStage": {
            "type": "string",
            "enum": [
              "",
              "MY.substrateDecayStageEnum1",
              "MY.substrateDecayStageEnum2",
              "MY.substrateDecayStageEnum3",
              "MY.substrateDecayStageEnum4",
              "MY.substrateDecayStageEnum5"
            ],
            "title": "Woody substrate, decay stage"
          },
          "substrateNotes": {
            "type": "string",
            "title": "Substrate notes"
          },
          "substrateSpecies": {
            "type": "string",
            "title": "Substrate species"
          },
          "substrateSpeciesID": {
            "type": "string",
            "title": "Substrate species"
          },
          "substrateSpeciesInformalNameString": {
            "type": "string",
            "title": "Substrate species"
          },
          "substrateTreeClassification": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string",
              "enum": [
                "",
                "MY.substrateTreeClassificationEnum1",
                "MY.substrateTreeClassificationEnum2",
                "MY.substrateTreeClassificationEnum3",
                "MY.substrateTreeClassificationEnum4",
                "MY.substrateTreeClassificationEnum5",
                "MY.substrateTreeClassificationEnum6"
              ]
            },
            "minItems": 0,
            "title": "Woody substrate, additional information"
          },
          "tailInMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Tail"
          },
          "taste": {
            "type": "string",
            "enum": [
              "",
              "MY.tasteNotTasted",
              "MY.tasteNoTaste",
              "MY.tasteWeak",
              "MY.tasteModerate",
              "MY.tasteStrong"
            ],
            "title": "Taste"
          },
          "tasteNotes": {
            "type": "string",
            "title": "Taste notes"
          },
          "taxonConfidence": {
            "type": "string",
            "enum": [
              "",
              "MY.taxonConfidenceSure",
              "MY.taxonConfidenceUnsure",
              "MY.taxonConfidenceSubspeciesUnsure"
            ],
            "title": "Confidence of determination"
          },
          "twitched": {
            "type": "boolean",
            "title": "Twitched"
          },
          "unitFact": {
            "$ref": "#/components/schemas/unitFact"
          },
          "unitGathering": {
            "$ref": "#/components/schemas/unitGathering"
          },
          "unitType": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Specimen type"
          },
          "weightInGrams": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Weight"
          },
          "wild": {
            "type": "string",
            "enum": [
              "",
              "MY.wildWild",
              "MY.wildUnknown",
              "MY.wildNonWild"
            ],
            "title": "Native status"
          },
          "wingInMillimeters": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Wing length (mm)"
          },
          "audio": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Recordings"
          },
          "images": {
            "type": "array",
            "uniqueItems": false,
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "title": "Images"
          },
          "publicityRestrictions": {
            "type": "string",
            "enum": [
              "",
              "MZ.publicityRestrictionsPublic",
              "MZ.publicityRestrictionsProtected",
              "MZ.publicityRestrictionsPrivate"
            ],
            "description": "PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.",
            "title": "Publicity restrictions"
          },
          "identifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identification"
            }
          },
          "typeSpecimens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/typeSpecimen"
            }
          }
        }
      },
      "unitFact": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Näytteen / havainnon faktat"
          },
          "id": {
            "type": "string",
            "title": "Id for the Näytteen / havainnon faktat"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Näytteen / havainnon faktat"
          },
          "adultIndividualCount": {
            "type": "integer",
            "title": "Adult individual count"
          },
          "autocompleteSelectedTaxonID": {
            "type": "string",
            "title": "Taxon ID selected from autocomplete"
          },
          "glowWormMicrohabitat": {
            "type": "string",
            "enum": [
              "",
              "MY.glowWormMicrohabitatEnum1",
              "MY.glowWormMicrohabitatEnum2",
              "MY.glowWormMicrohabitatEnum3",
              "MY.glowWormMicrohabitatEnum4",
              "MY.glowWormMicrohabitatEnum5",
              "MY.glowWormMicrohabitatEnum6",
              "MY.glowWormMicrohabitatEnumOther"
            ],
            "title": "Micro habitat"
          },
          "individualCountFlock": {
            "type": "integer",
            "minimum": 0,
            "title": "Parven koko"
          },
          "individualCountInner": {
            "type": "integer",
            "minimum": 0,
            "title": "Yksilömäärä sisällä"
          },
          "individualCountOuter": {
            "type": "integer",
            "minimum": 0,
            "title": "Yksilömäärä alueen ulkopuolella"
          },
          "juvenileIndividualCount": {
            "type": "integer",
            "title": "Juvenile individual count"
          },
          "lineTransectObsType": {
            "type": "string",
            "enum": [
              "",
              "MY.lineTransectObsTypeSong",
              "MY.lineTransectObsTypeOtherSound",
              "MY.lineTransectObsTypeSeen",
              "MY.lineTransectObsTypeSeenMale",
              "MY.lineTransectObsTypeSeenFemale",
              "MY.lineTransectObsTypeFlyingOverhead",
              "MY.lineTransectObsTypeFlock",
              "MY.lineTransectObsTypeFlockFlyingOverhead",
              "MY.lineTransectObsTypeSeenPair",
              "MY.lineTransectObsTypeSeenBrood",
              "MY.lineTransectObsTypeSeenNest",
              "MY.lineTransectObsTypeUnknown"
            ],
            "title": "Observations quality"
          },
          "lineTransectRouteFieldType": {
            "type": "string",
            "enum": [
              "",
              "MY.lineTransectRouteFieldTypeInner",
              "MY.lineTransectRouteFieldTypeOuter"
            ],
            "title": "Field Area"
          },
          "lolifeDroppingsCount": {
            "type": "string",
            "enum": [
              "",
              "MY.lolifeDroppingsCount1",
              "MY.lolifeDroppingsCount2",
              "MY.lolifeDroppingsCount3"
            ],
            "title": "Droppings count"
          },
          "lolifeDroppingsQuality": {
            "type": "string",
            "enum": [
              "",
              "MY.lolifeDroppingsQuality1",
              "MY.lolifeDroppingsQuality2"
            ],
            "title": "Papanoiden laatu"
          },
          "lolifeDroppingsType": {
            "type": "string",
            "enum": [
              "",
              "MY.lolifeDroppingsTypeRock",
              "MY.lolifeDroppingsTypeTree",
              "MY.lolifeDroppingsTypeTreeGroup",
              "MY.lolifeDroppingsTypeOther"
            ],
            "title": "Droppings type"
          },
          "lolifeNestTree": {
            "type": "string",
            "enum": [
              "",
              "MX.38590",
              "MX.37812",
              "MX.37999",
              "MX.37993",
              "MX.38010",
              "MX.38008",
              "MY.lolifeNestTreeOther"
            ],
            "title": "Tree species"
          },
          "pairCountInner": {
            "type": "integer",
            "minimum": 0,
            "title": "Parimäärä sisällä"
          },
          "pairCountOuter": {
            "type": "integer",
            "minimum": 0,
            "title": "Parimäärä alueen ulkopuolella"
          },
          "pointCountFlock": {
            "type": "string",
            "title": "Parvien koot"
          },
          "runningWaterInVicinity": {
            "type": "boolean",
            "title": "Is the plant growing next to running water?"
          },
          "waterbirdFemale": {
            "type": "string",
            "enum": [
              "",
              "MY.waterbirdFemaleEnumYes",
              "MY.waterbirdFemaleEnumNo",
              "MY.waterbirdFemaleEnumLonelyPanicking"
            ],
            "title": "Female observed"
          },
          "waterbirdJuvenileAgeClass": {
            "type": "string",
            "enum": [
              "",
              "MY.waterbirdJuvenileAgeClassIa",
              "MY.waterbirdJuvenileAgeClassIb",
              "MY.waterbirdJuvenileAgeClassIc",
              "MY.waterbirdJuvenileAgeClassIIa",
              "MY.waterbirdJuvenileAgeClassIIb",
              "MY.waterbirdJuvenileAgeClassIIc",
              "MY.waterbirdJuvenileAgeClassIIIa",
              "MY.waterbirdJuvenileAgeClassUnknown"
            ],
            "title": "Juvenile age class"
          },
          "waterbirdJuvenileCountAccurate": {
            "type": "boolean",
            "title": "Count accurate?"
          },
          "waterbirdObserverOpinionSelectedCensus": {
            "type": "boolean",
            "title": "Make an interpretation based on this census"
          },
          "waterbirdPairCountOpinionReasoning": {
            "type": "string",
            "enum": [
              "",
              "MY.waterbirdPairCountOpinionReasoningEnum1",
              "MY.waterbirdPairCountOpinionReasoningEnum2",
              "MY.waterbirdPairCountOpinionReasoningEnum3",
              "MY.waterbirdPairCountOpinionReasoningEnumOther"
            ],
            "title": "Reasoning for own interpretation"
          },
          "individualCountBiotopeA": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count dump"
          },
          "individualCountBiotopeB": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count urban"
          },
          "individualCountBiotopeC": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count countryside"
          },
          "individualCountBiotopeD": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count field"
          },
          "individualCountBiotopeE": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count forest"
          },
          "individualCountBiotopeF": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count other biotope"
          },
          "individualCountBiotopeG": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count cutting open"
          },
          "individualCountBiotopeH": {
            "type": "integer",
            "minimum": 0,
            "title": "Individual count reed"
          }
        }
      },
      "unitGathering": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Havainnon keruutiedot"
          },
          "id": {
            "type": "string",
            "title": "Id for the Havainnon keruutiedot"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Havainnon keruutiedot"
          },
          "dateBegin": {
            "type": "string",
            "title": "Start date"
          },
          "dateEnd": {
            "type": "string",
            "title": "End date"
          },
          "geometry": {
            "$ref": "#/components/schemas/geometry"
          },
          "habitatDescription": {
            "type": "string",
            "description": "Informal description of the habitat.",
            "title": "Habitat description"
          },
          "habitatIUCN": {
            "type": "string",
            "title": "Habitat"
          },
          "substrate": {
            "type": "string",
            "description": "Type of substrate or name of substrate species.",
            "title": "Substrate"
          }
        }
      },
      "validator": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the MHL.validator"
          },
          "id": {
            "type": "string",
            "title": "Id for the MHL.validator"
          },
          "@type": {
            "type": "string",
            "title": "Type for the MHL.validator"
          }
        }
      },
      "video": {
        "type": "object",
        "properties": {
          "@context": {
            "type": "string",
            "title": "Context for the Video"
          },
          "id": {
            "type": "string",
            "title": "Id for the Video"
          },
          "@type": {
            "type": "string",
            "title": "Type for the Video"
          }
        }
      },
      "patchObj": {
        "title": "JSONPatch",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "additionalProperties": false,
              "required": [
                "value",
                "op",
                "path"
              ],
              "properties": {
                "path": {
                  "description": "A JSON Pointer path.",
                  "type": "string"
                },
                "op": {
                  "description": "The operation to perform.",
                  "type": "string",
                  "enum": [
                    "add",
                    "replace",
                    "test"
                  ]
                },
                "value": {
                  "description": "The value to add, replace or test."
                }
              }
            },
            {
              "additionalProperties": false,
              "required": [
                "op",
                "path"
              ],
              "properties": {
                "path": {
                  "description": "A JSON Pointer path.",
                  "type": "string"
                },
                "op": {
                  "description": "The operation to perform.",
                  "type": "string",
                  "enum": [
                    "remove"
                  ]
                }
              }
            },
            {
              "additionalProperties": false,
              "required": [
                "from",
                "op",
                "path"
              ],
              "properties": {
                "path": {
                  "description": "A JSON Pointer path.",
                  "type": "string"
                },
                "op": {
                  "description": "The operation to perform.",
                  "type": "string",
                  "enum": [
                    "move",
                    "copy"
                  ]
                },
                "from": {
                  "description": "A JSON Pointer path pointing to the location to move/copy from.",
                  "type": "string"
                }
              }
            }
          ]
        }
      },
      "geometry": {
        "anyOf": [
          {
            "title": "GeoJSON Geometry",
            "oneOf": [
              {
                "title": "GeoJSON Point",
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "bbox": {
                    "type": "array",
                    "minItems": 4,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              {
                "title": "GeoJSON LineString",
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "LineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "bbox": {
                    "type": "array",
                    "minItems": 4,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              {
                "title": "GeoJSON Polygon",
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 4,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "bbox": {
                    "type": "array",
                    "minItems": 4,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              {
                "title": "GeoJSON MultiPoint",
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "MultiPoint"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "bbox": {
                    "type": "array",
                    "minItems": 4,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              {
                "title": "GeoJSON MultiLineString",
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "MultiLineString"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "bbox": {
                    "type": "array",
                    "minItems": 4,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              {
                "title": "GeoJSON MultiPolygon",
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "MultiPolygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "minItems": 4,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "bbox": {
                    "type": "array",
                    "minItems": 4,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            ]
          },
          {
            "title": "GeoJSON GeometryCollection",
            "type": "object",
            "required": [
              "type",
              "geometries"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "GeometryCollection"
                ]
              },
              "geometries": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "GeoJSON Point",
                      "type": "object",
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Point"
                          ]
                        },
                        "coordinates": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        },
                        "bbox": {
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    {
                      "title": "GeoJSON LineString",
                      "type": "object",
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "LineString"
                          ]
                        },
                        "coordinates": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "bbox": {
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    {
                      "title": "GeoJSON Polygon",
                      "type": "object",
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Polygon"
                          ]
                        },
                        "coordinates": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "minItems": 4,
                            "items": {
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        },
                        "bbox": {
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    {
                      "title": "GeoJSON MultiPoint",
                      "type": "object",
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "MultiPoint"
                          ]
                        },
                        "coordinates": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "bbox": {
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    {
                      "title": "GeoJSON MultiLineString",
                      "type": "object",
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "MultiLineString"
                          ]
                        },
                        "coordinates": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        },
                        "bbox": {
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    {
                      "title": "GeoJSON MultiPolygon",
                      "type": "object",
                      "required": [
                        "type",
                        "coordinates"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "MultiPolygon"
                          ]
                        },
                        "coordinates": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "minItems": 4,
                              "items": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        },
                        "bbox": {
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "bbox": {
                "type": "array",
                "minItems": 4,
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      },
      "multiLang": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "en": {
            "type": "string"
          },
          "fi": {
            "type": "string"
          },
          "sv": {
            "type": "string"
          }
        }
      },
      "pagedView": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "@id": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          },
          "itemsPerPage": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "required": [
          "@id",
          "@type",
          "itemsPerPage",
          "first",
          "last"
        ]
      },
      "esSearchObj": {
        "required": [
          "patch"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "object"
          },
          "patch": {
            "$ref": "#/components/schemas/patchObj"
          }
        }
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "tags": [
    {
      "name": "Utilities",
      "description": "endpoints for misc items"
    },
    {
      "name": "BibliographicResource",
      "description": "Bibliographic Resource"
    },
    {
      "name": "Concept",
      "description": "Concept"
    },
    {
      "name": "Pinkka",
      "description": "Instances of this describe one taxon description context (Pinkka eLearning enviroment)"
    },
    {
      "name": "administrativeStatus",
      "description": "Administrative status"
    },
    {
      "name": "agent",
      "description": "agent"
    },
    {
      "name": "annotation",
      "description": "annotation"
    },
    {
      "name": "annotationOccurrence",
      "description": "annotationOccurrence"
    },
    {
      "name": "area",
      "description": "Area"
    },
    {
      "name": "audio",
      "description": "Audio recording"
    },
    {
      "name": "birdSongRecognitionSkillLevel",
      "description": "Instances of this class are bird song recognition skill levels of a certain area"
    },
    {
      "name": "branch",
      "description": "Branch"
    },
    {
      "name": "checklist",
      "description": "Checklist"
    },
    {
      "name": "checklistVersion",
      "description": "Checklist version"
    },
    {
      "name": "collection",
      "description": "Collection"
    },
    {
      "name": "completeList",
      "description": "completeList"
    },
    {
      "name": "contentContextDescription",
      "description": "Instances of this describe one taxon description context"
    },
    {
      "name": "dataField",
      "description": "Data field"
    },
    {
      "name": "dataset",
      "description": "Tag"
    },
    {
      "name": "dateRange",
      "description": "dateRange"
    },
    {
      "name": "device",
      "description": "device"
    },
    {
      "name": "deviceIndividual",
      "description": "deviceIndividual"
    },
    {
      "name": "document",
      "description": "Submissions"
    },
    {
      "name": "downloadRequest",
      "description": "Download request"
    },
    {
      "name": "endangerment",
      "description": "Endagerment object"
    },
    {
      "name": "event",
      "description": "event"
    },
    {
      "name": "field",
      "description": "field"
    },
    {
      "name": "fieldset",
      "description": "fieldset"
    },
    {
      "name": "form",
      "description": "form"
    },
    {
      "name": "formFooter",
      "description": "formFooter"
    },
    {
      "name": "formInstructions",
      "description": "formInstructions"
    },
    {
      "name": "formNamedPlaceOptions",
      "description": "formNamedPlaceOptions"
    },
    {
      "name": "formOptions",
      "description": "formOptions"
    },
    {
      "name": "formPermission",
      "description": "formPermission"
    },
    {
      "name": "formPermissionPerson",
      "description": "formPermissionPerson"
    },
    {
      "name": "formPermissionSingle",
      "description": "formPermissionSingle"
    },
    {
      "name": "formSeason",
      "description": "formSeason"
    },
    {
      "name": "gathering",
      "description": "Gathering event"
    },
    {
      "name": "gatheringEvent",
      "description": "Global gathering event"
    },
    {
      "name": "gatheringFact",
      "description": "Keruutapahtuman faktat"
    },
    {
      "name": "habitat",
      "description": "IUCN Red List Evaluation Habitat"
    },
    {
      "name": "identification",
      "description": "Identification"
    },
    {
      "name": "image",
      "description": "Image"
    },
    {
      "name": "individual",
      "description": "individual"
    },
    {
      "name": "informalTaxonGroup",
      "description": "Informal Taxon Group"
    },
    {
      "name": "informationSystem",
      "description": "Information System"
    },
    {
      "name": "iucnRedListEvaluation",
      "description": "IUCN Red List Evaluation"
    },
    {
      "name": "iucnRedListEvaluationYear",
      "description": "IUCN Evaluation Year"
    },
    {
      "name": "iucnRedListTaxonGroup",
      "description": "IUCN Red List Evaluation Informal Taxon Group"
    },
    {
      "name": "measurement",
      "description": "measurement"
    },
    {
      "name": "multimedia",
      "description": "multimedia"
    },
    {
      "name": "namedPlace",
      "description": "namedPlace"
    },
    {
      "name": "news",
      "description": "News"
    },
    {
      "name": "notification",
      "description": "notification"
    },
    {
      "name": "occurrence",
      "description": "Occurrence"
    },
    {
      "name": "organization",
      "description": "Organization"
    },
    {
      "name": "permit",
      "description": "permit"
    },
    {
      "name": "person",
      "description": "Person"
    },
    {
      "name": "preparation",
      "description": "preparation"
    },
    {
      "name": "profile",
      "description": "profile"
    },
    {
      "name": "publication",
      "description": "Publication"
    },
    {
      "name": "regionalStatus",
      "description": "Instances of this class tell endangerment of a certain area and notes about the area"
    },
    {
      "name": "reserve",
      "description": "reserve"
    },
    {
      "name": "sample",
      "description": "Specimen sample"
    },
    {
      "name": "subUnit",
      "description": "subUnit"
    },
    {
      "name": "tag",
      "description": "tag"
    },
    {
      "name": "taxon",
      "description": "Taxon"
    },
    {
      "name": "taxonCensus",
      "description": "Completeness of census"
    },
    {
      "name": "taxonConcept",
      "description": "Taxon concept"
    },
    {
      "name": "taxonGroupIucnEditors",
      "description": "IUCN Editors"
    },
    {
      "name": "taxonInteraction",
      "description": "Taxon interaction"
    },
    {
      "name": "taxonSet",
      "description": "Instances of this class are a taxon sets"
    },
    {
      "name": "transaction",
      "description": "Transaction"
    },
    {
      "name": "transactionEvent",
      "description": "Transaction Event"
    },
    {
      "name": "transactionItem",
      "description": "Transaction Item"
    },
    {
      "name": "translation",
      "description": "translation"
    },
    {
      "name": "typeSpecimen",
      "description": "Identification"
    },
    {
      "name": "unit",
      "description": "Specimen"
    },
    {
      "name": "unitFact",
      "description": "Näytteen / havainnon faktat"
    },
    {
      "name": "unitGathering",
      "description": "Havainnon keruutiedot"
    },
    {
      "name": "validator",
      "description": "validator"
    },
    {
      "name": "video",
      "description": "Video"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ]
}